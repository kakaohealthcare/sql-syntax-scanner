# Generated from SqlBaseParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,386,3874,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,1,0,1,0,5,0,393,8,0,10,0,12,
        0,396,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,421,8,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,434,8,7,1,7,1,7,1,7,1,7,1,7,3,
        7,441,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,449,8,7,10,7,12,7,452,9,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,471,8,7,1,7,1,7,3,7,475,8,7,1,7,1,7,1,7,1,7,3,7,481,8,7,
        1,7,3,7,484,8,7,1,7,3,7,487,8,7,1,7,1,7,1,7,1,7,1,7,3,7,494,8,7,
        1,7,3,7,497,8,7,1,7,1,7,3,7,501,8,7,1,7,3,7,504,8,7,1,7,1,7,1,7,
        1,7,1,7,3,7,511,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,522,
        8,7,10,7,12,7,525,9,7,1,7,1,7,1,7,1,7,1,7,3,7,532,8,7,1,7,3,7,535,
        8,7,1,7,1,7,3,7,539,8,7,1,7,3,7,542,8,7,1,7,1,7,1,7,1,7,3,7,548,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,559,8,7,1,7,1,7,1,7,
        1,7,3,7,565,8,7,1,7,1,7,1,7,3,7,570,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,604,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,617,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,3,7,642,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,651,8,7,1,7,
        1,7,3,7,655,8,7,1,7,1,7,1,7,1,7,3,7,661,8,7,1,7,1,7,3,7,665,8,7,
        1,7,1,7,1,7,3,7,670,8,7,1,7,1,7,1,7,1,7,3,7,676,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,688,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,696,8,7,1,7,1,7,1,7,1,7,3,7,702,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,715,8,7,1,7,4,7,718,8,7,11,7,12,7,719,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,736,8,
        7,1,7,1,7,1,7,5,7,741,8,7,10,7,12,7,744,9,7,1,7,3,7,747,8,7,1,7,
        1,7,1,7,1,7,3,7,753,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,768,8,7,1,7,1,7,3,7,772,8,7,1,7,1,7,1,7,1,7,3,7,
        778,8,7,1,7,1,7,1,7,1,7,3,7,784,8,7,1,7,3,7,787,8,7,1,7,3,7,790,
        8,7,1,7,1,7,1,7,1,7,3,7,796,8,7,1,7,1,7,3,7,800,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,5,7,808,8,7,10,7,12,7,811,9,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,819,8,7,1,7,3,7,822,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,831,
        8,7,1,7,1,7,1,7,3,7,836,8,7,1,7,1,7,1,7,1,7,3,7,842,8,7,1,7,1,7,
        1,7,1,7,1,7,3,7,849,8,7,1,7,3,7,852,8,7,1,7,1,7,1,7,1,7,3,7,858,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,867,8,7,10,7,12,7,870,9,7,3,
        7,872,8,7,1,7,1,7,3,7,876,8,7,1,7,1,7,1,7,3,7,881,8,7,1,7,1,7,1,
        7,1,7,3,7,887,8,7,1,7,3,7,890,8,7,1,7,1,7,3,7,894,8,7,1,7,3,7,897,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,904,8,7,1,7,1,7,1,7,3,7,909,8,7,1,7,
        1,7,1,7,1,7,1,7,3,7,916,8,7,1,7,3,7,919,8,7,1,7,3,7,922,8,7,1,7,
        1,7,1,7,1,7,1,7,3,7,929,8,7,1,7,1,7,1,7,3,7,934,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,3,7,943,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,951,8,7,
        1,7,1,7,1,7,1,7,3,7,957,8,7,1,7,3,7,960,8,7,1,7,3,7,963,8,7,1,7,
        1,7,1,7,1,7,3,7,969,8,7,1,7,1,7,3,7,973,8,7,1,7,1,7,1,7,3,7,978,
        8,7,1,7,3,7,981,8,7,1,7,1,7,3,7,985,8,7,3,7,987,8,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,995,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1003,8,7,1,7,
        3,7,1006,8,7,1,7,1,7,1,7,3,7,1011,8,7,1,7,1,7,1,7,1,7,3,7,1017,8,
        7,1,7,1,7,1,7,1,7,3,7,1023,8,7,1,7,3,7,1026,8,7,1,7,1,7,3,7,1030,
        8,7,1,7,3,7,1033,8,7,1,7,1,7,3,7,1037,8,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,5,7,1063,8,7,10,7,12,7,1066,9,7,3,7,1068,8,7,1,7,1,7,3,
        7,1072,8,7,1,7,1,7,1,7,1,7,3,7,1078,8,7,1,7,3,7,1081,8,7,1,7,3,7,
        1084,8,7,1,7,1,7,1,7,1,7,3,7,1090,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,1098,8,7,1,7,1,7,1,7,3,7,1103,8,7,1,7,1,7,1,7,1,7,3,7,1109,8,7,
        1,7,1,7,1,7,1,7,3,7,1115,8,7,1,7,3,7,1118,8,7,1,7,1,7,1,7,1,7,1,
        7,3,7,1125,8,7,1,7,1,7,1,7,5,7,1130,8,7,10,7,12,7,1133,9,7,1,7,1,
        7,1,7,5,7,1138,8,7,10,7,12,7,1141,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,5,7,1155,8,7,10,7,12,7,1158,9,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,5,7,1182,8,7,10,7,12,7,1185,9,7,3,7,1187,8,7,1,7,1,
        7,5,7,1191,8,7,10,7,12,7,1194,9,7,1,7,1,7,1,7,1,7,5,7,1200,8,7,10,
        7,12,7,1203,9,7,1,7,1,7,1,7,1,7,5,7,1209,8,7,10,7,12,7,1212,9,7,
        1,7,1,7,1,7,1,7,1,7,3,7,1219,8,7,1,7,1,7,1,7,3,7,1224,8,7,1,7,1,
        7,1,7,3,7,1229,8,7,1,7,1,7,1,7,1,7,1,7,3,7,1236,8,7,1,7,1,7,1,7,
        1,7,3,7,1242,8,7,1,7,1,7,1,7,3,7,1247,8,7,1,7,1,7,1,7,1,7,5,7,1253,
        8,7,10,7,12,7,1256,9,7,3,7,1258,8,7,1,8,1,8,1,8,1,8,1,8,3,8,1265,
        8,8,1,8,3,8,1268,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1277,8,9,1,
        10,1,10,3,10,1281,8,10,1,11,1,11,3,11,1285,8,11,1,11,1,11,3,11,1289,
        8,11,1,12,1,12,1,12,5,12,1294,8,12,10,12,12,12,1297,9,12,1,13,1,
        13,3,13,1301,8,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        16,3,16,1313,8,16,1,16,1,16,3,16,1317,8,16,1,16,1,16,1,16,1,16,1,
        16,3,16,1324,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,3,16,1440,8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1448,8,16,1,
        16,1,16,1,16,1,16,1,16,1,16,3,16,1456,8,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,3,16,1465,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,3,16,1475,8,16,1,17,1,17,3,17,1479,8,17,1,17,3,17,1482,8,17,1,
        17,1,17,1,17,1,17,3,17,1488,8,17,1,17,1,17,1,18,1,18,3,18,1494,8,
        18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,20,3,20,1512,8,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,21,3,21,1524,8,21,1,21,1,21,1,21,3,21,1529,8,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,3,24,1538,8,24,1,24,1,24,1,24,1,
        25,1,25,1,25,3,25,1546,8,25,1,25,1,25,1,25,1,25,1,25,3,25,1553,8,
        25,3,25,1555,8,25,1,25,1,25,1,25,3,25,1560,8,25,1,25,1,25,1,25,3,
        25,1565,8,25,1,25,1,25,3,25,1569,8,25,1,25,1,25,1,25,3,25,1574,8,
        25,1,25,1,25,1,25,3,25,1579,8,25,1,25,1,25,1,25,3,25,1584,8,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1593,8,25,1,25,1,25,1,25,3,
        25,1598,8,25,1,25,3,25,1601,8,25,1,25,1,25,1,25,3,25,1606,8,25,1,
        25,1,25,3,25,1610,8,25,1,25,1,25,1,25,3,25,1615,8,25,3,25,1617,8,
        25,1,26,1,26,3,26,1621,8,26,1,27,1,27,1,27,1,27,1,27,5,27,1628,8,
        27,10,27,12,27,1631,9,27,1,27,1,27,1,28,1,28,1,28,3,28,1638,8,28,
        1,28,1,28,1,28,1,28,3,28,1644,8,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,3,31,1655,8,31,1,32,1,32,1,32,5,32,1660,8,32,10,32,
        12,32,1663,9,32,1,33,1,33,1,33,1,33,5,33,1669,8,33,10,33,12,33,1672,
        9,33,1,34,1,34,3,34,1676,8,34,1,34,3,34,1679,8,34,1,34,1,34,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,5,36,1702,8,36,10,36,12,36,1705,9,36,1,
        37,1,37,1,37,1,37,5,37,1711,8,37,10,37,12,37,1714,9,37,1,37,1,37,
        1,38,1,38,3,38,1720,8,38,1,38,3,38,1723,8,38,1,39,1,39,1,39,5,39,
        1728,8,39,10,39,12,39,1731,9,39,1,39,3,39,1734,8,39,1,40,1,40,1,
        40,1,40,3,40,1740,8,40,1,41,1,41,1,41,1,41,5,41,1746,8,41,10,41,
        12,41,1749,9,41,1,41,1,41,1,42,1,42,3,42,1755,8,42,1,42,3,42,1758,
        8,42,1,43,1,43,1,43,1,43,5,43,1764,8,43,10,43,12,43,1767,9,43,1,
        43,1,43,1,44,1,44,1,44,1,44,5,44,1775,8,44,10,44,12,44,1778,9,44,
        1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1788,8,45,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1796,8,46,1,47,1,47,1,47,1,47,3,47,1802,
        8,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,4,49,1812,8,49,11,49,
        12,49,1813,1,49,1,49,1,49,1,49,1,49,3,49,1821,8,49,1,49,1,49,1,49,
        1,49,1,49,3,49,1828,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,3,49,1840,8,49,1,49,1,49,1,49,1,49,5,49,1846,8,49,10,49,
        12,49,1849,9,49,1,49,5,49,1852,8,49,10,49,12,49,1855,9,49,1,49,5,
        49,1858,8,49,10,49,12,49,1861,9,49,3,49,1863,8,49,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,1871,8,50,1,51,1,51,1,51,1,51,1,51,5,51,1878,
        8,51,10,51,12,51,1881,9,51,3,51,1883,8,51,1,51,1,51,1,51,1,51,1,
        51,5,51,1890,8,51,10,51,12,51,1893,9,51,3,51,1895,8,51,1,51,1,51,
        1,51,1,51,1,51,5,51,1902,8,51,10,51,12,51,1905,9,51,3,51,1907,8,
        51,1,51,1,51,1,51,1,51,1,51,5,51,1914,8,51,10,51,12,51,1917,9,51,
        3,51,1919,8,51,1,51,3,51,1922,8,51,1,51,1,51,1,51,3,51,1927,8,51,
        3,51,1929,8,51,1,51,1,51,3,51,1933,8,51,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,3,53,1945,8,53,1,53,1,53,1,53,1,53,1,53,
        3,53,1952,8,53,1,53,1,53,1,53,1,53,1,53,3,53,1959,8,53,1,53,5,53,
        1962,8,53,10,53,12,53,1965,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,3,54,1976,8,54,1,55,1,55,3,55,1980,8,55,1,55,1,55,3,
        55,1984,8,55,1,56,1,56,4,56,1988,8,56,11,56,12,56,1989,1,57,1,57,
        3,57,1994,8,57,1,57,1,57,1,57,1,57,5,57,2000,8,57,10,57,12,57,2003,
        9,57,1,57,3,57,2006,8,57,1,57,3,57,2009,8,57,1,57,3,57,2012,8,57,
        1,57,3,57,2015,8,57,1,57,1,57,3,57,2019,8,57,1,58,1,58,3,58,2023,
        8,58,1,58,5,58,2026,8,58,10,58,12,58,2029,9,58,1,58,3,58,2032,8,
        58,1,58,3,58,2035,8,58,1,58,3,58,2038,8,58,1,58,3,58,2041,8,58,1,
        58,1,58,3,58,2045,8,58,1,58,5,58,2048,8,58,10,58,12,58,2051,9,58,
        1,58,3,58,2054,8,58,1,58,3,58,2057,8,58,1,58,3,58,2060,8,58,1,58,
        3,58,2063,8,58,3,58,2065,8,58,1,59,1,59,1,59,1,59,3,59,2071,8,59,
        1,59,1,59,1,59,1,59,1,59,3,59,2078,8,59,1,59,1,59,1,59,3,59,2083,
        8,59,1,59,3,59,2086,8,59,1,59,3,59,2089,8,59,1,59,1,59,3,59,2093,
        8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2103,8,59,1,59,
        1,59,3,59,2107,8,59,3,59,2109,8,59,1,59,3,59,2112,8,59,1,59,1,59,
        3,59,2116,8,59,1,60,1,60,5,60,2120,8,60,10,60,12,60,2123,9,60,1,
        60,3,60,2126,8,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,
        62,2137,8,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,3,63,2147,8,
        63,1,63,1,63,3,63,2151,8,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,3,64,2163,8,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,3,65,2175,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,5,66,2188,8,66,10,66,12,66,2191,9,66,1,66,1,66,
        3,66,2195,8,66,1,67,1,67,1,67,1,67,3,67,2201,8,67,1,68,1,68,1,68,
        1,68,1,68,1,69,1,69,1,69,5,69,2211,8,69,10,69,12,69,2214,9,69,1,
        70,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,3,
        73,2229,8,73,1,73,5,73,2232,8,73,10,73,12,73,2235,9,73,1,73,1,73,
        1,74,1,74,1,74,1,74,1,74,1,74,5,74,2245,8,74,10,74,12,74,2248,9,
        74,1,74,1,74,3,74,2252,8,74,1,75,1,75,1,75,1,75,5,75,2258,8,75,10,
        75,12,75,2261,9,75,1,75,5,75,2264,8,75,10,75,12,75,2267,9,75,1,75,
        3,75,2270,8,75,1,75,3,75,2273,8,75,1,76,3,76,2276,8,76,1,76,1,76,
        1,76,1,76,1,76,3,76,2283,8,76,1,76,1,76,1,76,1,76,3,76,2289,8,76,
        1,77,1,77,1,77,1,77,1,77,5,77,2296,8,77,10,77,12,77,2299,9,77,1,
        77,1,77,1,77,1,77,1,77,5,77,2306,8,77,10,77,12,77,2309,9,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,5,77,2321,8,77,10,77,
        12,77,2324,9,77,1,77,1,77,3,77,2328,8,77,3,77,2330,8,77,1,78,1,78,
        3,78,2334,8,78,1,79,1,79,1,79,1,79,1,79,5,79,2341,8,79,10,79,12,
        79,2344,9,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,2354,8,
        79,10,79,12,79,2357,9,79,1,79,1,79,3,79,2361,8,79,1,80,1,80,3,80,
        2365,8,80,1,81,1,81,1,81,1,81,5,81,2371,8,81,10,81,12,81,2374,9,
        81,3,81,2376,8,81,1,81,1,81,3,81,2380,8,81,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,5,82,2392,8,82,10,82,12,82,2395,9,82,
        1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,5,83,2405,8,83,10,83,12,
        83,2408,9,83,1,83,1,83,3,83,2412,8,83,1,84,1,84,3,84,2416,8,84,1,
        84,3,84,2419,8,84,1,85,1,85,3,85,2423,8,85,1,85,1,85,1,85,1,85,3,
        85,2429,8,85,1,85,3,85,2432,8,85,1,86,1,86,1,86,1,87,1,87,3,87,2439,
        8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,2449,8,88,10,88,
        12,88,2452,9,88,1,88,1,88,1,89,1,89,1,89,1,89,5,89,2460,8,89,10,
        89,12,89,2463,9,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,
        2473,8,89,10,89,12,89,2476,9,89,1,89,1,89,1,90,1,90,1,90,1,90,5,
        90,2484,8,90,10,90,12,90,2487,9,90,1,90,1,90,3,90,2491,8,90,1,91,
        1,91,1,92,1,92,1,93,1,93,3,93,2499,8,93,1,94,1,94,1,95,3,95,2504,
        8,95,1,95,1,95,1,96,1,96,1,96,3,96,2511,8,96,1,96,1,96,1,96,1,96,
        1,96,5,96,2518,8,96,10,96,12,96,2521,9,96,3,96,2523,8,96,1,96,1,
        96,1,96,3,96,2528,8,96,1,96,1,96,1,96,5,96,2533,8,96,10,96,12,96,
        2536,9,96,3,96,2538,8,96,1,97,1,97,1,98,3,98,2543,8,98,1,98,1,98,
        5,98,2547,8,98,10,98,12,98,2550,9,98,1,99,1,99,1,99,3,99,2555,8,
        99,1,100,1,100,1,100,3,100,2560,8,100,1,100,1,100,3,100,2564,8,100,
        1,100,1,100,1,100,1,100,3,100,2570,8,100,1,100,1,100,3,100,2574,
        8,100,1,101,3,101,2577,8,101,1,101,1,101,1,101,3,101,2582,8,101,
        1,101,3,101,2585,8,101,1,101,1,101,1,101,3,101,2590,8,101,1,101,
        1,101,3,101,2594,8,101,1,101,3,101,2597,8,101,1,101,3,101,2600,8,
        101,1,102,1,102,1,102,1,102,3,102,2606,8,102,1,103,1,103,1,103,3,
        103,2611,8,103,1,103,1,103,1,103,1,103,1,103,3,103,2618,8,103,1,
        104,3,104,2621,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,
        104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2639,8,
        104,3,104,2641,8,104,1,104,3,104,2644,8,104,1,105,1,105,1,105,1,
        105,1,106,1,106,1,106,5,106,2653,8,106,10,106,12,106,2656,9,106,
        1,107,1,107,1,107,1,107,5,107,2662,8,107,10,107,12,107,2665,9,107,
        1,107,1,107,1,108,1,108,3,108,2671,8,108,1,109,1,109,1,109,1,109,
        5,109,2677,8,109,10,109,12,109,2680,9,109,1,109,1,109,1,110,1,110,
        3,110,2686,8,110,1,111,1,111,3,111,2690,8,111,1,111,3,111,2693,8,
        111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2701,8,111,1,111,1,
        111,1,111,1,111,1,111,1,111,3,111,2709,8,111,1,111,1,111,1,111,1,
        111,3,111,2715,8,111,1,112,1,112,1,112,1,112,5,112,2721,8,112,10,
        112,12,112,2724,9,112,1,112,1,112,1,113,1,113,1,113,3,113,2731,8,
        113,1,113,1,113,1,113,1,113,1,113,3,113,2738,8,113,1,113,1,113,1,
        113,1,113,1,113,3,113,2745,8,113,3,113,2747,8,113,1,114,1,114,1,
        114,1,114,1,114,1,114,1,114,1,114,1,114,5,114,2758,8,114,10,114,
        12,114,2761,9,114,1,114,1,114,1,114,3,114,2766,8,114,3,114,2768,
        8,114,1,114,1,114,1,114,1,114,1,114,1,114,5,114,2776,8,114,10,114,
        12,114,2779,9,114,1,114,1,114,1,114,3,114,2784,8,114,3,114,2786,
        8,114,1,115,1,115,1,115,1,115,1,116,1,116,3,116,2794,8,116,1,117,
        1,117,3,117,2798,8,117,1,118,1,118,1,118,1,118,1,118,5,118,2805,
        8,118,10,118,12,118,2808,9,118,3,118,2810,8,118,1,118,1,118,1,118,
        1,119,3,119,2816,8,119,1,119,1,119,3,119,2820,8,119,3,119,2822,8,
        119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2831,8,120,1,
        120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,
        2843,8,120,3,120,2845,8,120,1,120,1,120,1,120,1,120,1,120,3,120,
        2852,8,120,1,120,1,120,1,120,1,120,1,120,3,120,2859,8,120,1,120,
        1,120,1,120,1,120,3,120,2865,8,120,1,120,1,120,1,120,1,120,3,120,
        2871,8,120,3,120,2873,8,120,1,121,1,121,1,121,5,121,2878,8,121,10,
        121,12,121,2881,9,121,1,122,1,122,1,122,5,122,2886,8,122,10,122,
        12,122,2889,9,122,1,123,1,123,1,123,5,123,2894,8,123,10,123,12,123,
        2897,9,123,1,124,1,124,1,124,3,124,2902,8,124,1,125,1,125,1,125,
        3,125,2907,8,125,1,125,1,125,1,126,1,126,1,126,3,126,2914,8,126,
        1,126,1,126,1,127,1,127,3,127,2920,8,127,1,127,1,127,3,127,2924,
        8,127,3,127,2926,8,127,1,128,1,128,1,128,5,128,2931,8,128,10,128,
        12,128,2934,9,128,1,129,1,129,1,129,1,129,5,129,2940,8,129,10,129,
        12,129,2943,9,129,1,129,1,129,1,130,1,130,3,130,2949,8,130,1,131,
        1,131,1,131,1,131,1,131,1,131,5,131,2957,8,131,10,131,12,131,2960,
        9,131,1,131,1,131,3,131,2964,8,131,1,132,1,132,3,132,2968,8,132,
        1,133,1,133,1,134,1,134,1,134,1,134,1,135,1,135,3,135,2978,8,135,
        1,136,1,136,1,136,5,136,2983,8,136,10,136,12,136,2986,9,136,1,137,
        1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,2998,
        8,137,3,137,3000,8,137,1,137,1,137,1,137,1,137,1,137,1,137,5,137,
        3008,8,137,10,137,12,137,3011,9,137,1,138,3,138,3014,8,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,3022,8,138,1,138,1,138,1,138,
        1,138,1,138,5,138,3029,8,138,10,138,12,138,3032,9,138,1,138,1,138,
        1,138,3,138,3037,8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,
        3045,8,138,1,138,1,138,1,138,3,138,3050,8,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,5,138,3060,8,138,10,138,12,138,3063,
        9,138,1,138,1,138,3,138,3067,8,138,1,138,3,138,3070,8,138,1,138,
        1,138,1,138,1,138,3,138,3076,8,138,1,138,1,138,3,138,3080,8,138,
        1,138,1,138,1,138,3,138,3085,8,138,1,138,1,138,1,138,3,138,3090,
        8,138,1,138,1,138,1,138,3,138,3095,8,138,1,139,1,139,1,139,1,139,
        3,139,3101,8,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        5,139,3122,8,139,10,139,12,139,3125,9,139,1,140,1,140,1,141,1,141,
        1,141,1,141,1,141,1,141,3,141,3135,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3147,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,4,141,3157,8,141,11,141,12,141,
        3158,1,141,1,141,3,141,3163,8,141,1,141,1,141,1,141,1,141,1,141,
        4,141,3170,8,141,11,141,12,141,3171,1,141,1,141,3,141,3176,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,5,141,3192,8,141,10,141,12,141,3195,9,141,3,141,
        3197,8,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,3205,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,3214,8,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3223,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,
        3237,8,141,1,141,1,141,1,141,1,141,3,141,3243,8,141,1,141,1,141,
        1,141,1,141,4,141,3249,8,141,11,141,12,141,3250,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3262,8,141,1,141,1,141,
        1,141,5,141,3267,8,141,10,141,12,141,3270,9,141,3,141,3272,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,5,141,3283,
        8,141,10,141,12,141,3286,9,141,1,141,1,141,3,141,3290,8,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3298,8,141,1,141,1,141,3,141,
        3302,8,141,1,141,1,141,3,141,3306,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,4,141,3316,8,141,11,141,12,141,3317,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3343,8,141,1,141,1,141,1,141,1,141,1,141,3,141,3350,8,141,
        1,141,3,141,3353,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3368,8,141,1,141,1,141,
        3,141,3372,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,5,141,3385,8,141,10,141,12,141,3388,9,141,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,3,142,3397,8,142,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,4,143,3410,
        8,143,11,143,12,143,3411,3,143,3414,8,143,1,144,1,144,1,145,1,145,
        1,146,1,146,1,147,1,147,1,148,1,148,1,148,3,148,3427,8,148,1,149,
        1,149,3,149,3431,8,149,1,150,1,150,1,150,4,150,3436,8,150,11,150,
        12,150,3437,1,151,1,151,1,151,3,151,3443,8,151,1,152,1,152,1,152,
        1,152,1,152,1,153,3,153,3451,8,153,1,153,1,153,1,153,3,153,3456,
        8,153,1,154,1,154,1,155,1,155,1,156,1,156,1,156,3,156,3465,8,156,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,3498,
        8,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,3,158,3515,8,158,1,158,1,158,3,158,
        3519,8,158,1,158,1,158,1,158,1,158,3,158,3525,8,158,1,158,1,158,
        1,158,1,158,3,158,3531,8,158,1,158,1,158,1,158,1,158,1,158,5,158,
        3538,8,158,10,158,12,158,3541,9,158,1,158,3,158,3544,8,158,3,158,
        3546,8,158,1,159,1,159,1,159,5,159,3551,8,159,10,159,12,159,3554,
        9,159,1,160,1,160,1,160,5,160,3559,8,160,10,160,12,160,3562,9,160,
        1,161,1,161,1,161,1,161,1,161,3,161,3569,8,161,1,162,1,162,1,162,
        1,163,1,163,1,163,1,164,1,164,1,164,5,164,3580,8,164,10,164,12,164,
        3583,9,164,1,165,1,165,1,165,1,165,3,165,3589,8,165,1,165,3,165,
        3592,8,165,1,166,1,166,1,166,5,166,3597,8,166,10,166,12,166,3600,
        9,166,1,167,1,167,1,167,5,167,3605,8,167,10,167,12,167,3608,9,167,
        1,168,1,168,1,168,1,168,1,168,3,168,3615,8,168,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,170,1,170,1,170,5,170,3627,8,170,10,170,
        12,170,3630,9,170,1,171,1,171,3,171,3634,8,171,1,171,1,171,1,171,
        3,171,3639,8,171,1,171,3,171,3642,8,171,1,172,1,172,1,172,1,172,
        1,172,1,173,1,173,1,173,1,173,5,173,3653,8,173,10,173,12,173,3656,
        9,173,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,5,175,3673,8,175,10,175,12,175,3676,
        9,175,1,175,1,175,1,175,1,175,1,175,5,175,3683,8,175,10,175,12,175,
        3686,9,175,3,175,3688,8,175,1,175,1,175,1,175,1,175,1,175,5,175,
        3695,8,175,10,175,12,175,3698,9,175,3,175,3700,8,175,3,175,3702,
        8,175,1,175,3,175,3705,8,175,1,175,3,175,3708,8,175,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,3,176,3726,8,176,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,3,177,3735,8,177,1,178,1,178,1,178,5,178,3740,8,178,
        10,178,12,178,3743,9,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,3,179,3755,8,179,1,180,1,180,1,180,5,180,3760,
        8,180,10,180,12,180,3763,9,180,1,181,1,181,1,181,1,182,1,182,4,182,
        3770,8,182,11,182,12,182,3771,1,182,3,182,3775,8,182,1,183,1,183,
        1,183,3,183,3780,8,183,1,184,1,184,1,184,1,184,1,184,1,184,3,184,
        3788,8,184,1,185,1,185,1,185,3,185,3793,8,185,1,186,1,186,1,187,
        1,187,3,187,3799,8,187,1,187,1,187,1,187,3,187,3804,8,187,1,187,
        1,187,1,187,3,187,3809,8,187,1,187,1,187,3,187,3813,8,187,1,187,
        1,187,3,187,3817,8,187,1,187,1,187,3,187,3821,8,187,1,187,1,187,
        3,187,3825,8,187,1,187,1,187,3,187,3829,8,187,1,187,1,187,3,187,
        3833,8,187,1,187,1,187,3,187,3837,8,187,1,187,3,187,3840,8,187,1,
        188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        3,188,3853,8,188,1,189,1,189,1,189,3,189,3858,8,189,1,190,1,190,
        3,190,3862,8,190,1,191,1,191,3,191,3866,8,191,1,192,1,192,1,193,
        1,193,1,194,1,194,1,194,9,1064,1131,1139,1156,1183,1192,1201,1210,
        1254,4,106,274,278,282,195,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,0,59,2,0,78,78,224,224,
        2,0,34,34,242,242,2,0,121,121,139,139,1,0,49,50,2,0,285,285,332,
        332,2,0,11,11,39,39,5,0,46,46,58,58,106,106,120,120,171,171,1,0,
        86,87,2,0,106,106,120,120,3,0,8,8,95,95,282,282,2,0,8,8,165,165,
        1,0,328,329,3,0,72,72,187,187,254,254,3,0,73,73,188,188,255,255,
        4,0,100,100,147,147,263,263,316,316,3,0,100,100,263,263,316,316,
        2,0,21,21,86,86,2,0,114,114,156,156,2,0,284,284,331,331,2,0,283,
        283,295,295,2,0,61,61,249,249,2,0,102,102,140,140,2,0,10,10,91,91,
        2,0,375,375,377,377,2,0,92,92,212,212,2,0,204,204,271,271,1,0,161,
        162,3,0,10,10,16,16,270,270,3,0,109,109,309,309,318,318,2,0,353,
        354,358,358,2,0,93,93,355,357,2,0,353,354,361,361,11,0,67,67,69,
        69,132,132,177,177,179,179,181,181,183,183,226,226,252,252,335,335,
        342,342,4,0,63,63,65,66,261,261,324,324,2,0,74,75,298,298,3,0,76,
        77,294,294,299,299,2,0,36,36,311,311,2,0,136,136,241,241,1,0,280,
        281,2,0,4,4,121,121,2,0,4,4,117,117,3,0,28,28,159,159,304,304,1,
        0,345,352,2,0,93,93,353,362,4,0,14,14,139,139,193,193,203,203,2,
        0,109,109,309,309,1,0,353,354,7,0,67,68,132,133,177,184,189,190,
        252,253,335,336,342,343,6,0,67,67,132,132,181,181,183,183,252,252,
        342,342,2,0,183,183,342,342,4,0,67,67,132,132,181,181,252,252,3,
        0,132,132,181,181,252,252,2,0,82,82,345,345,2,0,116,116,221,221,
        1,0,376,377,2,0,95,95,262,262,51,0,8,9,11,13,15,15,17,19,21,22,24,
        27,29,34,37,41,43,46,48,48,50,56,58,58,61,62,67,90,92,95,99,99,101,
        108,111,111,113,116,119,120,123,126,129,129,131,138,140,142,144,
        146,148,150,153,153,155,156,158,158,161,190,192,192,195,197,201,
        202,205,205,207,208,210,214,217,221,223,233,235,243,245,255,257,
        260,262,269,271,284,286,291,294,300,303,303,305,315,319,323,326,
        336,339,339,342,344,16,0,15,15,60,60,100,100,122,122,143,143,147,
        147,154,154,157,157,160,160,191,191,199,199,244,244,257,257,263,
        263,316,316,325,325,17,0,8,14,16,59,61,99,101,121,123,142,144,146,
        148,153,155,156,158,159,161,190,192,198,200,243,245,256,258,262,
        264,315,317,324,326,344,4460,0,390,1,0,0,0,2,399,1,0,0,0,4,402,1,
        0,0,0,6,405,1,0,0,0,8,408,1,0,0,0,10,411,1,0,0,0,12,414,1,0,0,0,
        14,1257,1,0,0,0,16,1259,1,0,0,0,18,1276,1,0,0,0,20,1280,1,0,0,0,
        22,1284,1,0,0,0,24,1290,1,0,0,0,26,1300,1,0,0,0,28,1302,1,0,0,0,
        30,1304,1,0,0,0,32,1474,1,0,0,0,34,1476,1,0,0,0,36,1493,1,0,0,0,
        38,1499,1,0,0,0,40,1505,1,0,0,0,42,1517,1,0,0,0,44,1530,1,0,0,0,
        46,1533,1,0,0,0,48,1537,1,0,0,0,50,1616,1,0,0,0,52,1618,1,0,0,0,
        54,1622,1,0,0,0,56,1643,1,0,0,0,58,1645,1,0,0,0,60,1647,1,0,0,0,
        62,1654,1,0,0,0,64,1656,1,0,0,0,66,1664,1,0,0,0,68,1673,1,0,0,0,
        70,1684,1,0,0,0,72,1703,1,0,0,0,74,1706,1,0,0,0,76,1717,1,0,0,0,
        78,1733,1,0,0,0,80,1739,1,0,0,0,82,1741,1,0,0,0,84,1752,1,0,0,0,
        86,1759,1,0,0,0,88,1770,1,0,0,0,90,1787,1,0,0,0,92,1795,1,0,0,0,
        94,1797,1,0,0,0,96,1803,1,0,0,0,98,1862,1,0,0,0,100,1870,1,0,0,0,
        102,1882,1,0,0,0,104,1934,1,0,0,0,106,1937,1,0,0,0,108,1975,1,0,
        0,0,110,1977,1,0,0,0,112,1985,1,0,0,0,114,2018,1,0,0,0,116,2064,
        1,0,0,0,118,2085,1,0,0,0,120,2117,1,0,0,0,122,2129,1,0,0,0,124,2132,
        1,0,0,0,126,2141,1,0,0,0,128,2155,1,0,0,0,130,2174,1,0,0,0,132,2194,
        1,0,0,0,134,2200,1,0,0,0,136,2202,1,0,0,0,138,2207,1,0,0,0,140,2215,
        1,0,0,0,142,2219,1,0,0,0,144,2222,1,0,0,0,146,2225,1,0,0,0,148,2251,
        1,0,0,0,150,2253,1,0,0,0,152,2288,1,0,0,0,154,2329,1,0,0,0,156,2333,
        1,0,0,0,158,2360,1,0,0,0,160,2364,1,0,0,0,162,2379,1,0,0,0,164,2381,
        1,0,0,0,166,2411,1,0,0,0,168,2413,1,0,0,0,170,2420,1,0,0,0,172,2433,
        1,0,0,0,174,2438,1,0,0,0,176,2440,1,0,0,0,178,2455,1,0,0,0,180,2479,
        1,0,0,0,182,2492,1,0,0,0,184,2494,1,0,0,0,186,2496,1,0,0,0,188,2500,
        1,0,0,0,190,2503,1,0,0,0,192,2507,1,0,0,0,194,2539,1,0,0,0,196,2542,
        1,0,0,0,198,2554,1,0,0,0,200,2573,1,0,0,0,202,2599,1,0,0,0,204,2605,
        1,0,0,0,206,2607,1,0,0,0,208,2643,1,0,0,0,210,2645,1,0,0,0,212,2649,
        1,0,0,0,214,2657,1,0,0,0,216,2668,1,0,0,0,218,2672,1,0,0,0,220,2683,
        1,0,0,0,222,2714,1,0,0,0,224,2716,1,0,0,0,226,2746,1,0,0,0,228,2767,
        1,0,0,0,230,2787,1,0,0,0,232,2793,1,0,0,0,234,2797,1,0,0,0,236,2799,
        1,0,0,0,238,2821,1,0,0,0,240,2872,1,0,0,0,242,2874,1,0,0,0,244,2882,
        1,0,0,0,246,2890,1,0,0,0,248,2898,1,0,0,0,250,2906,1,0,0,0,252,2913,
        1,0,0,0,254,2917,1,0,0,0,256,2927,1,0,0,0,258,2935,1,0,0,0,260,2948,
        1,0,0,0,262,2963,1,0,0,0,264,2967,1,0,0,0,266,2969,1,0,0,0,268,2971,
        1,0,0,0,270,2977,1,0,0,0,272,2979,1,0,0,0,274,2999,1,0,0,0,276,3094,
        1,0,0,0,278,3100,1,0,0,0,280,3126,1,0,0,0,282,3371,1,0,0,0,284,3396,
        1,0,0,0,286,3413,1,0,0,0,288,3415,1,0,0,0,290,3417,1,0,0,0,292,3419,
        1,0,0,0,294,3421,1,0,0,0,296,3423,1,0,0,0,298,3428,1,0,0,0,300,3435,
        1,0,0,0,302,3439,1,0,0,0,304,3444,1,0,0,0,306,3450,1,0,0,0,308,3457,
        1,0,0,0,310,3459,1,0,0,0,312,3464,1,0,0,0,314,3497,1,0,0,0,316,3545,
        1,0,0,0,318,3547,1,0,0,0,320,3555,1,0,0,0,322,3568,1,0,0,0,324,3570,
        1,0,0,0,326,3573,1,0,0,0,328,3576,1,0,0,0,330,3584,1,0,0,0,332,3593,
        1,0,0,0,334,3601,1,0,0,0,336,3614,1,0,0,0,338,3616,1,0,0,0,340,3623,
        1,0,0,0,342,3631,1,0,0,0,344,3643,1,0,0,0,346,3648,1,0,0,0,348,3657,
        1,0,0,0,350,3707,1,0,0,0,352,3725,1,0,0,0,354,3734,1,0,0,0,356,3736,
        1,0,0,0,358,3754,1,0,0,0,360,3756,1,0,0,0,362,3764,1,0,0,0,364,3774,
        1,0,0,0,366,3779,1,0,0,0,368,3787,1,0,0,0,370,3792,1,0,0,0,372,3794,
        1,0,0,0,374,3839,1,0,0,0,376,3852,1,0,0,0,378,3857,1,0,0,0,380,3861,
        1,0,0,0,382,3865,1,0,0,0,384,3867,1,0,0,0,386,3869,1,0,0,0,388,3871,
        1,0,0,0,390,394,3,14,7,0,391,393,5,1,0,0,392,391,1,0,0,0,393,396,
        1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,394,
        1,0,0,0,397,398,5,0,0,1,398,1,1,0,0,0,399,400,3,254,127,0,400,401,
        5,0,0,1,401,3,1,0,0,0,402,403,3,250,125,0,403,404,5,0,0,1,404,5,
        1,0,0,0,405,406,3,244,122,0,406,407,5,0,0,1,407,7,1,0,0,0,408,409,
        3,252,126,0,409,410,5,0,0,1,410,9,1,0,0,0,411,412,3,316,158,0,412,
        413,5,0,0,1,413,11,1,0,0,0,414,415,3,328,164,0,415,416,5,0,0,1,416,
        13,1,0,0,0,417,1258,3,48,24,0,418,1258,3,16,8,0,419,421,3,66,33,
        0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,1258,3,98,
        49,0,423,424,5,323,0,0,424,1258,3,100,50,0,425,426,5,323,0,0,426,
        427,3,58,29,0,427,428,3,100,50,0,428,1258,1,0,0,0,429,430,5,262,
        0,0,430,433,5,37,0,0,431,434,3,366,183,0,432,434,3,378,189,0,433,
        431,1,0,0,0,433,432,1,0,0,0,434,1258,1,0,0,0,435,436,5,59,0,0,436,
        440,3,58,29,0,437,438,5,135,0,0,438,439,5,193,0,0,439,441,5,103,
        0,0,440,437,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,450,3,100,
        50,0,443,449,3,46,23,0,444,449,3,44,22,0,445,446,5,340,0,0,446,447,
        7,0,0,0,447,449,3,74,37,0,448,443,1,0,0,0,448,444,1,0,0,0,448,445,
        1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,1258,
        1,0,0,0,452,450,1,0,0,0,453,454,5,11,0,0,454,455,3,58,29,0,455,456,
        3,100,50,0,456,457,5,262,0,0,457,458,7,0,0,0,458,459,3,74,37,0,459,
        1258,1,0,0,0,460,461,5,11,0,0,461,462,3,58,29,0,462,463,3,100,50,
        0,463,464,5,262,0,0,464,465,3,44,22,0,465,1258,1,0,0,0,466,467,5,
        95,0,0,467,470,3,58,29,0,468,469,5,135,0,0,469,471,5,103,0,0,470,
        468,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,474,3,100,50,0,473,
        475,7,1,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,1258,1,0,0,0,476,
        477,5,266,0,0,477,480,3,60,30,0,478,479,7,2,0,0,479,481,3,244,122,
        0,480,478,1,0,0,0,480,481,1,0,0,0,481,486,1,0,0,0,482,484,5,161,
        0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,3,378,
        189,0,486,483,1,0,0,0,486,487,1,0,0,0,487,1258,1,0,0,0,488,493,3,
        34,17,0,489,490,5,2,0,0,490,491,3,332,166,0,491,492,5,3,0,0,492,
        494,1,0,0,0,493,489,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,
        497,3,70,35,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,
        503,3,72,36,0,499,501,5,20,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,
        502,1,0,0,0,502,504,3,48,24,0,503,500,1,0,0,0,503,504,1,0,0,0,504,
        1258,1,0,0,0,505,506,5,59,0,0,506,510,5,285,0,0,507,508,5,135,0,
        0,508,509,5,193,0,0,509,511,5,103,0,0,510,507,1,0,0,0,510,511,1,
        0,0,0,511,512,1,0,0,0,512,513,3,250,125,0,513,514,5,161,0,0,514,
        523,3,250,125,0,515,522,3,70,35,0,516,522,3,240,120,0,517,522,3,
        90,45,0,518,522,3,44,22,0,519,520,5,289,0,0,520,522,3,74,37,0,521,
        515,1,0,0,0,521,516,1,0,0,0,521,517,1,0,0,0,521,518,1,0,0,0,521,
        519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,
        1258,1,0,0,0,525,523,1,0,0,0,526,531,3,36,18,0,527,528,5,2,0,0,528,
        529,3,332,166,0,529,530,5,3,0,0,530,532,1,0,0,0,531,527,1,0,0,0,
        531,532,1,0,0,0,532,534,1,0,0,0,533,535,3,70,35,0,534,533,1,0,0,
        0,534,535,1,0,0,0,535,536,1,0,0,0,536,541,3,72,36,0,537,539,5,20,
        0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,542,3,48,
        24,0,541,538,1,0,0,0,541,542,1,0,0,0,542,1258,1,0,0,0,543,544,5,
        13,0,0,544,545,5,285,0,0,545,547,3,100,50,0,546,548,3,54,27,0,547,
        546,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,55,0,0,550,
        558,5,275,0,0,551,559,3,366,183,0,552,553,5,117,0,0,553,554,5,50,
        0,0,554,559,3,212,106,0,555,556,5,117,0,0,556,557,5,10,0,0,557,559,
        5,50,0,0,558,551,1,0,0,0,558,552,1,0,0,0,558,555,1,0,0,0,558,559,
        1,0,0,0,559,1258,1,0,0,0,560,561,5,13,0,0,561,564,5,286,0,0,562,
        563,7,2,0,0,563,565,3,100,50,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
        566,1,0,0,0,566,567,5,55,0,0,567,569,5,275,0,0,568,570,3,366,183,
        0,569,568,1,0,0,0,569,570,1,0,0,0,570,1258,1,0,0,0,571,572,5,11,
        0,0,572,573,5,285,0,0,573,574,3,100,50,0,574,575,5,8,0,0,575,576,
        7,3,0,0,576,577,3,318,159,0,577,1258,1,0,0,0,578,579,5,11,0,0,579,
        580,5,285,0,0,580,581,3,100,50,0,581,582,5,8,0,0,582,583,7,3,0,0,
        583,584,5,2,0,0,584,585,3,318,159,0,585,586,5,3,0,0,586,1258,1,0,
        0,0,587,588,5,11,0,0,588,589,5,285,0,0,589,590,3,100,50,0,590,591,
        5,236,0,0,591,592,5,49,0,0,592,593,3,244,122,0,593,594,5,301,0,0,
        594,595,3,362,181,0,595,1258,1,0,0,0,596,597,5,11,0,0,597,598,5,
        285,0,0,598,599,3,100,50,0,599,600,5,95,0,0,600,603,7,3,0,0,601,
        602,5,135,0,0,602,604,5,103,0,0,603,601,1,0,0,0,603,604,1,0,0,0,
        604,605,1,0,0,0,605,606,5,2,0,0,606,607,3,242,121,0,607,608,5,3,
        0,0,608,1258,1,0,0,0,609,610,5,11,0,0,610,611,5,285,0,0,611,612,
        3,100,50,0,612,613,5,95,0,0,613,616,7,3,0,0,614,615,5,135,0,0,615,
        617,5,103,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
        619,3,242,121,0,619,1258,1,0,0,0,620,621,5,11,0,0,621,622,7,4,0,
        0,622,623,3,100,50,0,623,624,5,236,0,0,624,625,5,301,0,0,625,626,
        3,244,122,0,626,1258,1,0,0,0,627,628,5,11,0,0,628,629,7,4,0,0,629,
        630,3,100,50,0,630,631,5,262,0,0,631,632,5,289,0,0,632,633,3,74,
        37,0,633,1258,1,0,0,0,634,635,5,11,0,0,635,636,7,4,0,0,636,637,3,
        100,50,0,637,638,5,321,0,0,638,641,5,289,0,0,639,640,5,135,0,0,640,
        642,5,103,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,
        644,3,74,37,0,644,1258,1,0,0,0,645,646,5,11,0,0,646,647,5,285,0,
        0,647,648,3,100,50,0,648,650,7,5,0,0,649,651,5,49,0,0,650,649,1,
        0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,3,244,122,0,653,655,
        3,376,188,0,654,653,1,0,0,0,654,655,1,0,0,0,655,1258,1,0,0,0,656,
        657,5,11,0,0,657,658,5,285,0,0,658,660,3,100,50,0,659,661,3,54,27,
        0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,664,5,39,0,
        0,663,665,5,49,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,
        0,666,667,3,244,122,0,667,669,3,330,165,0,668,670,3,312,156,0,669,
        668,1,0,0,0,669,670,1,0,0,0,670,1258,1,0,0,0,671,672,5,11,0,0,672,
        673,5,285,0,0,673,675,3,100,50,0,674,676,3,54,27,0,675,674,1,0,0,
        0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,239,0,0,678,679,5,50,
        0,0,679,680,5,2,0,0,680,681,3,318,159,0,681,682,5,3,0,0,682,1258,
        1,0,0,0,683,684,5,11,0,0,684,685,5,285,0,0,685,687,3,100,50,0,686,
        688,3,54,27,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,
        690,5,262,0,0,690,691,5,259,0,0,691,695,3,378,189,0,692,693,5,340,
        0,0,693,694,5,260,0,0,694,696,3,74,37,0,695,692,1,0,0,0,695,696,
        1,0,0,0,696,1258,1,0,0,0,697,698,5,11,0,0,698,699,5,285,0,0,699,
        701,3,100,50,0,700,702,3,54,27,0,701,700,1,0,0,0,701,702,1,0,0,0,
        702,703,1,0,0,0,703,704,5,262,0,0,704,705,5,260,0,0,705,706,3,74,
        37,0,706,1258,1,0,0,0,707,708,5,11,0,0,708,709,7,4,0,0,709,710,3,
        100,50,0,710,714,5,8,0,0,711,712,5,135,0,0,712,713,5,193,0,0,713,
        715,5,103,0,0,714,711,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,
        718,3,52,26,0,717,716,1,0,0,0,718,719,1,0,0,0,719,717,1,0,0,0,719,
        720,1,0,0,0,720,1258,1,0,0,0,721,722,5,11,0,0,722,723,5,285,0,0,
        723,724,3,100,50,0,724,725,3,54,27,0,725,726,5,236,0,0,726,727,5,
        301,0,0,727,728,3,54,27,0,728,1258,1,0,0,0,729,730,5,11,0,0,730,
        731,7,4,0,0,731,732,3,100,50,0,732,735,5,95,0,0,733,734,5,135,0,
        0,734,736,5,103,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,737,1,0,
        0,0,737,742,3,54,27,0,738,739,5,4,0,0,739,741,3,54,27,0,740,738,
        1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,746,
        1,0,0,0,744,742,1,0,0,0,745,747,5,225,0,0,746,745,1,0,0,0,746,747,
        1,0,0,0,747,1258,1,0,0,0,748,749,5,11,0,0,749,750,5,285,0,0,750,
        752,3,100,50,0,751,753,3,54,27,0,752,751,1,0,0,0,752,753,1,0,0,0,
        753,754,1,0,0,0,754,755,5,262,0,0,755,756,3,44,22,0,756,1258,1,0,
        0,0,757,758,5,11,0,0,758,759,5,285,0,0,759,760,3,100,50,0,760,761,
        5,232,0,0,761,762,5,214,0,0,762,1258,1,0,0,0,763,764,5,95,0,0,764,
        767,5,285,0,0,765,766,5,135,0,0,766,768,5,103,0,0,767,765,1,0,0,
        0,767,768,1,0,0,0,768,769,1,0,0,0,769,771,3,100,50,0,770,772,5,225,
        0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,1258,1,0,0,0,773,774,5,95,
        0,0,774,777,5,332,0,0,775,776,5,135,0,0,776,778,5,103,0,0,777,775,
        1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,0,779,1258,3,100,50,0,780,
        783,5,59,0,0,781,782,5,203,0,0,782,784,5,239,0,0,783,781,1,0,0,0,
        783,784,1,0,0,0,784,789,1,0,0,0,785,787,5,126,0,0,786,785,1,0,0,
        0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,5,290,0,0,789,786,1,0,
        0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,795,5,332,0,0,792,793,5,
        135,0,0,793,794,5,193,0,0,794,796,5,103,0,0,795,792,1,0,0,0,795,
        796,1,0,0,0,796,797,1,0,0,0,797,799,3,100,50,0,798,800,3,218,109,
        0,799,798,1,0,0,0,799,800,1,0,0,0,800,809,1,0,0,0,801,808,3,46,23,
        0,802,803,5,213,0,0,803,804,5,199,0,0,804,808,3,210,105,0,805,806,
        5,289,0,0,806,808,3,74,37,0,807,801,1,0,0,0,807,802,1,0,0,0,807,
        805,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,
        812,1,0,0,0,811,809,1,0,0,0,812,813,5,20,0,0,813,814,3,48,24,0,814,
        1258,1,0,0,0,815,818,5,59,0,0,816,817,5,203,0,0,817,819,5,239,0,
        0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,822,5,126,
        0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,824,5,290,
        0,0,824,825,5,332,0,0,825,830,3,250,125,0,826,827,5,2,0,0,827,828,
        3,328,164,0,828,829,5,3,0,0,829,831,1,0,0,0,830,826,1,0,0,0,830,
        831,1,0,0,0,831,832,1,0,0,0,832,835,3,70,35,0,833,834,5,202,0,0,
        834,836,3,74,37,0,835,833,1,0,0,0,835,836,1,0,0,0,836,1258,1,0,0,
        0,837,838,5,11,0,0,838,839,5,332,0,0,839,841,3,100,50,0,840,842,
        5,20,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,
        3,48,24,0,844,1258,1,0,0,0,845,848,5,59,0,0,846,847,5,203,0,0,847,
        849,5,239,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,
        852,5,290,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,
        857,5,123,0,0,854,855,5,135,0,0,855,856,5,193,0,0,856,858,5,103,
        0,0,857,854,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,3,100,
        50,0,860,861,5,20,0,0,861,871,3,378,189,0,862,863,5,325,0,0,863,
        868,3,96,48,0,864,865,5,4,0,0,865,867,3,96,48,0,866,864,1,0,0,0,
        867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,872,1,0,0,0,
        870,868,1,0,0,0,871,862,1,0,0,0,871,872,1,0,0,0,872,1258,1,0,0,0,
        873,875,5,95,0,0,874,876,5,290,0,0,875,874,1,0,0,0,875,876,1,0,0,
        0,876,877,1,0,0,0,877,880,5,123,0,0,878,879,5,135,0,0,879,881,5,
        103,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,1258,
        3,100,50,0,883,886,5,81,0,0,884,885,5,203,0,0,885,887,5,239,0,0,
        886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,890,5,329,0,
        0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,893,3,100,
        50,0,892,894,3,316,158,0,893,892,1,0,0,0,893,894,1,0,0,0,894,896,
        1,0,0,0,895,897,3,326,163,0,896,895,1,0,0,0,896,897,1,0,0,0,897,
        1258,1,0,0,0,898,899,5,95,0,0,899,900,5,290,0,0,900,903,5,329,0,
        0,901,902,5,135,0,0,902,904,5,103,0,0,903,901,1,0,0,0,903,904,1,
        0,0,0,904,905,1,0,0,0,905,1258,3,100,50,0,906,908,5,104,0,0,907,
        909,7,6,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,
        1258,3,14,7,0,911,912,5,266,0,0,912,915,5,286,0,0,913,914,7,2,0,
        0,914,916,3,100,50,0,915,913,1,0,0,0,915,916,1,0,0,0,916,921,1,0,
        0,0,917,919,5,161,0,0,918,917,1,0,0,0,918,919,1,0,0,0,919,920,1,
        0,0,0,920,922,3,378,189,0,921,918,1,0,0,0,921,922,1,0,0,0,922,1258,
        1,0,0,0,923,924,5,266,0,0,924,925,5,285,0,0,925,928,5,106,0,0,926,
        927,7,2,0,0,927,929,3,100,50,0,928,926,1,0,0,0,928,929,1,0,0,0,929,
        930,1,0,0,0,930,931,5,161,0,0,931,933,3,378,189,0,932,934,3,54,27,
        0,933,932,1,0,0,0,933,934,1,0,0,0,934,1258,1,0,0,0,935,936,5,266,
        0,0,936,937,5,289,0,0,937,942,3,100,50,0,938,939,5,2,0,0,939,940,
        3,78,39,0,940,941,5,3,0,0,941,943,1,0,0,0,942,938,1,0,0,0,942,943,
        1,0,0,0,943,1258,1,0,0,0,944,945,5,266,0,0,945,946,5,50,0,0,946,
        947,7,2,0,0,947,950,3,100,50,0,948,949,7,2,0,0,949,951,3,244,122,
        0,950,948,1,0,0,0,950,951,1,0,0,0,951,1258,1,0,0,0,952,953,5,266,
        0,0,953,956,5,333,0,0,954,955,7,2,0,0,955,957,3,100,50,0,956,954,
        1,0,0,0,956,957,1,0,0,0,957,962,1,0,0,0,958,960,5,161,0,0,959,958,
        1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,963,3,378,189,0,962,
        959,1,0,0,0,962,963,1,0,0,0,963,1258,1,0,0,0,964,965,5,266,0,0,965,
        966,5,214,0,0,966,968,3,100,50,0,967,969,3,54,27,0,968,967,1,0,0,
        0,968,969,1,0,0,0,969,1258,1,0,0,0,970,972,5,266,0,0,971,973,3,366,
        183,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,977,5,
        124,0,0,975,976,7,2,0,0,976,978,3,100,50,0,977,975,1,0,0,0,977,978,
        1,0,0,0,978,986,1,0,0,0,979,981,5,161,0,0,980,979,1,0,0,0,980,981,
        1,0,0,0,981,984,1,0,0,0,982,985,3,244,122,0,983,985,3,378,189,0,
        984,982,1,0,0,0,984,983,1,0,0,0,985,987,1,0,0,0,986,980,1,0,0,0,
        986,987,1,0,0,0,987,1258,1,0,0,0,988,989,5,266,0,0,989,990,5,59,
        0,0,990,991,5,285,0,0,991,994,3,100,50,0,992,993,5,20,0,0,993,995,
        5,259,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,1258,1,0,0,0,996,997,
        5,266,0,0,997,998,5,62,0,0,998,1258,3,58,29,0,999,1000,5,266,0,0,
        1000,1005,5,38,0,0,1001,1003,5,161,0,0,1002,1001,1,0,0,0,1002,1003,
        1,0,0,0,1003,1004,1,0,0,0,1004,1006,3,378,189,0,1005,1002,1,0,0,
        0,1005,1006,1,0,0,0,1006,1258,1,0,0,0,1007,1008,7,7,0,0,1008,1010,
        5,123,0,0,1009,1011,5,106,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,
        0,1011,1012,1,0,0,0,1012,1258,3,62,31,0,1013,1014,7,7,0,0,1014,1016,
        3,58,29,0,1015,1017,5,106,0,0,1016,1015,1,0,0,0,1016,1017,1,0,0,
        0,1017,1018,1,0,0,0,1018,1019,3,100,50,0,1019,1258,1,0,0,0,1020,
        1022,7,7,0,0,1021,1023,5,285,0,0,1022,1021,1,0,0,0,1022,1023,1,0,
        0,0,1023,1025,1,0,0,0,1024,1026,7,8,0,0,1025,1024,1,0,0,0,1025,1026,
        1,0,0,0,1026,1027,1,0,0,0,1027,1029,3,100,50,0,1028,1030,3,54,27,
        0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,1033,
        3,64,32,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1258,1,0,0,0,
        1034,1036,7,7,0,0,1035,1037,5,227,0,0,1036,1035,1,0,0,0,1036,1037,
        1,0,0,0,1037,1038,1,0,0,0,1038,1258,3,48,24,0,1039,1040,5,51,0,0,
        1040,1041,5,199,0,0,1041,1042,3,58,29,0,1042,1043,3,100,50,0,1043,
        1044,5,152,0,0,1044,1045,3,380,190,0,1045,1258,1,0,0,0,1046,1047,
        5,51,0,0,1047,1048,5,199,0,0,1048,1049,5,285,0,0,1049,1050,3,100,
        50,0,1050,1051,5,152,0,0,1051,1052,3,380,190,0,1052,1258,1,0,0,0,
        1053,1054,5,235,0,0,1054,1055,5,285,0,0,1055,1258,3,100,50,0,1056,
        1057,5,235,0,0,1057,1058,5,123,0,0,1058,1258,3,100,50,0,1059,1067,
        5,235,0,0,1060,1068,3,378,189,0,1061,1063,9,0,0,0,1062,1061,1,0,
        0,0,1063,1066,1,0,0,0,1064,1065,1,0,0,0,1064,1062,1,0,0,0,1065,1068,
        1,0,0,0,1066,1064,1,0,0,0,1067,1060,1,0,0,0,1067,1064,1,0,0,0,1068,
        1258,1,0,0,0,1069,1071,5,33,0,0,1070,1072,5,158,0,0,1071,1070,1,
        0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1074,5,285,0,0,1074,
        1077,3,100,50,0,1075,1076,5,202,0,0,1076,1078,3,74,37,0,1077,1075,
        1,0,0,0,1077,1078,1,0,0,0,1078,1083,1,0,0,0,1079,1081,5,20,0,0,1080,
        1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1084,3,48,
        24,0,1083,1080,1,0,0,0,1083,1084,1,0,0,0,1084,1258,1,0,0,0,1085,
        1086,5,315,0,0,1086,1089,5,285,0,0,1087,1088,5,135,0,0,1088,1090,
        5,103,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,
        1091,1258,3,100,50,0,1092,1093,5,43,0,0,1093,1258,5,33,0,0,1094,
        1095,5,166,0,0,1095,1097,5,70,0,0,1096,1098,5,167,0,0,1097,1096,
        1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,144,0,0,
        1100,1102,3,378,189,0,1101,1103,5,211,0,0,1102,1101,1,0,0,0,1102,
        1103,1,0,0,0,1103,1104,1,0,0,0,1104,1105,5,151,0,0,1105,1106,5,285,
        0,0,1106,1108,3,100,50,0,1107,1109,3,54,27,0,1108,1107,1,0,0,0,1108,
        1109,1,0,0,0,1109,1258,1,0,0,0,1110,1111,5,310,0,0,1111,1112,5,285,
        0,0,1112,1114,3,100,50,0,1113,1115,3,54,27,0,1114,1113,1,0,0,0,1114,
        1115,1,0,0,0,1115,1258,1,0,0,0,1116,1118,5,185,0,0,1117,1116,1,0,
        0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,237,0,0,1120,
        1121,5,285,0,0,1121,1124,3,100,50,0,1122,1123,7,9,0,0,1123,1125,
        5,214,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1258,1,0,0,0,
        1126,1127,7,10,0,0,1127,1131,3,366,183,0,1128,1130,9,0,0,0,1129,
        1128,1,0,0,0,1130,1133,1,0,0,0,1131,1132,1,0,0,0,1131,1129,1,0,0,
        0,1132,1258,1,0,0,0,1133,1131,1,0,0,0,1134,1135,5,262,0,0,1135,1139,
        5,246,0,0,1136,1138,9,0,0,0,1137,1136,1,0,0,0,1138,1141,1,0,0,0,
        1139,1140,1,0,0,0,1139,1137,1,0,0,0,1140,1258,1,0,0,0,1141,1139,
        1,0,0,0,1142,1143,5,262,0,0,1143,1144,5,293,0,0,1144,1145,5,344,
        0,0,1145,1258,3,296,148,0,1146,1147,5,262,0,0,1147,1148,5,293,0,
        0,1148,1149,5,344,0,0,1149,1258,3,26,13,0,1150,1151,5,262,0,0,1151,
        1152,5,293,0,0,1152,1156,5,344,0,0,1153,1155,9,0,0,0,1154,1153,1,
        0,0,0,1155,1158,1,0,0,0,1156,1157,1,0,0,0,1156,1154,1,0,0,0,1157,
        1258,1,0,0,0,1158,1156,1,0,0,0,1159,1160,5,262,0,0,1160,1161,7,11,
        0,0,1161,1258,3,138,69,0,1162,1163,5,262,0,0,1163,1164,7,11,0,0,
        1164,1165,5,2,0,0,1165,1166,3,242,121,0,1166,1167,5,3,0,0,1167,1168,
        5,345,0,0,1168,1169,5,2,0,0,1169,1170,3,48,24,0,1170,1171,5,3,0,
        0,1171,1258,1,0,0,0,1172,1173,5,262,0,0,1173,1174,3,28,14,0,1174,
        1175,5,345,0,0,1175,1176,3,30,15,0,1176,1258,1,0,0,0,1177,1178,5,
        262,0,0,1178,1186,3,28,14,0,1179,1183,5,345,0,0,1180,1182,9,0,0,
        0,1181,1180,1,0,0,0,1182,1185,1,0,0,0,1183,1184,1,0,0,0,1183,1181,
        1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1186,1179,1,0,0,0,1186,
        1187,1,0,0,0,1187,1258,1,0,0,0,1188,1192,5,262,0,0,1189,1191,9,0,
        0,0,1190,1189,1,0,0,0,1191,1194,1,0,0,0,1192,1193,1,0,0,0,1192,1190,
        1,0,0,0,1193,1195,1,0,0,0,1194,1192,1,0,0,0,1195,1196,5,345,0,0,
        1196,1258,3,30,15,0,1197,1201,5,262,0,0,1198,1200,9,0,0,0,1199,1198,
        1,0,0,0,1200,1203,1,0,0,0,1201,1202,1,0,0,0,1201,1199,1,0,0,0,1202,
        1258,1,0,0,0,1203,1201,1,0,0,0,1204,1205,5,240,0,0,1205,1258,3,28,
        14,0,1206,1210,5,240,0,0,1207,1209,9,0,0,0,1208,1207,1,0,0,0,1209,
        1212,1,0,0,0,1210,1211,1,0,0,0,1210,1208,1,0,0,0,1211,1258,1,0,0,
        0,1212,1210,1,0,0,0,1213,1214,5,59,0,0,1214,1218,5,141,0,0,1215,
        1216,5,135,0,0,1216,1217,5,193,0,0,1217,1219,5,103,0,0,1218,1215,
        1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1221,3,366,183,
        0,1221,1223,5,199,0,0,1222,1224,5,285,0,0,1223,1222,1,0,0,0,1223,
        1224,1,0,0,0,1224,1225,1,0,0,0,1225,1228,3,100,50,0,1226,1227,5,
        325,0,0,1227,1229,3,366,183,0,1228,1226,1,0,0,0,1228,1229,1,0,0,
        0,1229,1230,1,0,0,0,1230,1231,5,2,0,0,1231,1232,3,246,123,0,1232,
        1235,5,3,0,0,1233,1234,5,202,0,0,1234,1236,3,74,37,0,1235,1233,1,
        0,0,0,1235,1236,1,0,0,0,1236,1258,1,0,0,0,1237,1238,5,95,0,0,1238,
        1241,5,141,0,0,1239,1240,5,135,0,0,1240,1242,5,103,0,0,1241,1239,
        1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1244,3,366,183,
        0,1244,1246,5,199,0,0,1245,1247,5,285,0,0,1246,1245,1,0,0,0,1246,
        1247,1,0,0,0,1247,1248,1,0,0,0,1248,1249,3,100,50,0,1249,1258,1,
        0,0,0,1250,1254,3,32,16,0,1251,1253,9,0,0,0,1252,1251,1,0,0,0,1253,
        1256,1,0,0,0,1254,1255,1,0,0,0,1254,1252,1,0,0,0,1255,1258,1,0,0,
        0,1256,1254,1,0,0,0,1257,417,1,0,0,0,1257,418,1,0,0,0,1257,420,1,
        0,0,0,1257,423,1,0,0,0,1257,425,1,0,0,0,1257,429,1,0,0,0,1257,435,
        1,0,0,0,1257,453,1,0,0,0,1257,460,1,0,0,0,1257,466,1,0,0,0,1257,
        476,1,0,0,0,1257,488,1,0,0,0,1257,505,1,0,0,0,1257,526,1,0,0,0,1257,
        543,1,0,0,0,1257,560,1,0,0,0,1257,571,1,0,0,0,1257,578,1,0,0,0,1257,
        587,1,0,0,0,1257,596,1,0,0,0,1257,609,1,0,0,0,1257,620,1,0,0,0,1257,
        627,1,0,0,0,1257,634,1,0,0,0,1257,645,1,0,0,0,1257,656,1,0,0,0,1257,
        671,1,0,0,0,1257,683,1,0,0,0,1257,697,1,0,0,0,1257,707,1,0,0,0,1257,
        721,1,0,0,0,1257,729,1,0,0,0,1257,748,1,0,0,0,1257,757,1,0,0,0,1257,
        763,1,0,0,0,1257,773,1,0,0,0,1257,780,1,0,0,0,1257,815,1,0,0,0,1257,
        837,1,0,0,0,1257,845,1,0,0,0,1257,873,1,0,0,0,1257,883,1,0,0,0,1257,
        898,1,0,0,0,1257,906,1,0,0,0,1257,911,1,0,0,0,1257,923,1,0,0,0,1257,
        935,1,0,0,0,1257,944,1,0,0,0,1257,952,1,0,0,0,1257,964,1,0,0,0,1257,
        970,1,0,0,0,1257,988,1,0,0,0,1257,996,1,0,0,0,1257,999,1,0,0,0,1257,
        1007,1,0,0,0,1257,1013,1,0,0,0,1257,1020,1,0,0,0,1257,1034,1,0,0,
        0,1257,1039,1,0,0,0,1257,1046,1,0,0,0,1257,1053,1,0,0,0,1257,1056,
        1,0,0,0,1257,1059,1,0,0,0,1257,1069,1,0,0,0,1257,1085,1,0,0,0,1257,
        1092,1,0,0,0,1257,1094,1,0,0,0,1257,1110,1,0,0,0,1257,1117,1,0,0,
        0,1257,1126,1,0,0,0,1257,1134,1,0,0,0,1257,1142,1,0,0,0,1257,1146,
        1,0,0,0,1257,1150,1,0,0,0,1257,1159,1,0,0,0,1257,1162,1,0,0,0,1257,
        1172,1,0,0,0,1257,1177,1,0,0,0,1257,1188,1,0,0,0,1257,1197,1,0,0,
        0,1257,1204,1,0,0,0,1257,1206,1,0,0,0,1257,1213,1,0,0,0,1257,1237,
        1,0,0,0,1257,1250,1,0,0,0,1258,15,1,0,0,0,1259,1260,5,302,0,0,1260,
        1261,5,137,0,0,1261,1264,3,20,10,0,1262,1263,5,151,0,0,1263,1265,
        3,242,121,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,1267,1,0,0,
        0,1266,1268,3,18,9,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,17,
        1,0,0,0,1269,1270,5,325,0,0,1270,1271,5,2,0,0,1271,1272,3,256,128,
        0,1272,1273,5,3,0,0,1273,1277,1,0,0,0,1274,1275,5,325,0,0,1275,1277,
        3,256,128,0,1276,1269,1,0,0,0,1276,1274,1,0,0,0,1277,19,1,0,0,0,
        1278,1281,3,378,189,0,1279,1281,3,244,122,0,1280,1278,1,0,0,0,1280,
        1279,1,0,0,0,1281,21,1,0,0,0,1282,1285,3,286,143,0,1283,1285,3,244,
        122,0,1284,1282,1,0,0,0,1284,1283,1,0,0,0,1285,1288,1,0,0,0,1286,
        1287,5,20,0,0,1287,1289,3,362,181,0,1288,1286,1,0,0,0,1288,1289,
        1,0,0,0,1289,23,1,0,0,0,1290,1295,3,22,11,0,1291,1292,5,4,0,0,1292,
        1294,3,22,11,0,1293,1291,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,
        0,0,1295,1296,1,0,0,0,1296,25,1,0,0,0,1297,1295,1,0,0,0,1298,1301,
        3,378,189,0,1299,1301,5,167,0,0,1300,1298,1,0,0,0,1300,1299,1,0,
        0,0,1301,27,1,0,0,0,1302,1303,3,370,185,0,1303,29,1,0,0,0,1304,1305,
        3,372,186,0,1305,31,1,0,0,0,1306,1307,5,59,0,0,1307,1475,5,246,0,
        0,1308,1309,5,95,0,0,1309,1475,5,246,0,0,1310,1312,5,127,0,0,1311,
        1313,5,246,0,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1475,1,0,
        0,0,1314,1316,5,243,0,0,1315,1317,5,246,0,0,1316,1315,1,0,0,0,1316,
        1317,1,0,0,0,1317,1475,1,0,0,0,1318,1319,5,266,0,0,1319,1475,5,127,
        0,0,1320,1321,5,266,0,0,1321,1323,5,246,0,0,1322,1324,5,127,0,0,
        1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1475,1,0,0,0,1325,1326,
        5,266,0,0,1326,1475,5,223,0,0,1327,1328,5,266,0,0,1328,1475,5,247,
        0,0,1329,1330,5,266,0,0,1330,1331,5,62,0,0,1331,1475,5,247,0,0,1332,
        1333,5,105,0,0,1333,1475,5,285,0,0,1334,1335,5,138,0,0,1335,1475,
        5,285,0,0,1336,1337,5,266,0,0,1337,1475,5,54,0,0,1338,1339,5,266,
        0,0,1339,1340,5,59,0,0,1340,1475,5,285,0,0,1341,1342,5,266,0,0,1342,
        1475,5,306,0,0,1343,1344,5,266,0,0,1344,1475,5,142,0,0,1345,1346,
        5,266,0,0,1346,1475,5,170,0,0,1347,1348,5,59,0,0,1348,1475,5,141,
        0,0,1349,1350,5,95,0,0,1350,1475,5,141,0,0,1351,1352,5,11,0,0,1352,
        1475,5,141,0,0,1353,1354,5,169,0,0,1354,1475,5,285,0,0,1355,1356,
        5,169,0,0,1356,1475,5,72,0,0,1357,1358,5,319,0,0,1358,1475,5,285,
        0,0,1359,1360,5,319,0,0,1360,1475,5,72,0,0,1361,1362,5,59,0,0,1362,
        1363,5,290,0,0,1363,1475,5,173,0,0,1364,1365,5,95,0,0,1365,1366,
        5,290,0,0,1366,1475,5,173,0,0,1367,1368,5,11,0,0,1368,1369,5,285,
        0,0,1369,1370,3,250,125,0,1370,1371,5,193,0,0,1371,1372,5,45,0,0,
        1372,1475,1,0,0,0,1373,1374,5,11,0,0,1374,1375,5,285,0,0,1375,1376,
        3,250,125,0,1376,1377,5,45,0,0,1377,1378,5,31,0,0,1378,1475,1,0,
        0,0,1379,1380,5,11,0,0,1380,1381,5,285,0,0,1381,1382,3,250,125,0,
        1382,1383,5,193,0,0,1383,1384,5,272,0,0,1384,1475,1,0,0,0,1385,1386,
        5,11,0,0,1386,1387,5,285,0,0,1387,1388,3,250,125,0,1388,1389,5,268,
        0,0,1389,1390,5,31,0,0,1390,1475,1,0,0,0,1391,1392,5,11,0,0,1392,
        1393,5,285,0,0,1393,1394,3,250,125,0,1394,1395,5,193,0,0,1395,1396,
        5,268,0,0,1396,1475,1,0,0,0,1397,1398,5,11,0,0,1398,1399,5,285,0,
        0,1399,1400,3,250,125,0,1400,1401,5,193,0,0,1401,1402,5,276,0,0,
        1402,1403,5,20,0,0,1403,1404,5,89,0,0,1404,1475,1,0,0,0,1405,1406,
        5,11,0,0,1406,1407,5,285,0,0,1407,1408,3,250,125,0,1408,1409,5,262,
        0,0,1409,1410,5,268,0,0,1410,1411,5,168,0,0,1411,1475,1,0,0,0,1412,
        1413,5,11,0,0,1413,1414,5,285,0,0,1414,1415,3,250,125,0,1415,1416,
        5,101,0,0,1416,1417,5,212,0,0,1417,1475,1,0,0,0,1418,1419,5,11,0,
        0,1419,1420,5,285,0,0,1420,1421,3,250,125,0,1421,1422,5,18,0,0,1422,
        1423,5,212,0,0,1423,1475,1,0,0,0,1424,1425,5,11,0,0,1425,1426,5,
        285,0,0,1426,1427,3,250,125,0,1427,1428,5,313,0,0,1428,1429,5,212,
        0,0,1429,1475,1,0,0,0,1430,1431,5,11,0,0,1431,1432,5,285,0,0,1432,
        1433,3,250,125,0,1433,1434,5,303,0,0,1434,1475,1,0,0,0,1435,1436,
        5,11,0,0,1436,1437,5,285,0,0,1437,1439,3,250,125,0,1438,1440,3,54,
        27,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,
        1442,5,53,0,0,1442,1475,1,0,0,0,1443,1444,5,11,0,0,1444,1445,5,285,
        0,0,1445,1447,3,250,125,0,1446,1448,3,54,27,0,1447,1446,1,0,0,0,
        1447,1448,1,0,0,0,1448,1449,1,0,0,0,1449,1450,5,56,0,0,1450,1475,
        1,0,0,0,1451,1452,5,11,0,0,1452,1453,5,285,0,0,1453,1455,3,250,125,
        0,1454,1456,3,54,27,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,
        1,0,0,0,1457,1458,5,262,0,0,1458,1459,5,113,0,0,1459,1475,1,0,0,
        0,1460,1461,5,11,0,0,1461,1462,5,285,0,0,1462,1464,3,250,125,0,1463,
        1465,3,54,27,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,
        0,0,1466,1467,5,239,0,0,1467,1468,5,50,0,0,1468,1475,1,0,0,0,1469,
        1470,5,274,0,0,1470,1475,5,305,0,0,1471,1475,5,52,0,0,1472,1475,
        5,248,0,0,1473,1475,5,88,0,0,1474,1306,1,0,0,0,1474,1308,1,0,0,0,
        1474,1310,1,0,0,0,1474,1314,1,0,0,0,1474,1318,1,0,0,0,1474,1320,
        1,0,0,0,1474,1325,1,0,0,0,1474,1327,1,0,0,0,1474,1329,1,0,0,0,1474,
        1332,1,0,0,0,1474,1334,1,0,0,0,1474,1336,1,0,0,0,1474,1338,1,0,0,
        0,1474,1341,1,0,0,0,1474,1343,1,0,0,0,1474,1345,1,0,0,0,1474,1347,
        1,0,0,0,1474,1349,1,0,0,0,1474,1351,1,0,0,0,1474,1353,1,0,0,0,1474,
        1355,1,0,0,0,1474,1357,1,0,0,0,1474,1359,1,0,0,0,1474,1361,1,0,0,
        0,1474,1364,1,0,0,0,1474,1367,1,0,0,0,1474,1373,1,0,0,0,1474,1379,
        1,0,0,0,1474,1385,1,0,0,0,1474,1391,1,0,0,0,1474,1397,1,0,0,0,1474,
        1405,1,0,0,0,1474,1412,1,0,0,0,1474,1418,1,0,0,0,1474,1424,1,0,0,
        0,1474,1430,1,0,0,0,1474,1435,1,0,0,0,1474,1443,1,0,0,0,1474,1451,
        1,0,0,0,1474,1460,1,0,0,0,1474,1469,1,0,0,0,1474,1471,1,0,0,0,1474,
        1472,1,0,0,0,1474,1473,1,0,0,0,1475,33,1,0,0,0,1476,1478,5,59,0,
        0,1477,1479,5,290,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,
        1,0,0,0,1480,1482,5,107,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,
        1482,1483,1,0,0,0,1483,1487,5,285,0,0,1484,1485,5,135,0,0,1485,1486,
        5,193,0,0,1486,1488,5,103,0,0,1487,1484,1,0,0,0,1487,1488,1,0,0,
        0,1488,1489,1,0,0,0,1489,1490,3,100,50,0,1490,35,1,0,0,0,1491,1492,
        5,59,0,0,1492,1494,5,203,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,
        1494,1495,1,0,0,0,1495,1496,5,239,0,0,1496,1497,5,285,0,0,1497,1498,
        3,100,50,0,1498,37,1,0,0,0,1499,1500,5,44,0,0,1500,1501,5,31,0,0,
        1501,1502,5,2,0,0,1502,1503,3,242,121,0,1503,1504,5,3,0,0,1504,39,
        1,0,0,0,1505,1506,5,45,0,0,1506,1507,5,31,0,0,1507,1511,3,210,105,
        0,1508,1509,5,272,0,0,1509,1510,5,31,0,0,1510,1512,3,214,107,0,1511,
        1508,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1514,5,151,
        0,0,1514,1515,5,375,0,0,1515,1516,5,30,0,0,1516,41,1,0,0,0,1517,
        1518,5,268,0,0,1518,1519,5,31,0,0,1519,1520,3,210,105,0,1520,1523,
        5,199,0,0,1521,1524,3,86,43,0,1522,1524,3,88,44,0,1523,1521,1,0,
        0,0,1523,1522,1,0,0,0,1524,1528,1,0,0,0,1525,1526,5,276,0,0,1526,
        1527,5,20,0,0,1527,1529,5,89,0,0,1528,1525,1,0,0,0,1528,1529,1,0,
        0,0,1529,43,1,0,0,0,1530,1531,5,168,0,0,1531,1532,3,378,189,0,1532,
        45,1,0,0,0,1533,1534,5,51,0,0,1534,1535,3,378,189,0,1535,47,1,0,
        0,0,1536,1538,3,66,33,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,
        1539,1,0,0,0,1539,1540,3,106,53,0,1540,1541,3,102,51,0,1541,49,1,
        0,0,0,1542,1543,5,146,0,0,1543,1545,5,211,0,0,1544,1546,5,285,0,
        0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1554,
        3,100,50,0,1548,1552,3,54,27,0,1549,1550,5,135,0,0,1550,1551,5,193,
        0,0,1551,1553,5,103,0,0,1552,1549,1,0,0,0,1552,1553,1,0,0,0,1553,
        1555,1,0,0,0,1554,1548,1,0,0,0,1554,1555,1,0,0,0,1555,1559,1,0,0,
        0,1556,1557,5,31,0,0,1557,1560,5,186,0,0,1558,1560,3,210,105,0,1559,
        1556,1,0,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1617,1,0,0,
        0,1561,1562,5,146,0,0,1562,1564,5,151,0,0,1563,1565,5,285,0,0,1564,
        1563,1,0,0,0,1564,1565,1,0,0,0,1565,1566,1,0,0,0,1566,1568,3,100,
        50,0,1567,1569,3,54,27,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,
        1573,1,0,0,0,1570,1571,5,135,0,0,1571,1572,5,193,0,0,1572,1574,5,
        103,0,0,1573,1570,1,0,0,0,1573,1574,1,0,0,0,1574,1578,1,0,0,0,1575,
        1576,5,31,0,0,1576,1579,5,186,0,0,1577,1579,3,210,105,0,1578,1575,
        1,0,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1617,1,0,0,0,1580,
        1581,5,146,0,0,1581,1583,5,151,0,0,1582,1584,5,285,0,0,1583,1582,
        1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1586,3,100,50,0,
        1586,1587,5,239,0,0,1587,1588,3,142,71,0,1588,1617,1,0,0,0,1589,
        1590,5,146,0,0,1590,1592,5,211,0,0,1591,1593,5,167,0,0,1592,1591,
        1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1595,5,90,0,0,1595,
        1597,3,378,189,0,1596,1598,3,240,120,0,1597,1596,1,0,0,0,1597,1598,
        1,0,0,0,1598,1600,1,0,0,0,1599,1601,3,90,45,0,1600,1599,1,0,0,0,
        1600,1601,1,0,0,0,1601,1617,1,0,0,0,1602,1603,5,146,0,0,1603,1605,
        5,211,0,0,1604,1606,5,167,0,0,1605,1604,1,0,0,0,1605,1606,1,0,0,
        0,1606,1607,1,0,0,0,1607,1609,5,90,0,0,1608,1610,3,378,189,0,1609,
        1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1614,3,70,
        35,0,1612,1613,5,202,0,0,1613,1615,3,74,37,0,1614,1612,1,0,0,0,1614,
        1615,1,0,0,0,1615,1617,1,0,0,0,1616,1542,1,0,0,0,1616,1561,1,0,0,
        0,1616,1580,1,0,0,0,1616,1589,1,0,0,0,1616,1602,1,0,0,0,1617,51,
        1,0,0,0,1618,1620,3,54,27,0,1619,1621,3,44,22,0,1620,1619,1,0,0,
        0,1620,1621,1,0,0,0,1621,53,1,0,0,0,1622,1623,5,212,0,0,1623,1624,
        5,2,0,0,1624,1629,3,56,28,0,1625,1626,5,4,0,0,1626,1628,3,56,28,
        0,1627,1625,1,0,0,0,1628,1631,1,0,0,0,1629,1627,1,0,0,0,1629,1630,
        1,0,0,0,1630,1632,1,0,0,0,1631,1629,1,0,0,0,1632,1633,5,3,0,0,1633,
        55,1,0,0,0,1634,1637,3,366,183,0,1635,1636,5,345,0,0,1636,1638,3,
        286,143,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,1644,1,0,0,0,
        1639,1640,3,366,183,0,1640,1641,5,345,0,0,1641,1642,5,82,0,0,1642,
        1644,1,0,0,0,1643,1634,1,0,0,0,1643,1639,1,0,0,0,1644,57,1,0,0,0,
        1645,1646,7,12,0,0,1646,59,1,0,0,0,1647,1648,7,13,0,0,1648,61,1,
        0,0,0,1649,1655,3,100,50,0,1650,1655,3,378,189,0,1651,1655,3,288,
        144,0,1652,1655,3,290,145,0,1653,1655,3,292,146,0,1654,1649,1,0,
        0,0,1654,1650,1,0,0,0,1654,1651,1,0,0,0,1654,1652,1,0,0,0,1654,1653,
        1,0,0,0,1655,63,1,0,0,0,1656,1661,3,366,183,0,1657,1658,5,5,0,0,
        1658,1660,3,366,183,0,1659,1657,1,0,0,0,1660,1663,1,0,0,0,1661,1659,
        1,0,0,0,1661,1662,1,0,0,0,1662,65,1,0,0,0,1663,1661,1,0,0,0,1664,
        1665,5,340,0,0,1665,1670,3,68,34,0,1666,1667,5,4,0,0,1667,1669,3,
        68,34,0,1668,1666,1,0,0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1670,
        1671,1,0,0,0,1671,67,1,0,0,0,1672,1670,1,0,0,0,1673,1675,3,362,181,
        0,1674,1676,3,210,105,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,
        1678,1,0,0,0,1677,1679,5,20,0,0,1678,1677,1,0,0,0,1678,1679,1,0,
        0,0,1679,1680,1,0,0,0,1680,1681,5,2,0,0,1681,1682,3,48,24,0,1682,
        1683,5,3,0,0,1683,69,1,0,0,0,1684,1685,5,325,0,0,1685,1686,3,244,
        122,0,1686,71,1,0,0,0,1687,1688,5,202,0,0,1688,1702,3,82,41,0,1689,
        1690,5,213,0,0,1690,1691,5,31,0,0,1691,1702,3,258,129,0,1692,1702,
        3,42,21,0,1693,1702,3,38,19,0,1694,1702,3,40,20,0,1695,1702,3,240,
        120,0,1696,1702,3,90,45,0,1697,1702,3,44,22,0,1698,1702,3,46,23,
        0,1699,1700,5,289,0,0,1700,1702,3,74,37,0,1701,1687,1,0,0,0,1701,
        1689,1,0,0,0,1701,1692,1,0,0,0,1701,1693,1,0,0,0,1701,1694,1,0,0,
        0,1701,1695,1,0,0,0,1701,1696,1,0,0,0,1701,1697,1,0,0,0,1701,1698,
        1,0,0,0,1701,1699,1,0,0,0,1702,1705,1,0,0,0,1703,1701,1,0,0,0,1703,
        1704,1,0,0,0,1704,73,1,0,0,0,1705,1703,1,0,0,0,1706,1707,5,2,0,0,
        1707,1712,3,76,38,0,1708,1709,5,4,0,0,1709,1711,3,76,38,0,1710,1708,
        1,0,0,0,1711,1714,1,0,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,
        1715,1,0,0,0,1714,1712,1,0,0,0,1715,1716,5,3,0,0,1716,75,1,0,0,0,
        1717,1722,3,78,39,0,1718,1720,5,345,0,0,1719,1718,1,0,0,0,1719,1720,
        1,0,0,0,1720,1721,1,0,0,0,1721,1723,3,80,40,0,1722,1719,1,0,0,0,
        1722,1723,1,0,0,0,1723,77,1,0,0,0,1724,1729,3,366,183,0,1725,1726,
        5,5,0,0,1726,1728,3,366,183,0,1727,1725,1,0,0,0,1728,1731,1,0,0,
        0,1729,1727,1,0,0,0,1729,1730,1,0,0,0,1730,1734,1,0,0,0,1731,1729,
        1,0,0,0,1732,1734,3,378,189,0,1733,1724,1,0,0,0,1733,1732,1,0,0,
        0,1734,79,1,0,0,0,1735,1740,5,375,0,0,1736,1740,5,377,0,0,1737,1740,
        3,294,147,0,1738,1740,3,378,189,0,1739,1735,1,0,0,0,1739,1736,1,
        0,0,0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,1740,81,1,0,0,0,1741,1742,
        5,2,0,0,1742,1747,3,84,42,0,1743,1744,5,4,0,0,1744,1746,3,84,42,
        0,1745,1743,1,0,0,0,1746,1749,1,0,0,0,1747,1745,1,0,0,0,1747,1748,
        1,0,0,0,1748,1750,1,0,0,0,1749,1747,1,0,0,0,1750,1751,5,3,0,0,1751,
        83,1,0,0,0,1752,1757,3,78,39,0,1753,1755,5,345,0,0,1754,1753,1,0,
        0,0,1754,1755,1,0,0,0,1755,1756,1,0,0,0,1756,1758,3,266,133,0,1757,
        1754,1,0,0,0,1757,1758,1,0,0,0,1758,85,1,0,0,0,1759,1760,5,2,0,0,
        1760,1765,3,286,143,0,1761,1762,5,4,0,0,1762,1764,3,286,143,0,1763,
        1761,1,0,0,0,1764,1767,1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,
        0,1766,1768,1,0,0,0,1767,1765,1,0,0,0,1768,1769,5,3,0,0,1769,87,
        1,0,0,0,1770,1771,5,2,0,0,1771,1776,3,86,43,0,1772,1773,5,4,0,0,
        1773,1775,3,86,43,0,1774,1772,1,0,0,0,1775,1778,1,0,0,0,1776,1774,
        1,0,0,0,1776,1777,1,0,0,0,1777,1779,1,0,0,0,1778,1776,1,0,0,0,1779,
        1780,5,3,0,0,1780,89,1,0,0,0,1781,1782,5,276,0,0,1782,1783,5,20,
        0,0,1783,1788,3,92,46,0,1784,1785,5,276,0,0,1785,1786,5,31,0,0,1786,
        1788,3,94,47,0,1787,1781,1,0,0,0,1787,1784,1,0,0,0,1788,91,1,0,0,
        0,1789,1790,5,145,0,0,1790,1791,3,378,189,0,1791,1792,5,207,0,0,
        1792,1793,3,378,189,0,1793,1796,1,0,0,0,1794,1796,3,366,183,0,1795,
        1789,1,0,0,0,1795,1794,1,0,0,0,1796,93,1,0,0,0,1797,1801,3,378,189,
        0,1798,1799,5,340,0,0,1799,1800,5,260,0,0,1800,1802,3,74,37,0,1801,
        1798,1,0,0,0,1801,1802,1,0,0,0,1802,95,1,0,0,0,1803,1804,3,366,183,
        0,1804,1805,3,378,189,0,1805,97,1,0,0,0,1806,1807,3,50,25,0,1807,
        1808,3,48,24,0,1808,1863,1,0,0,0,1809,1811,3,150,75,0,1810,1812,
        3,104,52,0,1811,1810,1,0,0,0,1812,1813,1,0,0,0,1813,1811,1,0,0,0,
        1813,1814,1,0,0,0,1814,1863,1,0,0,0,1815,1816,5,84,0,0,1816,1817,
        5,121,0,0,1817,1818,3,100,50,0,1818,1820,3,238,119,0,1819,1821,3,
        142,71,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1863,1,0,0,0,1822,
        1823,5,322,0,0,1823,1824,3,100,50,0,1824,1825,3,238,119,0,1825,1827,
        3,122,61,0,1826,1828,3,142,71,0,1827,1826,1,0,0,0,1827,1828,1,0,
        0,0,1828,1863,1,0,0,0,1829,1830,5,176,0,0,1830,1831,5,151,0,0,1831,
        1832,3,100,50,0,1832,1833,3,238,119,0,1833,1839,5,325,0,0,1834,1840,
        3,100,50,0,1835,1836,5,2,0,0,1836,1837,3,48,24,0,1837,1838,5,3,0,
        0,1838,1840,1,0,0,0,1839,1834,1,0,0,0,1839,1835,1,0,0,0,1840,1841,
        1,0,0,0,1841,1842,3,238,119,0,1842,1843,5,199,0,0,1843,1847,3,274,
        137,0,1844,1846,3,124,62,0,1845,1844,1,0,0,0,1846,1849,1,0,0,0,1847,
        1845,1,0,0,0,1847,1848,1,0,0,0,1848,1853,1,0,0,0,1849,1847,1,0,0,
        0,1850,1852,3,126,63,0,1851,1850,1,0,0,0,1852,1855,1,0,0,0,1853,
        1851,1,0,0,0,1853,1854,1,0,0,0,1854,1859,1,0,0,0,1855,1853,1,0,0,
        0,1856,1858,3,128,64,0,1857,1856,1,0,0,0,1858,1861,1,0,0,0,1859,
        1857,1,0,0,0,1859,1860,1,0,0,0,1860,1863,1,0,0,0,1861,1859,1,0,0,
        0,1862,1806,1,0,0,0,1862,1809,1,0,0,0,1862,1815,1,0,0,0,1862,1822,
        1,0,0,0,1862,1829,1,0,0,0,1863,99,1,0,0,0,1864,1865,5,134,0,0,1865,
        1866,5,2,0,0,1866,1867,3,266,133,0,1867,1868,5,3,0,0,1868,1871,1,
        0,0,0,1869,1871,3,244,122,0,1870,1864,1,0,0,0,1870,1869,1,0,0,0,
        1871,101,1,0,0,0,1872,1873,5,204,0,0,1873,1874,5,31,0,0,1874,1879,
        3,110,55,0,1875,1876,5,4,0,0,1876,1878,3,110,55,0,1877,1875,1,0,
        0,0,1878,1881,1,0,0,0,1879,1877,1,0,0,0,1879,1880,1,0,0,0,1880,1883,
        1,0,0,0,1881,1879,1,0,0,0,1882,1872,1,0,0,0,1882,1883,1,0,0,0,1883,
        1894,1,0,0,0,1884,1885,5,44,0,0,1885,1886,5,31,0,0,1886,1891,3,266,
        133,0,1887,1888,5,4,0,0,1888,1890,3,266,133,0,1889,1887,1,0,0,0,
        1890,1893,1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1895,
        1,0,0,0,1893,1891,1,0,0,0,1894,1884,1,0,0,0,1894,1895,1,0,0,0,1895,
        1906,1,0,0,0,1896,1897,5,92,0,0,1897,1898,5,31,0,0,1898,1903,3,266,
        133,0,1899,1900,5,4,0,0,1900,1902,3,266,133,0,1901,1899,1,0,0,0,
        1902,1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,1907,
        1,0,0,0,1905,1903,1,0,0,0,1906,1896,1,0,0,0,1906,1907,1,0,0,0,1907,
        1918,1,0,0,0,1908,1909,5,271,0,0,1909,1910,5,31,0,0,1910,1915,3,
        110,55,0,1911,1912,5,4,0,0,1912,1914,3,110,55,0,1913,1911,1,0,0,
        0,1914,1917,1,0,0,0,1915,1913,1,0,0,0,1915,1916,1,0,0,0,1916,1919,
        1,0,0,0,1917,1915,1,0,0,0,1918,1908,1,0,0,0,1918,1919,1,0,0,0,1919,
        1921,1,0,0,0,1920,1922,3,346,173,0,1921,1920,1,0,0,0,1921,1922,1,
        0,0,0,1922,1928,1,0,0,0,1923,1926,5,163,0,0,1924,1927,5,10,0,0,1925,
        1927,3,266,133,0,1926,1924,1,0,0,0,1926,1925,1,0,0,0,1927,1929,1,
        0,0,0,1928,1923,1,0,0,0,1928,1929,1,0,0,0,1929,1932,1,0,0,0,1930,
        1931,5,198,0,0,1931,1933,3,266,133,0,1932,1930,1,0,0,0,1932,1933,
        1,0,0,0,1933,103,1,0,0,0,1934,1935,3,50,25,0,1935,1936,3,114,57,
        0,1936,105,1,0,0,0,1937,1938,6,53,-1,0,1938,1939,3,108,54,0,1939,
        1963,1,0,0,0,1940,1941,10,3,0,0,1941,1942,4,53,1,0,1942,1944,7,14,
        0,0,1943,1945,3,194,97,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,
        1946,1,0,0,0,1946,1962,3,106,53,4,1947,1948,10,2,0,0,1948,1949,4,
        53,3,0,1949,1951,5,147,0,0,1950,1952,3,194,97,0,1951,1950,1,0,0,
        0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1962,3,106,53,3,1954,
        1955,10,1,0,0,1955,1956,4,53,5,0,1956,1958,7,15,0,0,1957,1959,3,
        194,97,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1960,1,0,0,0,1960,
        1962,3,106,53,2,1961,1940,1,0,0,0,1961,1947,1,0,0,0,1961,1954,1,
        0,0,0,1962,1965,1,0,0,0,1963,1961,1,0,0,0,1963,1964,1,0,0,0,1964,
        107,1,0,0,0,1965,1963,1,0,0,0,1966,1976,3,116,58,0,1967,1976,3,112,
        56,0,1968,1969,5,285,0,0,1969,1976,3,100,50,0,1970,1976,3,224,112,
        0,1971,1972,5,2,0,0,1972,1973,3,48,24,0,1973,1974,5,3,0,0,1974,1976,
        1,0,0,0,1975,1966,1,0,0,0,1975,1967,1,0,0,0,1975,1968,1,0,0,0,1975,
        1970,1,0,0,0,1975,1971,1,0,0,0,1976,109,1,0,0,0,1977,1979,3,266,
        133,0,1978,1980,7,16,0,0,1979,1978,1,0,0,0,1979,1980,1,0,0,0,1980,
        1983,1,0,0,0,1981,1982,5,195,0,0,1982,1984,7,17,0,0,1983,1981,1,
        0,0,0,1983,1984,1,0,0,0,1984,111,1,0,0,0,1985,1987,3,150,75,0,1986,
        1988,3,114,57,0,1987,1986,1,0,0,0,1988,1989,1,0,0,0,1989,1987,1,
        0,0,0,1989,1990,1,0,0,0,1990,113,1,0,0,0,1991,1993,3,118,59,0,1992,
        1994,3,142,71,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,1995,1,
        0,0,0,1995,1996,3,102,51,0,1996,2019,1,0,0,0,1997,2001,3,120,60,
        0,1998,2000,3,192,96,0,1999,1998,1,0,0,0,2000,2003,1,0,0,0,2001,
        1999,1,0,0,0,2001,2002,1,0,0,0,2002,2005,1,0,0,0,2003,2001,1,0,0,
        0,2004,2006,3,142,71,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,
        2008,1,0,0,0,2007,2009,3,154,77,0,2008,2007,1,0,0,0,2008,2009,1,
        0,0,0,2009,2011,1,0,0,0,2010,2012,3,144,72,0,2011,2010,1,0,0,0,2011,
        2012,1,0,0,0,2012,2014,1,0,0,0,2013,2015,3,346,173,0,2014,2013,1,
        0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,3,102,51,0,2017,
        2019,1,0,0,0,2018,1991,1,0,0,0,2018,1997,1,0,0,0,2019,115,1,0,0,
        0,2020,2022,3,118,59,0,2021,2023,3,150,75,0,2022,2021,1,0,0,0,2022,
        2023,1,0,0,0,2023,2027,1,0,0,0,2024,2026,3,192,96,0,2025,2024,1,
        0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,
        2031,1,0,0,0,2029,2027,1,0,0,0,2030,2032,3,142,71,0,2031,2030,1,
        0,0,0,2031,2032,1,0,0,0,2032,2034,1,0,0,0,2033,2035,3,154,77,0,2034,
        2033,1,0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2038,3,144,
        72,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,
        2041,3,346,173,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2065,1,
        0,0,0,2042,2044,3,120,60,0,2043,2045,3,150,75,0,2044,2043,1,0,0,
        0,2044,2045,1,0,0,0,2045,2049,1,0,0,0,2046,2048,3,192,96,0,2047,
        2046,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2049,2050,1,0,0,
        0,2050,2053,1,0,0,0,2051,2049,1,0,0,0,2052,2054,3,142,71,0,2053,
        2052,1,0,0,0,2053,2054,1,0,0,0,2054,2056,1,0,0,0,2055,2057,3,154,
        77,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2059,1,0,0,0,2058,
        2060,3,144,72,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,
        0,0,0,2061,2063,3,346,173,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,
        2063,2065,1,0,0,0,2064,2020,1,0,0,0,2064,2042,1,0,0,0,2065,117,1,
        0,0,0,2066,2067,5,256,0,0,2067,2068,5,307,0,0,2068,2070,5,2,0,0,
        2069,2071,3,194,97,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,
        1,0,0,0,2072,2073,3,272,136,0,2073,2074,5,3,0,0,2074,2086,1,0,0,
        0,2075,2077,5,174,0,0,2076,2078,3,194,97,0,2077,2076,1,0,0,0,2077,
        2078,1,0,0,0,2078,2079,1,0,0,0,2079,2086,3,272,136,0,2080,2082,5,
        233,0,0,2081,2083,3,194,97,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,
        2083,2084,1,0,0,0,2084,2086,3,272,136,0,2085,2066,1,0,0,0,2085,2075,
        1,0,0,0,2085,2080,1,0,0,0,2086,2088,1,0,0,0,2087,2089,3,240,120,
        0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2092,1,0,0,0,2090,2091,
        5,231,0,0,2091,2093,3,378,189,0,2092,2090,1,0,0,0,2092,2093,1,0,
        0,0,2093,2094,1,0,0,0,2094,2095,5,325,0,0,2095,2108,3,378,189,0,
        2096,2106,5,20,0,0,2097,2107,3,212,106,0,2098,2107,3,328,164,0,2099,
        2102,5,2,0,0,2100,2103,3,212,106,0,2101,2103,3,328,164,0,2102,2100,
        1,0,0,0,2102,2101,1,0,0,0,2103,2104,1,0,0,0,2104,2105,5,3,0,0,2105,
        2107,1,0,0,0,2106,2097,1,0,0,0,2106,2098,1,0,0,0,2106,2099,1,0,0,
        0,2107,2109,1,0,0,0,2108,2096,1,0,0,0,2108,2109,1,0,0,0,2109,2111,
        1,0,0,0,2110,2112,3,240,120,0,2111,2110,1,0,0,0,2111,2112,1,0,0,
        0,2112,2115,1,0,0,0,2113,2114,5,230,0,0,2114,2116,3,378,189,0,2115,
        2113,1,0,0,0,2115,2116,1,0,0,0,2116,119,1,0,0,0,2117,2121,5,256,
        0,0,2118,2120,3,146,73,0,2119,2118,1,0,0,0,2120,2123,1,0,0,0,2121,
        2119,1,0,0,0,2121,2122,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,
        0,2124,2126,3,194,97,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,
        2127,1,0,0,0,2127,2128,3,256,128,0,2128,121,1,0,0,0,2129,2130,5,
        262,0,0,2130,2131,3,138,69,0,2131,123,1,0,0,0,2132,2133,5,337,0,
        0,2133,2136,5,175,0,0,2134,2135,5,14,0,0,2135,2137,3,274,137,0,2136,
        2134,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2139,5,292,
        0,0,2139,2140,3,130,65,0,2140,125,1,0,0,0,2141,2142,5,337,0,0,2142,
        2143,5,193,0,0,2143,2146,5,175,0,0,2144,2145,5,31,0,0,2145,2147,
        5,288,0,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2150,1,0,0,0,
        2148,2149,5,14,0,0,2149,2151,3,274,137,0,2150,2148,1,0,0,0,2150,
        2151,1,0,0,0,2151,2152,1,0,0,0,2152,2153,5,292,0,0,2153,2154,3,132,
        66,0,2154,127,1,0,0,0,2155,2156,5,337,0,0,2156,2157,5,193,0,0,2157,
        2158,5,175,0,0,2158,2159,5,31,0,0,2159,2162,5,273,0,0,2160,2161,
        5,14,0,0,2161,2163,3,274,137,0,2162,2160,1,0,0,0,2162,2163,1,0,0,
        0,2163,2164,1,0,0,0,2164,2165,5,292,0,0,2165,2166,3,134,67,0,2166,
        129,1,0,0,0,2167,2175,5,84,0,0,2168,2169,5,322,0,0,2169,2170,5,262,
        0,0,2170,2175,5,355,0,0,2171,2172,5,322,0,0,2172,2173,5,262,0,0,
        2173,2175,3,138,69,0,2174,2167,1,0,0,0,2174,2168,1,0,0,0,2174,2171,
        1,0,0,0,2175,131,1,0,0,0,2176,2177,5,146,0,0,2177,2195,5,355,0,0,
        2178,2179,5,146,0,0,2179,2180,5,2,0,0,2180,2181,3,242,121,0,2181,
        2182,5,3,0,0,2182,2183,5,326,0,0,2183,2184,5,2,0,0,2184,2189,3,266,
        133,0,2185,2186,5,4,0,0,2186,2188,3,266,133,0,2187,2185,1,0,0,0,
        2188,2191,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2192,
        1,0,0,0,2191,2189,1,0,0,0,2192,2193,5,3,0,0,2193,2195,1,0,0,0,2194,
        2176,1,0,0,0,2194,2178,1,0,0,0,2195,133,1,0,0,0,2196,2201,5,84,0,
        0,2197,2198,5,322,0,0,2198,2199,5,262,0,0,2199,2201,3,138,69,0,2200,
        2196,1,0,0,0,2200,2197,1,0,0,0,2201,135,1,0,0,0,2202,2203,5,100,
        0,0,2203,2204,5,2,0,0,2204,2205,3,242,121,0,2205,2206,5,3,0,0,2206,
        137,1,0,0,0,2207,2212,3,140,70,0,2208,2209,5,4,0,0,2209,2211,3,140,
        70,0,2210,2208,1,0,0,0,2211,2214,1,0,0,0,2212,2210,1,0,0,0,2212,
        2213,1,0,0,0,2213,139,1,0,0,0,2214,2212,1,0,0,0,2215,2216,3,244,
        122,0,2216,2217,5,345,0,0,2217,2218,3,266,133,0,2218,141,1,0,0,0,
        2219,2220,5,338,0,0,2220,2221,3,274,137,0,2221,143,1,0,0,0,2222,
        2223,5,130,0,0,2223,2224,3,274,137,0,2224,145,1,0,0,0,2225,2226,
        5,367,0,0,2226,2233,3,148,74,0,2227,2229,5,4,0,0,2228,2227,1,0,0,
        0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2232,3,148,74,0,2231,
        2228,1,0,0,0,2232,2235,1,0,0,0,2233,2231,1,0,0,0,2233,2234,1,0,0,
        0,2234,2236,1,0,0,0,2235,2233,1,0,0,0,2236,2237,5,368,0,0,2237,147,
        1,0,0,0,2238,2252,3,366,183,0,2239,2240,3,366,183,0,2240,2241,5,
        2,0,0,2241,2246,3,282,141,0,2242,2243,5,4,0,0,2243,2245,3,282,141,
        0,2244,2242,1,0,0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,
        1,0,0,0,2247,2249,1,0,0,0,2248,2246,1,0,0,0,2249,2250,5,3,0,0,2250,
        2252,1,0,0,0,2251,2238,1,0,0,0,2251,2239,1,0,0,0,2252,149,1,0,0,
        0,2253,2254,5,121,0,0,2254,2259,3,196,98,0,2255,2256,5,4,0,0,2256,
        2258,3,196,98,0,2257,2255,1,0,0,0,2258,2261,1,0,0,0,2259,2257,1,
        0,0,0,2259,2260,1,0,0,0,2260,2265,1,0,0,0,2261,2259,1,0,0,0,2262,
        2264,3,192,96,0,2263,2262,1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,
        0,0,0,2265,2266,1,0,0,0,2266,2269,1,0,0,0,2267,2265,1,0,0,0,2268,
        2270,3,164,82,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2272,1,
        0,0,0,2271,2273,3,170,85,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,
        151,1,0,0,0,2274,2276,5,117,0,0,2275,2274,1,0,0,0,2275,2276,1,0,
        0,0,2276,2277,1,0,0,0,2277,2278,7,18,0,0,2278,2279,5,20,0,0,2279,
        2280,5,197,0,0,2280,2289,3,382,191,0,2281,2283,5,117,0,0,2282,2281,
        1,0,0,0,2282,2283,1,0,0,0,2283,2284,1,0,0,0,2284,2285,7,19,0,0,2285,
        2286,5,20,0,0,2286,2287,5,197,0,0,2287,2289,3,278,139,0,2288,2275,
        1,0,0,0,2288,2282,1,0,0,0,2289,153,1,0,0,0,2290,2291,5,128,0,0,2291,
        2292,5,31,0,0,2292,2297,3,156,78,0,2293,2294,5,4,0,0,2294,2296,3,
        156,78,0,2295,2293,1,0,0,0,2296,2299,1,0,0,0,2297,2295,1,0,0,0,2297,
        2298,1,0,0,0,2298,2330,1,0,0,0,2299,2297,1,0,0,0,2300,2301,5,128,
        0,0,2301,2302,5,31,0,0,2302,2307,3,266,133,0,2303,2304,5,4,0,0,2304,
        2306,3,266,133,0,2305,2303,1,0,0,0,2306,2309,1,0,0,0,2307,2305,1,
        0,0,0,2307,2308,1,0,0,0,2308,2327,1,0,0,0,2309,2307,1,0,0,0,2310,
        2311,5,340,0,0,2311,2328,5,249,0,0,2312,2313,5,340,0,0,2313,2328,
        5,61,0,0,2314,2315,5,129,0,0,2315,2316,5,264,0,0,2316,2317,5,2,0,
        0,2317,2322,3,162,81,0,2318,2319,5,4,0,0,2319,2321,3,162,81,0,2320,
        2318,1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,
        0,2323,2325,1,0,0,0,2324,2322,1,0,0,0,2325,2326,5,3,0,0,2326,2328,
        1,0,0,0,2327,2310,1,0,0,0,2327,2312,1,0,0,0,2327,2314,1,0,0,0,2327,
        2328,1,0,0,0,2328,2330,1,0,0,0,2329,2290,1,0,0,0,2329,2300,1,0,0,
        0,2330,155,1,0,0,0,2331,2334,3,158,79,0,2332,2334,3,266,133,0,2333,
        2331,1,0,0,0,2333,2332,1,0,0,0,2334,157,1,0,0,0,2335,2336,7,20,0,
        0,2336,2337,5,2,0,0,2337,2342,3,162,81,0,2338,2339,5,4,0,0,2339,
        2341,3,162,81,0,2340,2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,
        0,0,0,2342,2343,1,0,0,0,2343,2345,1,0,0,0,2344,2342,1,0,0,0,2345,
        2346,5,3,0,0,2346,2361,1,0,0,0,2347,2348,5,129,0,0,2348,2349,5,264,
        0,0,2349,2350,5,2,0,0,2350,2355,3,160,80,0,2351,2352,5,4,0,0,2352,
        2354,3,160,80,0,2353,2351,1,0,0,0,2354,2357,1,0,0,0,2355,2353,1,
        0,0,0,2355,2356,1,0,0,0,2356,2358,1,0,0,0,2357,2355,1,0,0,0,2358,
        2359,5,3,0,0,2359,2361,1,0,0,0,2360,2335,1,0,0,0,2360,2347,1,0,0,
        0,2361,159,1,0,0,0,2362,2365,3,158,79,0,2363,2365,3,162,81,0,2364,
        2362,1,0,0,0,2364,2363,1,0,0,0,2365,161,1,0,0,0,2366,2375,5,2,0,
        0,2367,2372,3,266,133,0,2368,2369,5,4,0,0,2369,2371,3,266,133,0,
        2370,2368,1,0,0,0,2371,2374,1,0,0,0,2372,2370,1,0,0,0,2372,2373,
        1,0,0,0,2373,2376,1,0,0,0,2374,2372,1,0,0,0,2375,2367,1,0,0,0,2375,
        2376,1,0,0,0,2376,2377,1,0,0,0,2377,2380,5,3,0,0,2378,2380,3,266,
        133,0,2379,2366,1,0,0,0,2379,2378,1,0,0,0,2380,163,1,0,0,0,2381,
        2382,5,218,0,0,2382,2383,5,2,0,0,2383,2384,3,256,128,0,2384,2385,
        5,117,0,0,2385,2386,3,166,83,0,2386,2387,5,139,0,0,2387,2388,5,2,
        0,0,2388,2393,3,168,84,0,2389,2390,5,4,0,0,2390,2392,3,168,84,0,
        2391,2389,1,0,0,0,2392,2395,1,0,0,0,2393,2391,1,0,0,0,2393,2394,
        1,0,0,0,2394,2396,1,0,0,0,2395,2393,1,0,0,0,2396,2397,5,3,0,0,2397,
        2398,5,3,0,0,2398,165,1,0,0,0,2399,2412,3,366,183,0,2400,2401,5,
        2,0,0,2401,2406,3,366,183,0,2402,2403,5,4,0,0,2403,2405,3,366,183,
        0,2404,2402,1,0,0,0,2405,2408,1,0,0,0,2406,2404,1,0,0,0,2406,2407,
        1,0,0,0,2407,2409,1,0,0,0,2408,2406,1,0,0,0,2409,2410,5,3,0,0,2410,
        2412,1,0,0,0,2411,2399,1,0,0,0,2411,2400,1,0,0,0,2412,167,1,0,0,
        0,2413,2418,3,266,133,0,2414,2416,5,20,0,0,2415,2414,1,0,0,0,2415,
        2416,1,0,0,0,2416,2417,1,0,0,0,2417,2419,3,366,183,0,2418,2415,1,
        0,0,0,2418,2419,1,0,0,0,2419,169,1,0,0,0,2420,2422,5,320,0,0,2421,
        2423,3,172,86,0,2422,2421,1,0,0,0,2422,2423,1,0,0,0,2423,2424,1,
        0,0,0,2424,2425,5,2,0,0,2425,2426,3,174,87,0,2426,2431,5,3,0,0,2427,
        2429,5,20,0,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,0,
        0,0,2430,2432,3,366,183,0,2431,2428,1,0,0,0,2431,2432,1,0,0,0,2432,
        171,1,0,0,0,2433,2434,7,21,0,0,2434,2435,5,195,0,0,2435,173,1,0,
        0,0,2436,2439,3,176,88,0,2437,2439,3,178,89,0,2438,2436,1,0,0,0,
        2438,2437,1,0,0,0,2439,175,1,0,0,0,2440,2441,3,182,91,0,2441,2442,
        5,117,0,0,2442,2443,3,184,92,0,2443,2444,5,139,0,0,2444,2445,5,2,
        0,0,2445,2450,3,186,93,0,2446,2447,5,4,0,0,2447,2449,3,186,93,0,
        2448,2446,1,0,0,0,2449,2452,1,0,0,0,2450,2448,1,0,0,0,2450,2451,
        1,0,0,0,2451,2453,1,0,0,0,2452,2450,1,0,0,0,2453,2454,5,3,0,0,2454,
        177,1,0,0,0,2455,2456,5,2,0,0,2456,2461,3,182,91,0,2457,2458,5,4,
        0,0,2458,2460,3,182,91,0,2459,2457,1,0,0,0,2460,2463,1,0,0,0,2461,
        2459,1,0,0,0,2461,2462,1,0,0,0,2462,2464,1,0,0,0,2463,2461,1,0,0,
        0,2464,2465,5,3,0,0,2465,2466,5,117,0,0,2466,2467,3,184,92,0,2467,
        2468,5,139,0,0,2468,2469,5,2,0,0,2469,2474,3,180,90,0,2470,2471,
        5,4,0,0,2471,2473,3,180,90,0,2472,2470,1,0,0,0,2473,2476,1,0,0,0,
        2474,2472,1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,2474,
        1,0,0,0,2477,2478,5,3,0,0,2478,179,1,0,0,0,2479,2480,5,2,0,0,2480,
        2485,3,188,94,0,2481,2482,5,4,0,0,2482,2484,3,188,94,0,2483,2481,
        1,0,0,0,2484,2487,1,0,0,0,2485,2483,1,0,0,0,2485,2486,1,0,0,0,2486,
        2488,1,0,0,0,2487,2485,1,0,0,0,2488,2490,5,3,0,0,2489,2491,3,190,
        95,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,181,1,0,0,0,2492,2493,
        3,366,183,0,2493,183,1,0,0,0,2494,2495,3,366,183,0,2495,185,1,0,
        0,0,2496,2498,3,188,94,0,2497,2499,3,190,95,0,2498,2497,1,0,0,0,
        2498,2499,1,0,0,0,2499,187,1,0,0,0,2500,2501,3,244,122,0,2501,189,
        1,0,0,0,2502,2504,5,20,0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,
        2505,1,0,0,0,2505,2506,3,366,183,0,2506,191,1,0,0,0,2507,2508,5,
        157,0,0,2508,2510,5,332,0,0,2509,2511,5,206,0,0,2510,2509,1,0,0,
        0,2510,2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,3,360,180,0,2513,
        2522,5,2,0,0,2514,2519,3,266,133,0,2515,2516,5,4,0,0,2516,2518,3,
        266,133,0,2517,2515,1,0,0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,
        2519,2520,1,0,0,0,2520,2523,1,0,0,0,2521,2519,1,0,0,0,2522,2514,
        1,0,0,0,2522,2523,1,0,0,0,2523,2524,1,0,0,0,2524,2525,5,3,0,0,2525,
        2537,3,366,183,0,2526,2528,5,20,0,0,2527,2526,1,0,0,0,2527,2528,
        1,0,0,0,2528,2529,1,0,0,0,2529,2534,3,366,183,0,2530,2531,5,4,0,
        0,2531,2533,3,366,183,0,2532,2530,1,0,0,0,2533,2536,1,0,0,0,2534,
        2532,1,0,0,0,2534,2535,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,
        0,2537,2527,1,0,0,0,2537,2538,1,0,0,0,2538,193,1,0,0,0,2539,2540,
        7,22,0,0,2540,195,1,0,0,0,2541,2543,5,157,0,0,2542,2541,1,0,0,0,
        2542,2543,1,0,0,0,2543,2544,1,0,0,0,2544,2548,3,222,111,0,2545,2547,
        3,198,99,0,2546,2545,1,0,0,0,2547,2550,1,0,0,0,2548,2546,1,0,0,0,
        2548,2549,1,0,0,0,2549,197,1,0,0,0,2550,2548,1,0,0,0,2551,2555,3,
        200,100,0,2552,2555,3,164,82,0,2553,2555,3,170,85,0,2554,2551,1,
        0,0,0,2554,2552,1,0,0,0,2554,2553,1,0,0,0,2555,199,1,0,0,0,2556,
        2557,3,202,101,0,2557,2559,5,154,0,0,2558,2560,5,157,0,0,2559,2558,
        1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,0,0,2561,2563,3,222,111,
        0,2562,2564,3,204,102,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,
        2574,1,0,0,0,2565,2566,5,191,0,0,2566,2567,3,202,101,0,2567,2569,
        5,154,0,0,2568,2570,5,157,0,0,2569,2568,1,0,0,0,2569,2570,1,0,0,
        0,2570,2571,1,0,0,0,2571,2572,3,222,111,0,2572,2574,1,0,0,0,2573,
        2556,1,0,0,0,2573,2565,1,0,0,0,2574,201,1,0,0,0,2575,2577,5,143,
        0,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,2577,2600,1,0,0,0,2578,2600,
        5,60,0,0,2579,2581,5,160,0,0,2580,2582,5,206,0,0,2581,2580,1,0,0,
        0,2581,2582,1,0,0,0,2582,2600,1,0,0,0,2583,2585,5,160,0,0,2584,2583,
        1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2600,5,257,0,0,
        2587,2589,5,244,0,0,2588,2590,5,206,0,0,2589,2588,1,0,0,0,2589,2590,
        1,0,0,0,2590,2600,1,0,0,0,2591,2593,5,122,0,0,2592,2594,5,206,0,
        0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2600,1,0,0,0,2595,2597,
        5,160,0,0,2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,2598,1,0,0,0,
        2598,2600,5,15,0,0,2599,2576,1,0,0,0,2599,2578,1,0,0,0,2599,2579,
        1,0,0,0,2599,2584,1,0,0,0,2599,2587,1,0,0,0,2599,2591,1,0,0,0,2599,
        2596,1,0,0,0,2600,203,1,0,0,0,2601,2602,5,199,0,0,2602,2606,3,274,
        137,0,2603,2604,5,325,0,0,2604,2606,3,210,105,0,2605,2601,1,0,0,
        0,2605,2603,1,0,0,0,2606,205,1,0,0,0,2607,2608,5,287,0,0,2608,2610,
        5,2,0,0,2609,2611,3,208,104,0,2610,2609,1,0,0,0,2610,2611,1,0,0,
        0,2611,2612,1,0,0,0,2612,2617,5,3,0,0,2613,2614,5,238,0,0,2614,2615,
        5,2,0,0,2615,2616,5,375,0,0,2616,2618,5,3,0,0,2617,2613,1,0,0,0,
        2617,2618,1,0,0,0,2618,207,1,0,0,0,2619,2621,5,354,0,0,2620,2619,
        1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2623,7,23,0,0,2623,
        2644,5,217,0,0,2624,2625,3,266,133,0,2625,2626,5,251,0,0,2626,2644,
        1,0,0,0,2627,2628,5,29,0,0,2628,2629,5,375,0,0,2629,2630,5,205,0,
        0,2630,2631,5,197,0,0,2631,2640,5,375,0,0,2632,2638,5,199,0,0,2633,
        2639,3,366,183,0,2634,2635,3,360,180,0,2635,2636,5,2,0,0,2636,2637,
        5,3,0,0,2637,2639,1,0,0,0,2638,2633,1,0,0,0,2638,2634,1,0,0,0,2639,
        2641,1,0,0,0,2640,2632,1,0,0,0,2640,2641,1,0,0,0,2641,2644,1,0,0,
        0,2642,2644,3,266,133,0,2643,2620,1,0,0,0,2643,2624,1,0,0,0,2643,
        2627,1,0,0,0,2643,2642,1,0,0,0,2644,209,1,0,0,0,2645,2646,5,2,0,
        0,2646,2647,3,212,106,0,2647,2648,5,3,0,0,2648,211,1,0,0,0,2649,
        2654,3,362,181,0,2650,2651,5,4,0,0,2651,2653,3,362,181,0,2652,2650,
        1,0,0,0,2653,2656,1,0,0,0,2654,2652,1,0,0,0,2654,2655,1,0,0,0,2655,
        213,1,0,0,0,2656,2654,1,0,0,0,2657,2658,5,2,0,0,2658,2663,3,216,
        108,0,2659,2660,5,4,0,0,2660,2662,3,216,108,0,2661,2659,1,0,0,0,
        2662,2665,1,0,0,0,2663,2661,1,0,0,0,2663,2664,1,0,0,0,2664,2666,
        1,0,0,0,2665,2663,1,0,0,0,2666,2667,5,3,0,0,2667,215,1,0,0,0,2668,
        2670,3,362,181,0,2669,2671,7,16,0,0,2670,2669,1,0,0,0,2670,2671,
        1,0,0,0,2671,217,1,0,0,0,2672,2673,5,2,0,0,2673,2678,3,220,110,0,
        2674,2675,5,4,0,0,2675,2677,3,220,110,0,2676,2674,1,0,0,0,2677,2680,
        1,0,0,0,2678,2676,1,0,0,0,2678,2679,1,0,0,0,2679,2681,1,0,0,0,2680,
        2678,1,0,0,0,2681,2682,5,3,0,0,2682,219,1,0,0,0,2683,2685,3,366,
        183,0,2684,2686,3,46,23,0,2685,2684,1,0,0,0,2685,2686,1,0,0,0,2686,
        221,1,0,0,0,2687,2689,3,100,50,0,2688,2690,3,152,76,0,2689,2688,
        1,0,0,0,2689,2690,1,0,0,0,2690,2692,1,0,0,0,2691,2693,3,206,103,
        0,2692,2691,1,0,0,0,2692,2693,1,0,0,0,2693,2694,1,0,0,0,2694,2695,
        3,238,119,0,2695,2715,1,0,0,0,2696,2697,5,2,0,0,2697,2698,3,48,24,
        0,2698,2700,5,3,0,0,2699,2701,3,206,103,0,2700,2699,1,0,0,0,2700,
        2701,1,0,0,0,2701,2702,1,0,0,0,2702,2703,3,238,119,0,2703,2715,1,
        0,0,0,2704,2705,5,2,0,0,2705,2706,3,196,98,0,2706,2708,5,3,0,0,2707,
        2709,3,206,103,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,
        0,0,0,2710,2711,3,238,119,0,2711,2715,1,0,0,0,2712,2715,3,224,112,
        0,2713,2715,3,236,118,0,2714,2687,1,0,0,0,2714,2696,1,0,0,0,2714,
        2704,1,0,0,0,2714,2712,1,0,0,0,2714,2713,1,0,0,0,2715,223,1,0,0,
        0,2716,2717,5,326,0,0,2717,2722,3,266,133,0,2718,2719,5,4,0,0,2719,
        2721,3,266,133,0,2720,2718,1,0,0,0,2721,2724,1,0,0,0,2722,2720,1,
        0,0,0,2722,2723,1,0,0,0,2723,2725,1,0,0,0,2724,2722,1,0,0,0,2725,
        2726,3,238,119,0,2726,225,1,0,0,0,2727,2728,5,285,0,0,2728,2730,
        3,100,50,0,2729,2731,3,228,114,0,2730,2729,1,0,0,0,2730,2731,1,0,
        0,0,2731,2747,1,0,0,0,2732,2733,5,285,0,0,2733,2734,5,2,0,0,2734,
        2735,3,100,50,0,2735,2737,5,3,0,0,2736,2738,3,228,114,0,2737,2736,
        1,0,0,0,2737,2738,1,0,0,0,2738,2747,1,0,0,0,2739,2740,5,285,0,0,
        2740,2741,5,2,0,0,2741,2742,3,48,24,0,2742,2744,5,3,0,0,2743,2745,
        3,228,114,0,2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,2747,1,0,0,
        0,2746,2727,1,0,0,0,2746,2732,1,0,0,0,2746,2739,1,0,0,0,2747,227,
        1,0,0,0,2748,2749,5,340,0,0,2749,2750,5,267,0,0,2750,2768,5,212,
        0,0,2751,2752,7,24,0,0,2752,2765,5,31,0,0,2753,2754,5,2,0,0,2754,
        2759,3,266,133,0,2755,2756,5,4,0,0,2756,2758,3,266,133,0,2757,2755,
        1,0,0,0,2758,2761,1,0,0,0,2759,2757,1,0,0,0,2759,2760,1,0,0,0,2760,
        2762,1,0,0,0,2761,2759,1,0,0,0,2762,2763,5,3,0,0,2763,2766,1,0,0,
        0,2764,2766,3,266,133,0,2765,2753,1,0,0,0,2765,2764,1,0,0,0,2766,
        2768,1,0,0,0,2767,2748,1,0,0,0,2767,2751,1,0,0,0,2768,2785,1,0,0,
        0,2769,2770,7,25,0,0,2770,2783,5,31,0,0,2771,2772,5,2,0,0,2772,2777,
        3,110,55,0,2773,2774,5,4,0,0,2774,2776,3,110,55,0,2775,2773,1,0,
        0,0,2776,2779,1,0,0,0,2777,2775,1,0,0,0,2777,2778,1,0,0,0,2778,2780,
        1,0,0,0,2779,2777,1,0,0,0,2780,2781,5,3,0,0,2781,2784,1,0,0,0,2782,
        2784,3,110,55,0,2783,2771,1,0,0,0,2783,2782,1,0,0,0,2784,2786,1,
        0,0,0,2785,2769,1,0,0,0,2785,2786,1,0,0,0,2786,229,1,0,0,0,2787,
        2788,3,366,183,0,2788,2789,5,366,0,0,2789,2790,3,226,113,0,2790,
        231,1,0,0,0,2791,2794,3,226,113,0,2792,2794,3,230,115,0,2793,2791,
        1,0,0,0,2793,2792,1,0,0,0,2794,233,1,0,0,0,2795,2798,3,232,116,0,
        2796,2798,3,270,135,0,2797,2795,1,0,0,0,2797,2796,1,0,0,0,2798,235,
        1,0,0,0,2799,2800,3,358,179,0,2800,2809,5,2,0,0,2801,2806,3,234,
        117,0,2802,2803,5,4,0,0,2803,2805,3,234,117,0,2804,2802,1,0,0,0,
        2805,2808,1,0,0,0,2806,2804,1,0,0,0,2806,2807,1,0,0,0,2807,2810,
        1,0,0,0,2808,2806,1,0,0,0,2809,2801,1,0,0,0,2809,2810,1,0,0,0,2810,
        2811,1,0,0,0,2811,2812,5,3,0,0,2812,2813,3,238,119,0,2813,237,1,
        0,0,0,2814,2816,5,20,0,0,2815,2814,1,0,0,0,2815,2816,1,0,0,0,2816,
        2817,1,0,0,0,2817,2819,3,368,184,0,2818,2820,3,210,105,0,2819,2818,
        1,0,0,0,2819,2820,1,0,0,0,2820,2822,1,0,0,0,2821,2815,1,0,0,0,2821,
        2822,1,0,0,0,2822,239,1,0,0,0,2823,2824,5,250,0,0,2824,2825,5,119,
        0,0,2825,2826,5,259,0,0,2826,2830,3,378,189,0,2827,2828,5,340,0,
        0,2828,2829,5,260,0,0,2829,2831,3,74,37,0,2830,2827,1,0,0,0,2830,
        2831,1,0,0,0,2831,2873,1,0,0,0,2832,2833,5,250,0,0,2833,2834,5,119,
        0,0,2834,2844,5,85,0,0,2835,2836,5,111,0,0,2836,2837,5,291,0,0,2837,
        2838,5,31,0,0,2838,2842,3,378,189,0,2839,2840,5,99,0,0,2840,2841,
        5,31,0,0,2841,2843,3,378,189,0,2842,2839,1,0,0,0,2842,2843,1,0,0,
        0,2843,2845,1,0,0,0,2844,2835,1,0,0,0,2844,2845,1,0,0,0,2845,2851,
        1,0,0,0,2846,2847,5,48,0,0,2847,2848,5,153,0,0,2848,2849,5,291,0,
        0,2849,2850,5,31,0,0,2850,2852,3,378,189,0,2851,2846,1,0,0,0,2851,
        2852,1,0,0,0,2852,2858,1,0,0,0,2853,2854,5,174,0,0,2854,2855,5,155,
        0,0,2855,2856,5,291,0,0,2856,2857,5,31,0,0,2857,2859,3,378,189,0,
        2858,2853,1,0,0,0,2858,2859,1,0,0,0,2859,2864,1,0,0,0,2860,2861,
        5,164,0,0,2861,2862,5,291,0,0,2862,2863,5,31,0,0,2863,2865,3,378,
        189,0,2864,2860,1,0,0,0,2864,2865,1,0,0,0,2865,2870,1,0,0,0,2866,
        2867,5,194,0,0,2867,2868,5,83,0,0,2868,2869,5,20,0,0,2869,2871,3,
        378,189,0,2870,2866,1,0,0,0,2870,2871,1,0,0,0,2871,2873,1,0,0,0,
        2872,2823,1,0,0,0,2872,2832,1,0,0,0,2873,241,1,0,0,0,2874,2879,3,
        244,122,0,2875,2876,5,4,0,0,2876,2878,3,244,122,0,2877,2875,1,0,
        0,0,2878,2881,1,0,0,0,2879,2877,1,0,0,0,2879,2880,1,0,0,0,2880,243,
        1,0,0,0,2881,2879,1,0,0,0,2882,2887,3,362,181,0,2883,2884,5,5,0,
        0,2884,2886,3,362,181,0,2885,2883,1,0,0,0,2886,2889,1,0,0,0,2887,
        2885,1,0,0,0,2887,2888,1,0,0,0,2888,245,1,0,0,0,2889,2887,1,0,0,
        0,2890,2895,3,248,124,0,2891,2892,5,4,0,0,2892,2894,3,248,124,0,
        2893,2891,1,0,0,0,2894,2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,
        1,0,0,0,2896,247,1,0,0,0,2897,2895,1,0,0,0,2898,2901,3,244,122,0,
        2899,2900,5,202,0,0,2900,2902,3,74,37,0,2901,2899,1,0,0,0,2901,2902,
        1,0,0,0,2902,249,1,0,0,0,2903,2904,3,362,181,0,2904,2905,5,5,0,0,
        2905,2907,1,0,0,0,2906,2903,1,0,0,0,2906,2907,1,0,0,0,2907,2908,
        1,0,0,0,2908,2909,3,362,181,0,2909,251,1,0,0,0,2910,2911,3,362,181,
        0,2911,2912,5,5,0,0,2912,2914,1,0,0,0,2913,2910,1,0,0,0,2913,2914,
        1,0,0,0,2914,2915,1,0,0,0,2915,2916,3,362,181,0,2916,253,1,0,0,0,
        2917,2925,3,266,133,0,2918,2920,5,20,0,0,2919,2918,1,0,0,0,2919,
        2920,1,0,0,0,2920,2923,1,0,0,0,2921,2924,3,362,181,0,2922,2924,3,
        210,105,0,2923,2921,1,0,0,0,2923,2922,1,0,0,0,2924,2926,1,0,0,0,
        2925,2919,1,0,0,0,2925,2926,1,0,0,0,2926,255,1,0,0,0,2927,2932,3,
        254,127,0,2928,2929,5,4,0,0,2929,2931,3,254,127,0,2930,2928,1,0,
        0,0,2931,2934,1,0,0,0,2932,2930,1,0,0,0,2932,2933,1,0,0,0,2933,257,
        1,0,0,0,2934,2932,1,0,0,0,2935,2936,5,2,0,0,2936,2941,3,260,130,
        0,2937,2938,5,4,0,0,2938,2940,3,260,130,0,2939,2937,1,0,0,0,2940,
        2943,1,0,0,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2944,1,0,0,
        0,2943,2941,1,0,0,0,2944,2945,5,3,0,0,2945,259,1,0,0,0,2946,2949,
        3,262,131,0,2947,2949,3,330,165,0,2948,2946,1,0,0,0,2948,2947,1,
        0,0,0,2949,261,1,0,0,0,2950,2964,3,360,180,0,2951,2952,3,366,183,
        0,2952,2953,5,2,0,0,2953,2958,3,264,132,0,2954,2955,5,4,0,0,2955,
        2957,3,264,132,0,2956,2954,1,0,0,0,2957,2960,1,0,0,0,2958,2956,1,
        0,0,0,2958,2959,1,0,0,0,2959,2961,1,0,0,0,2960,2958,1,0,0,0,2961,
        2962,5,3,0,0,2962,2964,1,0,0,0,2963,2950,1,0,0,0,2963,2951,1,0,0,
        0,2964,263,1,0,0,0,2965,2968,3,360,180,0,2966,2968,3,286,143,0,2967,
        2965,1,0,0,0,2967,2966,1,0,0,0,2968,265,1,0,0,0,2969,2970,3,274,
        137,0,2970,267,1,0,0,0,2971,2972,3,366,183,0,2972,2973,5,366,0,0,
        2973,2974,3,266,133,0,2974,269,1,0,0,0,2975,2978,3,266,133,0,2976,
        2978,3,268,134,0,2977,2975,1,0,0,0,2977,2976,1,0,0,0,2978,271,1,
        0,0,0,2979,2984,3,266,133,0,2980,2981,5,4,0,0,2981,2983,3,266,133,
        0,2982,2980,1,0,0,0,2983,2986,1,0,0,0,2984,2982,1,0,0,0,2984,2985,
        1,0,0,0,2985,273,1,0,0,0,2986,2984,1,0,0,0,2987,2988,6,137,-1,0,
        2988,2989,5,193,0,0,2989,3000,3,274,137,5,2990,2991,5,103,0,0,2991,
        2992,5,2,0,0,2992,2993,3,48,24,0,2993,2994,5,3,0,0,2994,3000,1,0,
        0,0,2995,2997,3,278,139,0,2996,2998,3,276,138,0,2997,2996,1,0,0,
        0,2997,2998,1,0,0,0,2998,3000,1,0,0,0,2999,2987,1,0,0,0,2999,2990,
        1,0,0,0,2999,2995,1,0,0,0,3000,3009,1,0,0,0,3001,3002,10,2,0,0,3002,
        3003,5,14,0,0,3003,3008,3,274,137,3,3004,3005,10,1,0,0,3005,3006,
        5,203,0,0,3006,3008,3,274,137,2,3007,3001,1,0,0,0,3007,3004,1,0,
        0,0,3008,3011,1,0,0,0,3009,3007,1,0,0,0,3009,3010,1,0,0,0,3010,275,
        1,0,0,0,3011,3009,1,0,0,0,3012,3014,5,193,0,0,3013,3012,1,0,0,0,
        3013,3014,1,0,0,0,3014,3015,1,0,0,0,3015,3016,5,24,0,0,3016,3017,
        3,278,139,0,3017,3018,5,14,0,0,3018,3019,3,278,139,0,3019,3095,1,
        0,0,0,3020,3022,5,193,0,0,3021,3020,1,0,0,0,3021,3022,1,0,0,0,3022,
        3023,1,0,0,0,3023,3024,5,139,0,0,3024,3025,5,2,0,0,3025,3030,3,266,
        133,0,3026,3027,5,4,0,0,3027,3029,3,266,133,0,3028,3026,1,0,0,0,
        3029,3032,1,0,0,0,3030,3028,1,0,0,0,3030,3031,1,0,0,0,3031,3033,
        1,0,0,0,3032,3030,1,0,0,0,3033,3034,5,3,0,0,3034,3095,1,0,0,0,3035,
        3037,5,193,0,0,3036,3035,1,0,0,0,3036,3037,1,0,0,0,3037,3038,1,0,
        0,0,3038,3039,5,139,0,0,3039,3040,5,2,0,0,3040,3041,3,48,24,0,3041,
        3042,5,3,0,0,3042,3095,1,0,0,0,3043,3045,5,193,0,0,3044,3043,1,0,
        0,0,3044,3045,1,0,0,0,3045,3046,1,0,0,0,3046,3047,5,245,0,0,3047,
        3095,3,278,139,0,3048,3050,5,193,0,0,3049,3048,1,0,0,0,3049,3050,
        1,0,0,0,3050,3051,1,0,0,0,3051,3052,7,26,0,0,3052,3066,7,27,0,0,
        3053,3054,5,2,0,0,3054,3067,5,3,0,0,3055,3056,5,2,0,0,3056,3061,
        3,266,133,0,3057,3058,5,4,0,0,3058,3060,3,266,133,0,3059,3057,1,
        0,0,0,3060,3063,1,0,0,0,3061,3059,1,0,0,0,3061,3062,1,0,0,0,3062,
        3064,1,0,0,0,3063,3061,1,0,0,0,3064,3065,5,3,0,0,3065,3067,1,0,0,
        0,3066,3053,1,0,0,0,3066,3055,1,0,0,0,3067,3095,1,0,0,0,3068,3070,
        5,193,0,0,3069,3068,1,0,0,0,3069,3070,1,0,0,0,3070,3071,1,0,0,0,
        3071,3072,7,26,0,0,3072,3075,3,278,139,0,3073,3074,5,98,0,0,3074,
        3076,3,378,189,0,3075,3073,1,0,0,0,3075,3076,1,0,0,0,3076,3095,1,
        0,0,0,3077,3079,5,152,0,0,3078,3080,5,193,0,0,3079,3078,1,0,0,0,
        3079,3080,1,0,0,0,3080,3081,1,0,0,0,3081,3095,5,194,0,0,3082,3084,
        5,152,0,0,3083,3085,5,193,0,0,3084,3083,1,0,0,0,3084,3085,1,0,0,
        0,3085,3086,1,0,0,0,3086,3095,7,28,0,0,3087,3089,5,152,0,0,3088,
        3090,5,193,0,0,3089,3088,1,0,0,0,3089,3090,1,0,0,0,3090,3091,1,0,
        0,0,3091,3092,5,91,0,0,3092,3093,5,121,0,0,3093,3095,3,278,139,0,
        3094,3013,1,0,0,0,3094,3021,1,0,0,0,3094,3036,1,0,0,0,3094,3044,
        1,0,0,0,3094,3049,1,0,0,0,3094,3069,1,0,0,0,3094,3077,1,0,0,0,3094,
        3082,1,0,0,0,3094,3087,1,0,0,0,3095,277,1,0,0,0,3096,3097,6,139,
        -1,0,3097,3101,3,282,141,0,3098,3099,7,29,0,0,3099,3101,3,278,139,
        7,3100,3096,1,0,0,0,3100,3098,1,0,0,0,3101,3123,1,0,0,0,3102,3103,
        10,6,0,0,3103,3104,7,30,0,0,3104,3122,3,278,139,7,3105,3106,10,5,
        0,0,3106,3107,7,31,0,0,3107,3122,3,278,139,6,3108,3109,10,4,0,0,
        3109,3110,5,359,0,0,3110,3122,3,278,139,5,3111,3112,10,3,0,0,3112,
        3113,5,362,0,0,3113,3122,3,278,139,4,3114,3115,10,2,0,0,3115,3116,
        5,360,0,0,3116,3122,3,278,139,3,3117,3118,10,1,0,0,3118,3119,3,288,
        144,0,3119,3120,3,278,139,2,3120,3122,1,0,0,0,3121,3102,1,0,0,0,
        3121,3105,1,0,0,0,3121,3108,1,0,0,0,3121,3111,1,0,0,0,3121,3114,
        1,0,0,0,3121,3117,1,0,0,0,3122,3125,1,0,0,0,3123,3121,1,0,0,0,3123,
        3124,1,0,0,0,3124,279,1,0,0,0,3125,3123,1,0,0,0,3126,3127,7,32,0,
        0,3127,281,1,0,0,0,3128,3129,6,141,-1,0,3129,3372,7,33,0,0,3130,
        3131,7,34,0,0,3131,3134,5,2,0,0,3132,3135,3,280,140,0,3133,3135,
        3,378,189,0,3134,3132,1,0,0,0,3134,3133,1,0,0,0,3135,3136,1,0,0,
        0,3136,3137,5,4,0,0,3137,3138,3,278,139,0,3138,3139,5,4,0,0,3139,
        3140,3,278,139,0,3140,3141,5,3,0,0,3141,3372,1,0,0,0,3142,3143,7,
        35,0,0,3143,3146,5,2,0,0,3144,3147,3,280,140,0,3145,3147,3,378,189,
        0,3146,3144,1,0,0,0,3146,3145,1,0,0,0,3147,3148,1,0,0,0,3148,3149,
        5,4,0,0,3149,3150,3,278,139,0,3150,3151,5,4,0,0,3151,3152,3,278,
        139,0,3152,3153,5,3,0,0,3153,3372,1,0,0,0,3154,3156,5,35,0,0,3155,
        3157,3,344,172,0,3156,3155,1,0,0,0,3157,3158,1,0,0,0,3158,3156,1,
        0,0,0,3158,3159,1,0,0,0,3159,3162,1,0,0,0,3160,3161,5,96,0,0,3161,
        3163,3,266,133,0,3162,3160,1,0,0,0,3162,3163,1,0,0,0,3163,3164,1,
        0,0,0,3164,3165,5,97,0,0,3165,3372,1,0,0,0,3166,3167,5,35,0,0,3167,
        3169,3,266,133,0,3168,3170,3,344,172,0,3169,3168,1,0,0,0,3170,3171,
        1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,3175,1,0,0,0,3173,
        3174,5,96,0,0,3174,3176,3,266,133,0,3175,3173,1,0,0,0,3175,3176,
        1,0,0,0,3176,3177,1,0,0,0,3177,3178,5,97,0,0,3178,3372,1,0,0,0,3179,
        3180,7,36,0,0,3180,3181,5,2,0,0,3181,3182,3,266,133,0,3182,3183,
        5,20,0,0,3183,3184,3,316,158,0,3184,3185,5,3,0,0,3185,3372,1,0,0,
        0,3186,3187,5,279,0,0,3187,3196,5,2,0,0,3188,3193,3,254,127,0,3189,
        3190,5,4,0,0,3190,3192,3,254,127,0,3191,3189,1,0,0,0,3192,3195,1,
        0,0,0,3193,3191,1,0,0,0,3193,3194,1,0,0,0,3194,3197,1,0,0,0,3195,
        3193,1,0,0,0,3196,3188,1,0,0,0,3196,3197,1,0,0,0,3197,3198,1,0,0,
        0,3198,3372,5,3,0,0,3199,3200,5,114,0,0,3200,3201,5,2,0,0,3201,3204,
        3,266,133,0,3202,3203,5,136,0,0,3203,3205,5,195,0,0,3204,3202,1,
        0,0,0,3204,3205,1,0,0,0,3205,3206,1,0,0,0,3206,3207,5,3,0,0,3207,
        3372,1,0,0,0,3208,3209,5,17,0,0,3209,3210,5,2,0,0,3210,3213,3,266,
        133,0,3211,3212,5,136,0,0,3212,3214,5,195,0,0,3213,3211,1,0,0,0,
        3213,3214,1,0,0,0,3214,3215,1,0,0,0,3215,3216,5,3,0,0,3216,3372,
        1,0,0,0,3217,3218,5,156,0,0,3218,3219,5,2,0,0,3219,3222,3,266,133,
        0,3220,3221,5,136,0,0,3221,3223,5,195,0,0,3222,3220,1,0,0,0,3222,
        3223,1,0,0,0,3223,3224,1,0,0,0,3224,3225,5,3,0,0,3225,3372,1,0,0,
        0,3226,3227,5,220,0,0,3227,3228,5,2,0,0,3228,3229,3,278,139,0,3229,
        3230,5,139,0,0,3230,3231,3,278,139,0,3231,3232,5,3,0,0,3232,3372,
        1,0,0,0,3233,3372,3,286,143,0,3234,3236,5,355,0,0,3235,3237,3,136,
        68,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3372,1,0,0,0,3238,
        3239,3,360,180,0,3239,3240,5,5,0,0,3240,3242,5,355,0,0,3241,3243,
        3,136,68,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3372,1,0,0,0,
        3244,3245,5,2,0,0,3245,3248,3,254,127,0,3246,3247,5,4,0,0,3247,3249,
        3,254,127,0,3248,3246,1,0,0,0,3249,3250,1,0,0,0,3250,3248,1,0,0,
        0,3250,3251,1,0,0,0,3251,3252,1,0,0,0,3252,3253,5,3,0,0,3253,3372,
        1,0,0,0,3254,3255,5,2,0,0,3255,3256,3,48,24,0,3256,3257,5,3,0,0,
        3257,3372,1,0,0,0,3258,3259,3,358,179,0,3259,3271,5,2,0,0,3260,3262,
        3,194,97,0,3261,3260,1,0,0,0,3261,3262,1,0,0,0,3262,3263,1,0,0,0,
        3263,3268,3,270,135,0,3264,3265,5,4,0,0,3265,3267,3,270,135,0,3266,
        3264,1,0,0,0,3267,3270,1,0,0,0,3268,3266,1,0,0,0,3268,3269,1,0,0,
        0,3269,3272,1,0,0,0,3270,3268,1,0,0,0,3271,3261,1,0,0,0,3271,3272,
        1,0,0,0,3272,3273,1,0,0,0,3273,3289,5,3,0,0,3274,3275,5,341,0,0,
        3275,3276,5,128,0,0,3276,3277,5,2,0,0,3277,3278,5,204,0,0,3278,3279,
        5,31,0,0,3279,3284,3,110,55,0,3280,3281,5,4,0,0,3281,3283,3,110,
        55,0,3282,3280,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3284,
        3285,1,0,0,0,3285,3287,1,0,0,0,3286,3284,1,0,0,0,3287,3288,5,3,0,
        0,3288,3290,1,0,0,0,3289,3274,1,0,0,0,3289,3290,1,0,0,0,3290,3297,
        1,0,0,0,3291,3292,5,112,0,0,3292,3293,5,2,0,0,3293,3294,5,338,0,
        0,3294,3295,3,274,137,0,3295,3296,5,3,0,0,3296,3298,1,0,0,0,3297,
        3291,1,0,0,0,3297,3298,1,0,0,0,3298,3301,1,0,0,0,3299,3300,7,37,
        0,0,3300,3302,5,195,0,0,3301,3299,1,0,0,0,3301,3302,1,0,0,0,3302,
        3305,1,0,0,0,3303,3304,5,208,0,0,3304,3306,3,350,175,0,3305,3303,
        1,0,0,0,3305,3306,1,0,0,0,3306,3372,1,0,0,0,3307,3308,3,366,183,
        0,3308,3309,5,365,0,0,3309,3310,3,266,133,0,3310,3372,1,0,0,0,3311,
        3312,5,2,0,0,3312,3315,3,366,183,0,3313,3314,5,4,0,0,3314,3316,3,
        366,183,0,3315,3313,1,0,0,0,3316,3317,1,0,0,0,3317,3315,1,0,0,0,
        3317,3318,1,0,0,0,3318,3319,1,0,0,0,3319,3320,5,3,0,0,3320,3321,
        5,365,0,0,3321,3322,3,266,133,0,3322,3372,1,0,0,0,3323,3372,3,366,
        183,0,3324,3325,5,2,0,0,3325,3326,3,266,133,0,3326,3327,5,3,0,0,
        3327,3372,1,0,0,0,3328,3329,5,108,0,0,3329,3330,5,2,0,0,3330,3331,
        3,366,183,0,3331,3332,5,121,0,0,3332,3333,3,278,139,0,3333,3334,
        5,3,0,0,3334,3372,1,0,0,0,3335,3336,7,38,0,0,3336,3337,5,2,0,0,3337,
        3338,3,278,139,0,3338,3339,7,39,0,0,3339,3342,3,278,139,0,3340,3341,
        7,40,0,0,3341,3343,3,278,139,0,3342,3340,1,0,0,0,3342,3343,1,0,0,
        0,3343,3344,1,0,0,0,3344,3345,5,3,0,0,3345,3372,1,0,0,0,3346,3347,
        5,308,0,0,3347,3349,5,2,0,0,3348,3350,7,41,0,0,3349,3348,1,0,0,0,
        3349,3350,1,0,0,0,3350,3352,1,0,0,0,3351,3353,3,278,139,0,3352,3351,
        1,0,0,0,3352,3353,1,0,0,0,3353,3354,1,0,0,0,3354,3355,5,121,0,0,
        3355,3356,3,278,139,0,3356,3357,5,3,0,0,3357,3372,1,0,0,0,3358,3359,
        5,210,0,0,3359,3360,5,2,0,0,3360,3361,3,278,139,0,3361,3362,5,219,
        0,0,3362,3363,3,278,139,0,3363,3364,5,121,0,0,3364,3367,3,278,139,
        0,3365,3366,5,117,0,0,3366,3368,3,278,139,0,3367,3365,1,0,0,0,3367,
        3368,1,0,0,0,3368,3369,1,0,0,0,3369,3370,5,3,0,0,3370,3372,1,0,0,
        0,3371,3128,1,0,0,0,3371,3130,1,0,0,0,3371,3142,1,0,0,0,3371,3154,
        1,0,0,0,3371,3166,1,0,0,0,3371,3179,1,0,0,0,3371,3186,1,0,0,0,3371,
        3199,1,0,0,0,3371,3208,1,0,0,0,3371,3217,1,0,0,0,3371,3226,1,0,0,
        0,3371,3233,1,0,0,0,3371,3234,1,0,0,0,3371,3238,1,0,0,0,3371,3244,
        1,0,0,0,3371,3254,1,0,0,0,3371,3258,1,0,0,0,3371,3307,1,0,0,0,3371,
        3311,1,0,0,0,3371,3323,1,0,0,0,3371,3324,1,0,0,0,3371,3328,1,0,0,
        0,3371,3335,1,0,0,0,3371,3346,1,0,0,0,3371,3358,1,0,0,0,3372,3386,
        1,0,0,0,3373,3374,10,22,0,0,3374,3375,5,364,0,0,3375,3385,3,316,
        158,0,3376,3377,10,8,0,0,3377,3378,5,6,0,0,3378,3379,3,278,139,0,
        3379,3380,5,7,0,0,3380,3385,1,0,0,0,3381,3382,10,6,0,0,3382,3383,
        5,5,0,0,3383,3385,3,366,183,0,3384,3373,1,0,0,0,3384,3376,1,0,0,
        0,3384,3381,1,0,0,0,3385,3388,1,0,0,0,3386,3384,1,0,0,0,3386,3387,
        1,0,0,0,3387,283,1,0,0,0,3388,3386,1,0,0,0,3389,3397,5,71,0,0,3390,
        3397,5,295,0,0,3391,3397,5,296,0,0,3392,3397,5,297,0,0,3393,3397,
        5,148,0,0,3394,3397,5,131,0,0,3395,3397,3,366,183,0,3396,3389,1,
        0,0,0,3396,3390,1,0,0,0,3396,3391,1,0,0,0,3396,3392,1,0,0,0,3396,
        3393,1,0,0,0,3396,3394,1,0,0,0,3396,3395,1,0,0,0,3397,285,1,0,0,
        0,3398,3414,5,194,0,0,3399,3414,5,369,0,0,3400,3401,5,363,0,0,3401,
        3414,3,366,183,0,3402,3414,3,296,148,0,3403,3404,3,284,142,0,3404,
        3405,3,378,189,0,3405,3414,1,0,0,0,3406,3414,3,374,187,0,3407,3414,
        3,294,147,0,3408,3410,3,378,189,0,3409,3408,1,0,0,0,3410,3411,1,
        0,0,0,3411,3409,1,0,0,0,3411,3412,1,0,0,0,3412,3414,1,0,0,0,3413,
        3398,1,0,0,0,3413,3399,1,0,0,0,3413,3400,1,0,0,0,3413,3402,1,0,0,
        0,3413,3403,1,0,0,0,3413,3406,1,0,0,0,3413,3407,1,0,0,0,3413,3409,
        1,0,0,0,3414,287,1,0,0,0,3415,3416,7,42,0,0,3416,289,1,0,0,0,3417,
        3418,7,43,0,0,3418,291,1,0,0,0,3419,3420,7,44,0,0,3420,293,1,0,0,
        0,3421,3422,7,45,0,0,3422,295,1,0,0,0,3423,3426,5,148,0,0,3424,3427,
        3,298,149,0,3425,3427,3,302,151,0,3426,3424,1,0,0,0,3426,3425,1,
        0,0,0,3427,297,1,0,0,0,3428,3430,3,300,150,0,3429,3431,3,304,152,
        0,3430,3429,1,0,0,0,3430,3431,1,0,0,0,3431,299,1,0,0,0,3432,3433,
        3,306,153,0,3433,3434,3,308,154,0,3434,3436,1,0,0,0,3435,3432,1,
        0,0,0,3436,3437,1,0,0,0,3437,3435,1,0,0,0,3437,3438,1,0,0,0,3438,
        301,1,0,0,0,3439,3442,3,304,152,0,3440,3443,3,300,150,0,3441,3443,
        3,304,152,0,3442,3440,1,0,0,0,3442,3441,1,0,0,0,3442,3443,1,0,0,
        0,3443,303,1,0,0,0,3444,3445,3,306,153,0,3445,3446,3,310,155,0,3446,
        3447,5,301,0,0,3447,3448,3,310,155,0,3448,305,1,0,0,0,3449,3451,
        7,46,0,0,3450,3449,1,0,0,0,3450,3451,1,0,0,0,3451,3455,1,0,0,0,3452,
        3456,5,375,0,0,3453,3456,5,377,0,0,3454,3456,3,378,189,0,3455,3452,
        1,0,0,0,3455,3453,1,0,0,0,3455,3454,1,0,0,0,3456,307,1,0,0,0,3457,
        3458,7,47,0,0,3458,309,1,0,0,0,3459,3460,7,48,0,0,3460,311,1,0,0,
        0,3461,3465,5,114,0,0,3462,3463,5,9,0,0,3463,3465,3,362,181,0,3464,
        3461,1,0,0,0,3464,3462,1,0,0,0,3465,313,1,0,0,0,3466,3498,5,27,0,
        0,3467,3498,5,300,0,0,3468,3498,5,32,0,0,3469,3498,5,269,0,0,3470,
        3498,5,265,0,0,3471,3498,5,149,0,0,3472,3498,5,150,0,0,3473,3498,
        5,25,0,0,3474,3498,5,172,0,0,3475,3498,5,115,0,0,3476,3498,5,229,
        0,0,3477,3498,5,94,0,0,3478,3498,5,71,0,0,3479,3498,5,295,0,0,3480,
        3498,5,297,0,0,3481,3498,5,296,0,0,3482,3498,5,278,0,0,3483,3498,
        5,41,0,0,3484,3498,5,40,0,0,3485,3498,5,327,0,0,3486,3498,5,26,0,
        0,3487,3498,5,80,0,0,3488,3498,5,79,0,0,3489,3498,5,196,0,0,3490,
        3498,5,334,0,0,3491,3498,5,148,0,0,3492,3498,5,330,0,0,3493,3498,
        5,19,0,0,3494,3498,5,279,0,0,3495,3498,5,174,0,0,3496,3498,3,366,
        183,0,3497,3466,1,0,0,0,3497,3467,1,0,0,0,3497,3468,1,0,0,0,3497,
        3469,1,0,0,0,3497,3470,1,0,0,0,3497,3471,1,0,0,0,3497,3472,1,0,0,
        0,3497,3473,1,0,0,0,3497,3474,1,0,0,0,3497,3475,1,0,0,0,3497,3476,
        1,0,0,0,3497,3477,1,0,0,0,3497,3478,1,0,0,0,3497,3479,1,0,0,0,3497,
        3480,1,0,0,0,3497,3481,1,0,0,0,3497,3482,1,0,0,0,3497,3483,1,0,0,
        0,3497,3484,1,0,0,0,3497,3485,1,0,0,0,3497,3486,1,0,0,0,3497,3487,
        1,0,0,0,3497,3488,1,0,0,0,3497,3489,1,0,0,0,3497,3490,1,0,0,0,3497,
        3491,1,0,0,0,3497,3492,1,0,0,0,3497,3493,1,0,0,0,3497,3494,1,0,0,
        0,3497,3495,1,0,0,0,3497,3496,1,0,0,0,3498,315,1,0,0,0,3499,3500,
        5,19,0,0,3500,3501,5,349,0,0,3501,3502,3,316,158,0,3502,3503,5,351,
        0,0,3503,3546,1,0,0,0,3504,3505,5,174,0,0,3505,3506,5,349,0,0,3506,
        3507,3,316,158,0,3507,3508,5,4,0,0,3508,3509,3,316,158,0,3509,3510,
        5,351,0,0,3510,3546,1,0,0,0,3511,3518,5,279,0,0,3512,3514,5,349,
        0,0,3513,3515,3,340,170,0,3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,
        3516,1,0,0,0,3516,3519,5,351,0,0,3517,3519,5,347,0,0,3518,3512,1,
        0,0,0,3518,3517,1,0,0,0,3519,3546,1,0,0,0,3520,3521,5,148,0,0,3521,
        3524,7,49,0,0,3522,3523,5,301,0,0,3523,3525,5,183,0,0,3524,3522,
        1,0,0,0,3524,3525,1,0,0,0,3525,3546,1,0,0,0,3526,3527,5,148,0,0,
        3527,3530,7,50,0,0,3528,3529,5,301,0,0,3529,3531,7,51,0,0,3530,3528,
        1,0,0,0,3530,3531,1,0,0,0,3531,3546,1,0,0,0,3532,3543,3,314,157,
        0,3533,3534,5,2,0,0,3534,3539,5,375,0,0,3535,3536,5,4,0,0,3536,3538,
        5,375,0,0,3537,3535,1,0,0,0,3538,3541,1,0,0,0,3539,3537,1,0,0,0,
        3539,3540,1,0,0,0,3540,3542,1,0,0,0,3541,3539,1,0,0,0,3542,3544,
        5,3,0,0,3543,3533,1,0,0,0,3543,3544,1,0,0,0,3544,3546,1,0,0,0,3545,
        3499,1,0,0,0,3545,3504,1,0,0,0,3545,3511,1,0,0,0,3545,3520,1,0,0,
        0,3545,3526,1,0,0,0,3545,3532,1,0,0,0,3546,317,1,0,0,0,3547,3552,
        3,320,160,0,3548,3549,5,4,0,0,3549,3551,3,320,160,0,3550,3548,1,
        0,0,0,3551,3554,1,0,0,0,3552,3550,1,0,0,0,3552,3553,1,0,0,0,3553,
        319,1,0,0,0,3554,3552,1,0,0,0,3555,3556,3,244,122,0,3556,3560,3,
        316,158,0,3557,3559,3,322,161,0,3558,3557,1,0,0,0,3559,3562,1,0,
        0,0,3560,3558,1,0,0,0,3560,3561,1,0,0,0,3561,321,1,0,0,0,3562,3560,
        1,0,0,0,3563,3564,5,193,0,0,3564,3569,5,194,0,0,3565,3569,3,324,
        162,0,3566,3569,3,46,23,0,3567,3569,3,312,156,0,3568,3563,1,0,0,
        0,3568,3565,1,0,0,0,3568,3566,1,0,0,0,3568,3567,1,0,0,0,3569,323,
        1,0,0,0,3570,3571,5,82,0,0,3571,3572,3,266,133,0,3572,325,1,0,0,
        0,3573,3574,7,52,0,0,3574,3575,3,266,133,0,3575,327,1,0,0,0,3576,
        3581,3,330,165,0,3577,3578,5,4,0,0,3578,3580,3,330,165,0,3579,3577,
        1,0,0,0,3580,3583,1,0,0,0,3581,3579,1,0,0,0,3581,3582,1,0,0,0,3582,
        329,1,0,0,0,3583,3581,1,0,0,0,3584,3585,3,362,181,0,3585,3588,3,
        316,158,0,3586,3587,5,193,0,0,3587,3589,5,194,0,0,3588,3586,1,0,
        0,0,3588,3589,1,0,0,0,3589,3591,1,0,0,0,3590,3592,3,46,23,0,3591,
        3590,1,0,0,0,3591,3592,1,0,0,0,3592,331,1,0,0,0,3593,3598,3,334,
        167,0,3594,3595,5,4,0,0,3595,3597,3,334,167,0,3596,3594,1,0,0,0,
        3597,3600,1,0,0,0,3598,3596,1,0,0,0,3598,3599,1,0,0,0,3599,333,1,
        0,0,0,3600,3598,1,0,0,0,3601,3602,3,362,181,0,3602,3606,3,316,158,
        0,3603,3605,3,336,168,0,3604,3603,1,0,0,0,3605,3608,1,0,0,0,3606,
        3604,1,0,0,0,3606,3607,1,0,0,0,3607,335,1,0,0,0,3608,3606,1,0,0,
        0,3609,3610,5,193,0,0,3610,3615,5,194,0,0,3611,3615,3,324,162,0,
        3612,3615,3,338,169,0,3613,3615,3,46,23,0,3614,3609,1,0,0,0,3614,
        3611,1,0,0,0,3614,3612,1,0,0,0,3614,3613,1,0,0,0,3615,337,1,0,0,
        0,3616,3617,5,125,0,0,3617,3618,5,12,0,0,3618,3619,5,20,0,0,3619,
        3620,5,2,0,0,3620,3621,3,266,133,0,3621,3622,5,3,0,0,3622,339,1,
        0,0,0,3623,3628,3,342,171,0,3624,3625,5,4,0,0,3625,3627,3,342,171,
        0,3626,3624,1,0,0,0,3627,3630,1,0,0,0,3628,3626,1,0,0,0,3628,3629,
        1,0,0,0,3629,341,1,0,0,0,3630,3628,1,0,0,0,3631,3633,3,366,183,0,
        3632,3634,5,363,0,0,3633,3632,1,0,0,0,3633,3634,1,0,0,0,3634,3635,
        1,0,0,0,3635,3638,3,316,158,0,3636,3637,5,193,0,0,3637,3639,5,194,
        0,0,3638,3636,1,0,0,0,3638,3639,1,0,0,0,3639,3641,1,0,0,0,3640,3642,
        3,46,23,0,3641,3640,1,0,0,0,3641,3642,1,0,0,0,3642,343,1,0,0,0,3643,
        3644,5,337,0,0,3644,3645,3,266,133,0,3645,3646,5,292,0,0,3646,3647,
        3,266,133,0,3647,345,1,0,0,0,3648,3649,5,339,0,0,3649,3654,3,348,
        174,0,3650,3651,5,4,0,0,3651,3653,3,348,174,0,3652,3650,1,0,0,0,
        3653,3656,1,0,0,0,3654,3652,1,0,0,0,3654,3655,1,0,0,0,3655,347,1,
        0,0,0,3656,3654,1,0,0,0,3657,3658,3,362,181,0,3658,3659,5,20,0,0,
        3659,3660,3,350,175,0,3660,349,1,0,0,0,3661,3708,3,362,181,0,3662,
        3663,5,2,0,0,3663,3664,3,362,181,0,3664,3665,5,3,0,0,3665,3708,1,
        0,0,0,3666,3701,5,2,0,0,3667,3668,5,44,0,0,3668,3669,5,31,0,0,3669,
        3674,3,266,133,0,3670,3671,5,4,0,0,3671,3673,3,266,133,0,3672,3670,
        1,0,0,0,3673,3676,1,0,0,0,3674,3672,1,0,0,0,3674,3675,1,0,0,0,3675,
        3702,1,0,0,0,3676,3674,1,0,0,0,3677,3678,7,24,0,0,3678,3679,5,31,
        0,0,3679,3684,3,266,133,0,3680,3681,5,4,0,0,3681,3683,3,266,133,
        0,3682,3680,1,0,0,0,3683,3686,1,0,0,0,3684,3682,1,0,0,0,3684,3685,
        1,0,0,0,3685,3688,1,0,0,0,3686,3684,1,0,0,0,3687,3677,1,0,0,0,3687,
        3688,1,0,0,0,3688,3699,1,0,0,0,3689,3690,7,25,0,0,3690,3691,5,31,
        0,0,3691,3696,3,110,55,0,3692,3693,5,4,0,0,3693,3695,3,110,55,0,
        3694,3692,1,0,0,0,3695,3698,1,0,0,0,3696,3694,1,0,0,0,3696,3697,
        1,0,0,0,3697,3700,1,0,0,0,3698,3696,1,0,0,0,3699,3689,1,0,0,0,3699,
        3700,1,0,0,0,3700,3702,1,0,0,0,3701,3667,1,0,0,0,3701,3687,1,0,0,
        0,3702,3704,1,0,0,0,3703,3705,3,352,176,0,3704,3703,1,0,0,0,3704,
        3705,1,0,0,0,3705,3706,1,0,0,0,3706,3708,5,3,0,0,3707,3661,1,0,0,
        0,3707,3662,1,0,0,0,3707,3666,1,0,0,0,3708,351,1,0,0,0,3709,3710,
        5,228,0,0,3710,3726,3,354,177,0,3711,3712,5,251,0,0,3712,3726,3,
        354,177,0,3713,3714,5,228,0,0,3714,3715,5,24,0,0,3715,3716,3,354,
        177,0,3716,3717,5,14,0,0,3717,3718,3,354,177,0,3718,3726,1,0,0,0,
        3719,3720,5,251,0,0,3720,3721,5,24,0,0,3721,3722,3,354,177,0,3722,
        3723,5,14,0,0,3723,3724,3,354,177,0,3724,3726,1,0,0,0,3725,3709,
        1,0,0,0,3725,3711,1,0,0,0,3725,3713,1,0,0,0,3725,3719,1,0,0,0,3726,
        353,1,0,0,0,3727,3728,5,314,0,0,3728,3735,7,53,0,0,3729,3730,5,62,
        0,0,3730,3735,5,250,0,0,3731,3732,3,266,133,0,3732,3733,7,53,0,0,
        3733,3735,1,0,0,0,3734,3727,1,0,0,0,3734,3729,1,0,0,0,3734,3731,
        1,0,0,0,3735,355,1,0,0,0,3736,3741,3,360,180,0,3737,3738,5,4,0,0,
        3738,3740,3,360,180,0,3739,3737,1,0,0,0,3740,3743,1,0,0,0,3741,3739,
        1,0,0,0,3741,3742,1,0,0,0,3742,357,1,0,0,0,3743,3741,1,0,0,0,3744,
        3745,5,134,0,0,3745,3746,5,2,0,0,3746,3747,3,266,133,0,3747,3748,
        5,3,0,0,3748,3755,1,0,0,0,3749,3755,5,134,0,0,3750,3755,3,360,180,
        0,3751,3755,5,112,0,0,3752,3755,5,160,0,0,3753,3755,5,244,0,0,3754,
        3744,1,0,0,0,3754,3749,1,0,0,0,3754,3750,1,0,0,0,3754,3751,1,0,0,
        0,3754,3752,1,0,0,0,3754,3753,1,0,0,0,3755,359,1,0,0,0,3756,3761,
        3,366,183,0,3757,3758,5,5,0,0,3758,3760,3,366,183,0,3759,3757,1,
        0,0,0,3760,3763,1,0,0,0,3761,3759,1,0,0,0,3761,3762,1,0,0,0,3762,
        361,1,0,0,0,3763,3761,1,0,0,0,3764,3765,3,366,183,0,3765,3766,3,
        364,182,0,3766,363,1,0,0,0,3767,3768,5,354,0,0,3768,3770,3,366,183,
        0,3769,3767,1,0,0,0,3770,3771,1,0,0,0,3771,3769,1,0,0,0,3771,3772,
        1,0,0,0,3772,3775,1,0,0,0,3773,3775,1,0,0,0,3774,3769,1,0,0,0,3774,
        3773,1,0,0,0,3775,365,1,0,0,0,3776,3780,3,368,184,0,3777,3778,4,
        183,17,0,3778,3780,3,386,193,0,3779,3776,1,0,0,0,3779,3777,1,0,0,
        0,3780,367,1,0,0,0,3781,3788,5,381,0,0,3782,3788,3,370,185,0,3783,
        3784,4,184,18,0,3784,3788,3,384,192,0,3785,3786,4,184,19,0,3786,
        3788,3,388,194,0,3787,3781,1,0,0,0,3787,3782,1,0,0,0,3787,3783,1,
        0,0,0,3787,3785,1,0,0,0,3788,369,1,0,0,0,3789,3793,5,382,0,0,3790,
        3791,4,185,20,0,3791,3793,5,371,0,0,3792,3789,1,0,0,0,3792,3790,
        1,0,0,0,3793,371,1,0,0,0,3794,3795,5,382,0,0,3795,373,1,0,0,0,3796,
        3798,4,187,21,0,3797,3799,5,354,0,0,3798,3797,1,0,0,0,3798,3799,
        1,0,0,0,3799,3800,1,0,0,0,3800,3840,5,376,0,0,3801,3803,4,187,22,
        0,3802,3804,5,354,0,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,3805,
        1,0,0,0,3805,3840,5,377,0,0,3806,3808,4,187,23,0,3807,3809,5,354,
        0,0,3808,3807,1,0,0,0,3808,3809,1,0,0,0,3809,3810,1,0,0,0,3810,3840,
        7,54,0,0,3811,3813,5,354,0,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,
        3813,3814,1,0,0,0,3814,3840,5,375,0,0,3815,3817,5,354,0,0,3816,3815,
        1,0,0,0,3816,3817,1,0,0,0,3817,3818,1,0,0,0,3818,3840,5,372,0,0,
        3819,3821,5,354,0,0,3820,3819,1,0,0,0,3820,3821,1,0,0,0,3821,3822,
        1,0,0,0,3822,3840,5,373,0,0,3823,3825,5,354,0,0,3824,3823,1,0,0,
        0,3824,3825,1,0,0,0,3825,3826,1,0,0,0,3826,3840,5,374,0,0,3827,3829,
        5,354,0,0,3828,3827,1,0,0,0,3828,3829,1,0,0,0,3829,3830,1,0,0,0,
        3830,3840,5,379,0,0,3831,3833,5,354,0,0,3832,3831,1,0,0,0,3832,3833,
        1,0,0,0,3833,3834,1,0,0,0,3834,3840,5,378,0,0,3835,3837,5,354,0,
        0,3836,3835,1,0,0,0,3836,3837,1,0,0,0,3837,3838,1,0,0,0,3838,3840,
        5,380,0,0,3839,3796,1,0,0,0,3839,3801,1,0,0,0,3839,3806,1,0,0,0,
        3839,3812,1,0,0,0,3839,3816,1,0,0,0,3839,3820,1,0,0,0,3839,3824,
        1,0,0,0,3839,3828,1,0,0,0,3839,3832,1,0,0,0,3839,3836,1,0,0,0,3840,
        375,1,0,0,0,3841,3842,5,312,0,0,3842,3853,3,316,158,0,3843,3853,
        3,46,23,0,3844,3853,3,312,156,0,3845,3846,7,55,0,0,3846,3847,5,193,
        0,0,3847,3853,5,194,0,0,3848,3849,5,262,0,0,3849,3853,3,324,162,
        0,3850,3851,5,95,0,0,3851,3853,5,82,0,0,3852,3841,1,0,0,0,3852,3843,
        1,0,0,0,3852,3844,1,0,0,0,3852,3845,1,0,0,0,3852,3848,1,0,0,0,3852,
        3850,1,0,0,0,3853,377,1,0,0,0,3854,3858,5,370,0,0,3855,3856,4,189,
        24,0,3856,3858,5,371,0,0,3857,3854,1,0,0,0,3857,3855,1,0,0,0,3858,
        379,1,0,0,0,3859,3862,3,378,189,0,3860,3862,5,194,0,0,3861,3859,
        1,0,0,0,3861,3860,1,0,0,0,3862,381,1,0,0,0,3863,3866,5,375,0,0,3864,
        3866,3,378,189,0,3865,3863,1,0,0,0,3865,3864,1,0,0,0,3866,383,1,
        0,0,0,3867,3868,7,56,0,0,3868,385,1,0,0,0,3869,3870,7,57,0,0,3870,
        387,1,0,0,0,3871,3872,7,58,0,0,3872,389,1,0,0,0,500,394,420,433,
        440,448,450,470,474,480,483,486,493,496,500,503,510,521,523,531,
        534,538,541,547,558,564,569,603,616,641,650,654,660,664,669,675,
        687,695,701,714,719,735,742,746,752,767,771,777,783,786,789,795,
        799,807,809,818,821,830,835,841,848,851,857,868,871,875,880,886,
        889,893,896,903,908,915,918,921,928,933,942,950,956,959,962,968,
        972,977,980,984,986,994,1002,1005,1010,1016,1022,1025,1029,1032,
        1036,1064,1067,1071,1077,1080,1083,1089,1097,1102,1108,1114,1117,
        1124,1131,1139,1156,1183,1186,1192,1201,1210,1218,1223,1228,1235,
        1241,1246,1254,1257,1264,1267,1276,1280,1284,1288,1295,1300,1312,
        1316,1323,1439,1447,1455,1464,1474,1478,1481,1487,1493,1511,1523,
        1528,1537,1545,1552,1554,1559,1564,1568,1573,1578,1583,1592,1597,
        1600,1605,1609,1614,1616,1620,1629,1637,1643,1654,1661,1670,1675,
        1678,1701,1703,1712,1719,1722,1729,1733,1739,1747,1754,1757,1765,
        1776,1787,1795,1801,1813,1820,1827,1839,1847,1853,1859,1862,1870,
        1879,1882,1891,1894,1903,1906,1915,1918,1921,1926,1928,1932,1944,
        1951,1958,1961,1963,1975,1979,1983,1989,1993,2001,2005,2008,2011,
        2014,2018,2022,2027,2031,2034,2037,2040,2044,2049,2053,2056,2059,
        2062,2064,2070,2077,2082,2085,2088,2092,2102,2106,2108,2111,2115,
        2121,2125,2136,2146,2150,2162,2174,2189,2194,2200,2212,2228,2233,
        2246,2251,2259,2265,2269,2272,2275,2282,2288,2297,2307,2322,2327,
        2329,2333,2342,2355,2360,2364,2372,2375,2379,2393,2406,2411,2415,
        2418,2422,2428,2431,2438,2450,2461,2474,2485,2490,2498,2503,2510,
        2519,2522,2527,2534,2537,2542,2548,2554,2559,2563,2569,2573,2576,
        2581,2584,2589,2593,2596,2599,2605,2610,2617,2620,2638,2640,2643,
        2654,2663,2670,2678,2685,2689,2692,2700,2708,2714,2722,2730,2737,
        2744,2746,2759,2765,2767,2777,2783,2785,2793,2797,2806,2809,2815,
        2819,2821,2830,2842,2844,2851,2858,2864,2870,2872,2879,2887,2895,
        2901,2906,2913,2919,2923,2925,2932,2941,2948,2958,2963,2967,2977,
        2984,2997,2999,3007,3009,3013,3021,3030,3036,3044,3049,3061,3066,
        3069,3075,3079,3084,3089,3094,3100,3121,3123,3134,3146,3158,3162,
        3171,3175,3193,3196,3204,3213,3222,3236,3242,3250,3261,3268,3271,
        3284,3289,3297,3301,3305,3317,3342,3349,3352,3367,3371,3384,3386,
        3396,3411,3413,3426,3430,3437,3442,3450,3455,3464,3497,3514,3518,
        3524,3530,3539,3543,3545,3552,3560,3568,3581,3588,3591,3598,3606,
        3614,3628,3633,3638,3641,3654,3674,3684,3687,3696,3699,3701,3704,
        3707,3725,3734,3741,3754,3761,3771,3774,3779,3787,3792,3798,3803,
        3808,3812,3816,3820,3824,3828,3832,3836,3839,3852,3857,3861,3865
    ]


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()
    
    # /**
    # * When false, INTERSECT is given the greater precedence over the other set
    # * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    # */
    # public boolean legacy_setops_precedence_enabled = false;
    legacy_setops_precedence_enabled = False
    # /**
    # * When false, a literal with an exponent would be converted into
    # * double type rather than decimal type.
    # */
    # public boolean legacy_exponent_literal_as_decimal_enabled = false;
    legacy_exponent_literal_as_decimal_enabled = False
    # /**
    # * When true, the behavior of keywords follows ANSI SQL standard.
    # */
    # public boolean SQL_standard_keyword_behavior = false;
    SQL_standard_keyword_behavior = False
    # /**
    # * When true, double quoted literals are identifiers rather than STRINGs.
    # */
    # public boolean double_quoted_identifiers = false;
    double_quoted_identifiers = False

    literalNames = [ "<INVALID>", "';'", "'('", "')'", "','", "'.'", "'['", 
                     "']'", "'ADD'", "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", 
                     "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", "'ANY_VALUE'", 
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BOTH'", 
                     "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", "'CACHE'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
                     "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", 
                     "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", 
                     "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                     "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPUTE'", 
                     "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
                     "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DAY'", "'DAYS'", "'DAYOFYEAR'", "'DATA'", "'DATE'", 
                     "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", 
                     "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", 
                     "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", "'DROP'", "'ELSE'", 
                     "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", 
                     "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
                     "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FOLLOWING'", 
                     "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
                     "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", 
                     "'X'", "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", 
                     "'IGNORE'", "'IMMEDIATE'", "'IMPORT'", "'IN'", "'INCLUDE'", 
                     "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", "'INTEGER'", 
                     "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
                     "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", 
                     "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", 
                     "'LONG'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", 
                     "'MICROSECOND'", "'MICROSECONDS'", "'MILLISECOND'", 
                     "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MONTH'", 
                     "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", 
                     "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", 
                     "<INVALID>", "'NULL'", "'NULLS'", "'NUMERIC'", "'OF'", 
                     "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", 
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
                     "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", 
                     "'RANGE'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", 
                     "'RESET'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", 
                     "<INVALID>", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", 
                     "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", 
                     "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
                     "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", 
                     "'TABLES'", "'TABLESAMPLE'", "'TARGET'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TIME'", "'TIMEDIFF'", 
                     "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
                     "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", 
                     "'EXECUTE'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", 
                     "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", 
                     "'USE'", "'USER'", "'USING'", "'VALUES'", "'VARCHAR'", 
                     "'VAR'", "'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", 
                     "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", 
                     "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", 
                     "'YEARS'", "'ZONE'", "<INVALID>", "'<=>'", "'<>'", 
                     "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
                     "'^'", "':'", "'::'", "'->'", "'=>'", "'/*+'", "'*/'", 
                     "'?'" ]

    symbolicNames = [ "<INVALID>", "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", 
                      "COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "ADD", 
                      "AFTER", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", 
                      "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", "AS", 
                      "ASC", "AT", "AUTHORIZATION", "BETWEEN", "BIGINT", 
                      "BINARY", "BOOLEAN", "BOTH", "BUCKET", "BUCKETS", 
                      "BY", "BYTE", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CATALOG", "CATALOGS", "CHANGE", "CHAR", "CHARACTER", 
                      "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", 
                      "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE", 
                      "CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DAY", "DAYS", "DAYOFYEAR", "DATA", 
                      "DATE", "DATABASE", "DATABASES", "DATEADD", "DATE_ADD", 
                      "DATEDIFF", "DATE_DIFF", "DBPROPERTIES", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFINED", "DELETE", "DELIMITED", 
                      "DESC", "DESCRIBE", "DFS", "DIRECTORIES", "DIRECTORY", 
                      "DISTINCT", "DISTRIBUTE", "DIV", "DOUBLE", "DROP", 
                      "ELSE", "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXCLUDE", "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", 
                      "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", 
                      "FILTER", "FILEFORMAT", "FIRST", "FLOAT", "FOLLOWING", 
                      "FOR", "FOREIGN", "FORMAT", "FORMATTED", "FROM", "FULL", 
                      "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT", 
                      "GROUP", "GROUPING", "HAVING", "BINARY_HEX", "HOUR", 
                      "HOURS", "IDENTIFIER_KW", "IF", "IGNORE", "IMMEDIATE", 
                      "IMPORT", "IN", "INCLUDE", "INDEX", "INDEXES", "INNER", 
                      "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INT", "INTEGER", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "ILIKE", "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", 
                      "LOCATION", "LOCK", "LOCKS", "LOGICAL", "LONG", "MACRO", 
                      "MAP", "MATCHED", "MERGE", "MICROSECOND", "MICROSECONDS", 
                      "MILLISECOND", "MILLISECONDS", "MINUTE", "MINUTES", 
                      "MONTH", "MONTHS", "MSCK", "NAME", "NAMESPACE", "NAMESPACES", 
                      "NANOSECOND", "NANOSECONDS", "NATURAL", "NO", "NOT", 
                      "NULL", "NULLS", "NUMERIC", "OF", "OFFSET", "ON", 
                      "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", "OUT", 
                      "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", 
                      "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENTLIT", 
                      "PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", 
                      "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", "QUERY", 
                      "RANGE", "REAL", "RECORDREADER", "RECORDWRITER", "RECOVER", 
                      "REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", 
                      "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", 
                      "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", 
                      "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", "SCHEMA", 
                      "SCHEMAS", "SELECT", "SEMI", "SEPARATED", "SERDE", 
                      "SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", 
                      "SETS", "SHORT", "SHOW", "SINGLE", "SKEWED", "SMALLINT", 
                      "SOME", "SORT", "SORTED", "SOURCE", "START", "STATISTICS", 
                      "STORED", "STRATIFY", "STRING", "STRUCT", "SUBSTR", 
                      "SUBSTRING", "SYNC", "SYSTEM_TIME", "SYSTEM_VERSION", 
                      "TABLE", "TABLES", "TABLESAMPLE", "TARGET", "TBLPROPERTIES", 
                      "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", 
                      "TIMESTAMP", "TIMESTAMP_LTZ", "TIMESTAMP_NTZ", "TIMESTAMPADD", 
                      "TIMESTAMPDIFF", "TINYINT", "TO", "EXECUTE", "TOUCH", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", 
                      "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", 
                      "UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", 
                      "UNLOCK", "UNPIVOT", "UNSET", "UPDATE", "USE", "USER", 
                      "USING", "VALUES", "VARCHAR", "VAR", "VARIABLE", "VARIANT", 
                      "VERSION", "VIEW", "VIEWS", "VOID", "WEEK", "WEEKS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "WITHIN", "YEAR", 
                      "YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", 
                      "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "COLON", "DOUBLE_COLON", "ARROW", "FAT_ARROW", 
                      "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
                      "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleMultipartIdentifier = 3
    RULE_singleFunctionIdentifier = 4
    RULE_singleDataType = 5
    RULE_singleTableSchema = 6
    RULE_statement = 7
    RULE_executeImmediate = 8
    RULE_executeImmediateUsing = 9
    RULE_executeImmediateQueryParam = 10
    RULE_executeImmediateArgument = 11
    RULE_executeImmediateArgumentSeq = 12
    RULE_timezone = 13
    RULE_configKey = 14
    RULE_configValue = 15
    RULE_unsupportedHiveNativeCommands = 16
    RULE_createTableHeader = 17
    RULE_replaceTableHeader = 18
    RULE_clusterBySpec = 19
    RULE_bucketSpec = 20
    RULE_skewSpec = 21
    RULE_locationSpec = 22
    RULE_commentSpec = 23
    RULE_query = 24
    RULE_insertInto = 25
    RULE_partitionSpecLocation = 26
    RULE_partitionSpec = 27
    RULE_partitionVal = 28
    RULE_namespace = 29
    RULE_namespaces = 30
    RULE_describeFuncName = 31
    RULE_describeColName = 32
    RULE_ctes = 33
    RULE_namedQuery = 34
    RULE_tableProvider = 35
    RULE_createTableClauses = 36
    RULE_propertyList = 37
    RULE_property = 38
    RULE_propertyKey = 39
    RULE_propertyValue = 40
    RULE_expressionPropertyList = 41
    RULE_expressionProperty = 42
    RULE_constantList = 43
    RULE_nestedConstantList = 44
    RULE_createFileFormat = 45
    RULE_fileFormat = 46
    RULE_storageHandler = 47
    RULE_resource = 48
    RULE_dmlStatementNoWith = 49
    RULE_identifierReference = 50
    RULE_queryOrganization = 51
    RULE_multiInsertQueryBody = 52
    RULE_queryTerm = 53
    RULE_queryPrimary = 54
    RULE_sortItem = 55
    RULE_fromStatement = 56
    RULE_fromStatementBody = 57
    RULE_querySpecification = 58
    RULE_transformClause = 59
    RULE_selectClause = 60
    RULE_setClause = 61
    RULE_matchedClause = 62
    RULE_notMatchedClause = 63
    RULE_notMatchedBySourceClause = 64
    RULE_matchedAction = 65
    RULE_notMatchedAction = 66
    RULE_notMatchedBySourceAction = 67
    RULE_exceptClause = 68
    RULE_assignmentList = 69
    RULE_assignment = 70
    RULE_whereClause = 71
    RULE_havingClause = 72
    RULE_hint = 73
    RULE_hintStatement = 74
    RULE_fromClause = 75
    RULE_temporalClause = 76
    RULE_aggregationClause = 77
    RULE_groupByClause = 78
    RULE_groupingAnalytics = 79
    RULE_groupingElement = 80
    RULE_groupingSet = 81
    RULE_pivotClause = 82
    RULE_pivotColumn = 83
    RULE_pivotValue = 84
    RULE_unpivotClause = 85
    RULE_unpivotNullClause = 86
    RULE_unpivotOperator = 87
    RULE_unpivotSingleValueColumnClause = 88
    RULE_unpivotMultiValueColumnClause = 89
    RULE_unpivotColumnSet = 90
    RULE_unpivotValueColumn = 91
    RULE_unpivotNameColumn = 92
    RULE_unpivotColumnAndAlias = 93
    RULE_unpivotColumn = 94
    RULE_unpivotAlias = 95
    RULE_lateralView = 96
    RULE_setQuantifier = 97
    RULE_relation = 98
    RULE_relationExtension = 99
    RULE_joinRelation = 100
    RULE_joinType = 101
    RULE_joinCriteria = 102
    RULE_sample = 103
    RULE_sampleMethod = 104
    RULE_identifierList = 105
    RULE_identifierSeq = 106
    RULE_orderedIdentifierList = 107
    RULE_orderedIdentifier = 108
    RULE_identifierCommentList = 109
    RULE_identifierComment = 110
    RULE_relationPrimary = 111
    RULE_inlineTable = 112
    RULE_functionTableSubqueryArgument = 113
    RULE_tableArgumentPartitioning = 114
    RULE_functionTableNamedArgumentExpression = 115
    RULE_functionTableReferenceArgument = 116
    RULE_functionTableArgument = 117
    RULE_functionTable = 118
    RULE_tableAlias = 119
    RULE_rowFormat = 120
    RULE_multipartIdentifierList = 121
    RULE_multipartIdentifier = 122
    RULE_multipartIdentifierPropertyList = 123
    RULE_multipartIdentifierProperty = 124
    RULE_tableIdentifier = 125
    RULE_functionIdentifier = 126
    RULE_namedExpression = 127
    RULE_namedExpressionSeq = 128
    RULE_partitionFieldList = 129
    RULE_partitionField = 130
    RULE_transform = 131
    RULE_transformArgument = 132
    RULE_expression = 133
    RULE_namedArgumentExpression = 134
    RULE_functionArgument = 135
    RULE_expressionSeq = 136
    RULE_booleanExpression = 137
    RULE_predicate = 138
    RULE_valueExpression = 139
    RULE_datetimeUnit = 140
    RULE_primaryExpression = 141
    RULE_literalType = 142
    RULE_constant = 143
    RULE_comparisonOperator = 144
    RULE_arithmeticOperator = 145
    RULE_predicateOperator = 146
    RULE_booleanValue = 147
    RULE_interval = 148
    RULE_errorCapturingMultiUnitsInterval = 149
    RULE_multiUnitsInterval = 150
    RULE_errorCapturingUnitToUnitInterval = 151
    RULE_unitToUnitInterval = 152
    RULE_intervalValue = 153
    RULE_unitInMultiUnits = 154
    RULE_unitInUnitToUnit = 155
    RULE_colPosition = 156
    RULE_type = 157
    RULE_dataType = 158
    RULE_qualifiedColTypeWithPositionList = 159
    RULE_qualifiedColTypeWithPosition = 160
    RULE_colDefinitionDescriptorWithPosition = 161
    RULE_defaultExpression = 162
    RULE_variableDefaultExpression = 163
    RULE_colTypeList = 164
    RULE_colType = 165
    RULE_createOrReplaceTableColTypeList = 166
    RULE_createOrReplaceTableColType = 167
    RULE_colDefinitionOption = 168
    RULE_generationExpression = 169
    RULE_complexColTypeList = 170
    RULE_complexColType = 171
    RULE_whenClause = 172
    RULE_windowClause = 173
    RULE_namedWindow = 174
    RULE_windowSpec = 175
    RULE_windowFrame = 176
    RULE_frameBound = 177
    RULE_qualifiedNameList = 178
    RULE_functionName = 179
    RULE_qualifiedName = 180
    RULE_errorCapturingIdentifier = 181
    RULE_errorCapturingIdentifierExtra = 182
    RULE_identifier = 183
    RULE_strictIdentifier = 184
    RULE_quotedIdentifier = 185
    RULE_backQuotedIdentifier = 186
    RULE_number = 187
    RULE_alterColumnAction = 188
    RULE_stringLit = 189
    RULE_comment = 190
    RULE_version = 191
    RULE_ansiNonReserved = 192
    RULE_strictNonReserved = 193
    RULE_nonReserved = 194

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleMultipartIdentifier", "singleFunctionIdentifier", 
                   "singleDataType", "singleTableSchema", "statement", "executeImmediate", 
                   "executeImmediateUsing", "executeImmediateQueryParam", 
                   "executeImmediateArgument", "executeImmediateArgumentSeq", 
                   "timezone", "configKey", "configValue", "unsupportedHiveNativeCommands", 
                   "createTableHeader", "replaceTableHeader", "clusterBySpec", 
                   "bucketSpec", "skewSpec", "locationSpec", "commentSpec", 
                   "query", "insertInto", "partitionSpecLocation", "partitionSpec", 
                   "partitionVal", "namespace", "namespaces", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "propertyList", "property", "propertyKey", 
                   "propertyValue", "expressionPropertyList", "expressionProperty", 
                   "constantList", "nestedConstantList", "createFileFormat", 
                   "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", 
                   "identifierReference", "queryOrganization", "multiInsertQueryBody", 
                   "queryTerm", "queryPrimary", "sortItem", "fromStatement", 
                   "fromStatementBody", "querySpecification", "transformClause", 
                   "selectClause", "setClause", "matchedClause", "notMatchedClause", 
                   "notMatchedBySourceClause", "matchedAction", "notMatchedAction", 
                   "notMatchedBySourceAction", "exceptClause", "assignmentList", 
                   "assignment", "whereClause", "havingClause", "hint", 
                   "hintStatement", "fromClause", "temporalClause", "aggregationClause", 
                   "groupByClause", "groupingAnalytics", "groupingElement", 
                   "groupingSet", "pivotClause", "pivotColumn", "pivotValue", 
                   "unpivotClause", "unpivotNullClause", "unpivotOperator", 
                   "unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", 
                   "unpivotColumnSet", "unpivotValueColumn", "unpivotNameColumn", 
                   "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
                   "lateralView", "setQuantifier", "relation", "relationExtension", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTableSubqueryArgument", 
                   "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
                   "functionTableReferenceArgument", "functionTableArgument", 
                   "functionTable", "tableAlias", "rowFormat", "multipartIdentifierList", 
                   "multipartIdentifier", "multipartIdentifierPropertyList", 
                   "multipartIdentifierProperty", "tableIdentifier", "functionIdentifier", 
                   "namedExpression", "namedExpressionSeq", "partitionFieldList", 
                   "partitionField", "transform", "transformArgument", "expression", 
                   "namedArgumentExpression", "functionArgument", "expressionSeq", 
                   "booleanExpression", "predicate", "valueExpression", 
                   "datetimeUnit", "primaryExpression", "literalType", "constant", 
                   "comparisonOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "unitInMultiUnits", 
                   "unitInUnitToUnit", "colPosition", "type", "dataType", 
                   "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", 
                   "colDefinitionDescriptorWithPosition", "defaultExpression", 
                   "variableDefaultExpression", "colTypeList", "colType", 
                   "createOrReplaceTableColTypeList", "createOrReplaceTableColType", 
                   "colDefinitionOption", "generationExpression", "complexColTypeList", 
                   "complexColType", "whenClause", "windowClause", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedNameList", 
                   "functionName", "qualifiedName", "errorCapturingIdentifier", 
                   "errorCapturingIdentifierExtra", "identifier", "strictIdentifier", 
                   "quotedIdentifier", "backQuotedIdentifier", "number", 
                   "alterColumnAction", "stringLit", "comment", "version", 
                   "ansiNonReserved", "strictNonReserved", "nonReserved" ]

    EOF = Token.EOF
    SEMICOLON=1
    LEFT_PAREN=2
    RIGHT_PAREN=3
    COMMA=4
    DOT=5
    LEFT_BRACKET=6
    RIGHT_BRACKET=7
    ADD=8
    AFTER=9
    ALL=10
    ALTER=11
    ALWAYS=12
    ANALYZE=13
    AND=14
    ANTI=15
    ANY=16
    ANY_VALUE=17
    ARCHIVE=18
    ARRAY=19
    AS=20
    ASC=21
    AT=22
    AUTHORIZATION=23
    BETWEEN=24
    BIGINT=25
    BINARY=26
    BOOLEAN=27
    BOTH=28
    BUCKET=29
    BUCKETS=30
    BY=31
    BYTE=32
    CACHE=33
    CASCADE=34
    CASE=35
    CAST=36
    CATALOG=37
    CATALOGS=38
    CHANGE=39
    CHAR=40
    CHARACTER=41
    CHECK=42
    CLEAR=43
    CLUSTER=44
    CLUSTERED=45
    CODEGEN=46
    COLLATE=47
    COLLECTION=48
    COLUMN=49
    COLUMNS=50
    COMMENT=51
    COMMIT=52
    COMPACT=53
    COMPACTIONS=54
    COMPUTE=55
    CONCATENATE=56
    CONSTRAINT=57
    COST=58
    CREATE=59
    CROSS=60
    CUBE=61
    CURRENT=62
    CURRENT_DATE=63
    CURRENT_TIME=64
    CURRENT_TIMESTAMP=65
    CURRENT_USER=66
    DAY=67
    DAYS=68
    DAYOFYEAR=69
    DATA=70
    DATE=71
    DATABASE=72
    DATABASES=73
    DATEADD=74
    DATE_ADD=75
    DATEDIFF=76
    DATE_DIFF=77
    DBPROPERTIES=78
    DEC=79
    DECIMAL=80
    DECLARE=81
    DEFAULT=82
    DEFINED=83
    DELETE=84
    DELIMITED=85
    DESC=86
    DESCRIBE=87
    DFS=88
    DIRECTORIES=89
    DIRECTORY=90
    DISTINCT=91
    DISTRIBUTE=92
    DIV=93
    DOUBLE=94
    DROP=95
    ELSE=96
    END=97
    ESCAPE=98
    ESCAPED=99
    EXCEPT=100
    EXCHANGE=101
    EXCLUDE=102
    EXISTS=103
    EXPLAIN=104
    EXPORT=105
    EXTENDED=106
    EXTERNAL=107
    EXTRACT=108
    FALSE=109
    FETCH=110
    FIELDS=111
    FILTER=112
    FILEFORMAT=113
    FIRST=114
    FLOAT=115
    FOLLOWING=116
    FOR=117
    FOREIGN=118
    FORMAT=119
    FORMATTED=120
    FROM=121
    FULL=122
    FUNCTION=123
    FUNCTIONS=124
    GENERATED=125
    GLOBAL=126
    GRANT=127
    GROUP=128
    GROUPING=129
    HAVING=130
    BINARY_HEX=131
    HOUR=132
    HOURS=133
    IDENTIFIER_KW=134
    IF=135
    IGNORE=136
    IMMEDIATE=137
    IMPORT=138
    IN=139
    INCLUDE=140
    INDEX=141
    INDEXES=142
    INNER=143
    INPATH=144
    INPUTFORMAT=145
    INSERT=146
    INTERSECT=147
    INTERVAL=148
    INT=149
    INTEGER=150
    INTO=151
    IS=152
    ITEMS=153
    JOIN=154
    KEYS=155
    LAST=156
    LATERAL=157
    LAZY=158
    LEADING=159
    LEFT=160
    LIKE=161
    ILIKE=162
    LIMIT=163
    LINES=164
    LIST=165
    LOAD=166
    LOCAL=167
    LOCATION=168
    LOCK=169
    LOCKS=170
    LOGICAL=171
    LONG=172
    MACRO=173
    MAP=174
    MATCHED=175
    MERGE=176
    MICROSECOND=177
    MICROSECONDS=178
    MILLISECOND=179
    MILLISECONDS=180
    MINUTE=181
    MINUTES=182
    MONTH=183
    MONTHS=184
    MSCK=185
    NAME=186
    NAMESPACE=187
    NAMESPACES=188
    NANOSECOND=189
    NANOSECONDS=190
    NATURAL=191
    NO=192
    NOT=193
    NULL=194
    NULLS=195
    NUMERIC=196
    OF=197
    OFFSET=198
    ON=199
    ONLY=200
    OPTION=201
    OPTIONS=202
    OR=203
    ORDER=204
    OUT=205
    OUTER=206
    OUTPUTFORMAT=207
    OVER=208
    OVERLAPS=209
    OVERLAY=210
    OVERWRITE=211
    PARTITION=212
    PARTITIONED=213
    PARTITIONS=214
    PERCENTILE_CONT=215
    PERCENTILE_DISC=216
    PERCENTLIT=217
    PIVOT=218
    PLACING=219
    POSITION=220
    PRECEDING=221
    PRIMARY=222
    PRINCIPALS=223
    PROPERTIES=224
    PURGE=225
    QUARTER=226
    QUERY=227
    RANGE=228
    REAL=229
    RECORDREADER=230
    RECORDWRITER=231
    RECOVER=232
    REDUCE=233
    REFERENCES=234
    REFRESH=235
    RENAME=236
    REPAIR=237
    REPEATABLE=238
    REPLACE=239
    RESET=240
    RESPECT=241
    RESTRICT=242
    REVOKE=243
    RIGHT=244
    RLIKE=245
    ROLE=246
    ROLES=247
    ROLLBACK=248
    ROLLUP=249
    ROW=250
    ROWS=251
    SECOND=252
    SECONDS=253
    SCHEMA=254
    SCHEMAS=255
    SELECT=256
    SEMI=257
    SEPARATED=258
    SERDE=259
    SERDEPROPERTIES=260
    SESSION_USER=261
    SET=262
    SETMINUS=263
    SETS=264
    SHORT=265
    SHOW=266
    SINGLE=267
    SKEWED=268
    SMALLINT=269
    SOME=270
    SORT=271
    SORTED=272
    SOURCE=273
    START=274
    STATISTICS=275
    STORED=276
    STRATIFY=277
    STRING=278
    STRUCT=279
    SUBSTR=280
    SUBSTRING=281
    SYNC=282
    SYSTEM_TIME=283
    SYSTEM_VERSION=284
    TABLE=285
    TABLES=286
    TABLESAMPLE=287
    TARGET=288
    TBLPROPERTIES=289
    TEMPORARY=290
    TERMINATED=291
    THEN=292
    TIME=293
    TIMEDIFF=294
    TIMESTAMP=295
    TIMESTAMP_LTZ=296
    TIMESTAMP_NTZ=297
    TIMESTAMPADD=298
    TIMESTAMPDIFF=299
    TINYINT=300
    TO=301
    EXECUTE=302
    TOUCH=303
    TRAILING=304
    TRANSACTION=305
    TRANSACTIONS=306
    TRANSFORM=307
    TRIM=308
    TRUE=309
    TRUNCATE=310
    TRY_CAST=311
    TYPE=312
    UNARCHIVE=313
    UNBOUNDED=314
    UNCACHE=315
    UNION=316
    UNIQUE=317
    UNKNOWN=318
    UNLOCK=319
    UNPIVOT=320
    UNSET=321
    UPDATE=322
    USE=323
    USER=324
    USING=325
    VALUES=326
    VARCHAR=327
    VAR=328
    VARIABLE=329
    VARIANT=330
    VERSION=331
    VIEW=332
    VIEWS=333
    VOID=334
    WEEK=335
    WEEKS=336
    WHEN=337
    WHERE=338
    WINDOW=339
    WITH=340
    WITHIN=341
    YEAR=342
    YEARS=343
    ZONE=344
    EQ=345
    NSEQ=346
    NEQ=347
    NEQJ=348
    LT=349
    LTE=350
    GT=351
    GTE=352
    PLUS=353
    MINUS=354
    ASTERISK=355
    SLASH=356
    PERCENT=357
    TILDE=358
    AMPERSAND=359
    PIPE=360
    CONCAT_PIPE=361
    HAT=362
    COLON=363
    DOUBLE_COLON=364
    ARROW=365
    FAT_ARROW=366
    HENT_START=367
    HENT_END=368
    QUESTION=369
    STRING_LITERAL=370
    DOUBLEQUOTED_STRING=371
    BIGINT_LITERAL=372
    SMALLINT_LITERAL=373
    TINYINT_LITERAL=374
    INTEGER_VALUE=375
    EXPONENT_VALUE=376
    DECIMAL_VALUE=377
    FLOAT_LITERAL=378
    DOUBLE_LITERAL=379
    BIGDECIMAL_LITERAL=380
    IDENTIFIER=381
    BACKQUOTED_IDENTIFIER=382
    SIMPLE_COMMENT=383
    BRACKETED_COMMENT=384
    WS=385
    UNRECOGNIZED=386
    
    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None






    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.statement()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 391
                self.match(SqlBaseParser.SEMICOLON)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.namedExpression()
            self.state = 400
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.tableIdentifier()
            self.state = 403
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = SqlBaseParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.multipartIdentifier()
            self.state = 406
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.functionIdentifier()
            self.state = 409
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.dataType()
            self.state = 412
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.colTypeList()
            self.state = 415
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # IdentifierReferenceContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class SetCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCatalog" ):
                listener.enterSetCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCatalog" ):
                listener.exitSetCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCatalog" ):
                return visitor.visitSetCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DropIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class CreateVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def variableDefaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.VariableDefaultExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateVariable" ):
                listener.enterCreateVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateVariable" ):
                listener.exitCreateVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateVariable" ):
                return visitor.visitCreateVariable(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def namespaces(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespacesContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.ReplaceTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTables" ):
                listener.enterAnalyzeTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTables" ):
                listener.exitAnalyzeTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzeTables" ):
                return visitor.visitAnalyzeTables(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class SetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def configValue(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuotedConfiguration" ):
                listener.enterSetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuotedConfiguration" ):
                listener.exitSetQuotedConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuotedConfiguration" ):
                return visitor.visitSetQuotedConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # StringLitContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ResetQuotedConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetQuotedConfiguration" ):
                listener.enterResetQuotedConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetQuotedConfiguration" ):
                listener.exitResetQuotedConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetQuotedConfiguration" ):
                return visitor.visitResetQuotedConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def createOrReplaceTableColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.from_ = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)

        def timezone(self):
            return self.getTypedRuleContext(SqlBaseParser.TimezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def configKey(self):
            return self.getTypedRuleContext(SqlBaseParser.ConfigKeyContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableExtendedContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # IdentifierReferenceContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableExtended" ):
                listener.enterShowTableExtended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableExtended" ):
                listener.exitShowTableExtended(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTableExtended" ):
                return visitor.visitShowTableExtended(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class RefreshFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshFunction" ):
                listener.enterRefreshFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshFunction" ):
                listener.exitRefreshFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshFunction" ):
                return visitor.visitRefreshFunction(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def comment(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class SetVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)
        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetVariable" ):
                return visitor.visitSetVariable(self)
            else:
                return visitor.visitChildren(self)


    class CreateIndexContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.indexType = None # IdentifierContext
            self.columns = None # MultipartIdentifierPropertyListContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def multipartIdentifierPropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)


    class UseNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseNamespace" ):
                listener.enterUseNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseNamespace" ):
                listener.exitUseNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseNamespace" ):
                return visitor.visitUseNamespace(self)
            else:
                return visitor.visitChildren(self)


    class DropVariableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropVariable" ):
                listener.enterDropVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropVariable" ):
                listener.exitDropVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropVariable" ):
                return visitor.visitDropVariable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DBPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PROPERTIES)
            else:
                return self.getToken(SqlBaseParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # IdentifierReferenceContext
            self.key = None # PropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class VisitExecuteImmediateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def executeImmediate(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisitExecuteImmediate" ):
                listener.enterVisitExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisitExecuteImmediate" ):
                listener.exitVisitExecuteImmediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisitExecuteImmediate" ):
                return visitor.visitVisitExecuteImmediate(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # IdentifierReferenceContext
            self.legacy = None # MultipartIdentifierContext
            self.pattern = None # StringLitContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.VisitExecuteImmediateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.executeImmediate()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==340:
                    self.state = 419
                    self.ctes()


                self.state = 422
                self.dmlStatementNoWith()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 423
                self.match(SqlBaseParser.USE)
                self.state = 424
                self.identifierReference()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.UseNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 425
                self.match(SqlBaseParser.USE)
                self.state = 426
                self.namespace()
                self.state = 427
                self.identifierReference()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SetCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 429
                self.match(SqlBaseParser.SET)
                self.state = 430
                self.match(SqlBaseParser.CATALOG)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 431
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 432
                    self.stringLit()
                    pass


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 435
                self.match(SqlBaseParser.CREATE)
                self.state = 436
                self.namespace()
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 437
                    self.match(SqlBaseParser.IF)
                    self.state = 438
                    self.match(SqlBaseParser.NOT)
                    self.state = 439
                    self.match(SqlBaseParser.EXISTS)


                self.state = 442
                self.identifierReference()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51 or _la==168 or _la==340:
                    self.state = 448
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51]:
                        self.state = 443
                        self.commentSpec()
                        pass
                    elif token in [168]:
                        self.state = 444
                        self.locationSpec()
                        pass
                    elif token in [340]:
                        self.state = 445
                        self.match(SqlBaseParser.WITH)
                        self.state = 446
                        _la = self._input.LA(1)
                        if not(_la==78 or _la==224):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 447
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = SqlBaseParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 453
                self.match(SqlBaseParser.ALTER)
                self.state = 454
                self.namespace()
                self.state = 455
                self.identifierReference()
                self.state = 456
                self.match(SqlBaseParser.SET)
                self.state = 457
                _la = self._input.LA(1)
                if not(_la==78 or _la==224):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 458
                self.propertyList()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 460
                self.match(SqlBaseParser.ALTER)
                self.state = 461
                self.namespace()
                self.state = 462
                self.identifierReference()
                self.state = 463
                self.match(SqlBaseParser.SET)
                self.state = 464
                self.locationSpec()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 466
                self.match(SqlBaseParser.DROP)
                self.state = 467
                self.namespace()
                self.state = 470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 468
                    self.match(SqlBaseParser.IF)
                    self.state = 469
                    self.match(SqlBaseParser.EXISTS)


                self.state = 472
                self.identifierReference()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==242:
                    self.state = 473
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==242):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 476
                self.match(SqlBaseParser.SHOW)
                self.state = 477
                self.namespaces()
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 478
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 479
                    self.multipartIdentifier()


                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 483
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 482
                        self.match(SqlBaseParser.LIKE)


                    self.state = 485
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 488
                self.createTableHeader()
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 489
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 490
                    self.createOrReplaceTableColTypeList()
                    self.state = 491
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 495
                    self.tableProvider()


                self.state = 498
                self.createTableClauses()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==20 or _la==121 or _la==174 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 4503599635759105) != 0) or _la==326 or _la==340:
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 499
                        self.match(SqlBaseParser.AS)


                    self.state = 502
                    self.query()


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 505
                self.match(SqlBaseParser.CREATE)
                self.state = 506
                self.match(SqlBaseParser.TABLE)
                self.state = 510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(SqlBaseParser.IF)
                    self.state = 508
                    self.match(SqlBaseParser.NOT)
                    self.state = 509
                    self.match(SqlBaseParser.EXISTS)


                self.state = 512
                localctx.target = self.tableIdentifier()
                self.state = 513
                self.match(SqlBaseParser.LIKE)
                self.state = 514
                localctx.source = self.tableIdentifier()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==168 or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & 549822922753) != 0) or _la==325:
                    self.state = 521
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [325]:
                        self.state = 515
                        self.tableProvider()
                        pass
                    elif token in [250]:
                        self.state = 516
                        self.rowFormat()
                        pass
                    elif token in [276]:
                        self.state = 517
                        self.createFileFormat()
                        pass
                    elif token in [168]:
                        self.state = 518
                        self.locationSpec()
                        pass
                    elif token in [289]:
                        self.state = 519
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 520
                        localctx.tableProps = self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 526
                self.replaceTableHeader()
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 528
                    self.createOrReplaceTableColTypeList()
                    self.state = 529
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 533
                    self.tableProvider()


                self.state = 536
                self.createTableClauses()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==20 or _la==121 or _la==174 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 4503599635759105) != 0) or _la==326 or _la==340:
                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 537
                        self.match(SqlBaseParser.AS)


                    self.state = 540
                    self.query()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 543
                self.match(SqlBaseParser.ANALYZE)
                self.state = 544
                self.match(SqlBaseParser.TABLE)
                self.state = 545
                self.identifierReference()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 546
                    self.partitionSpec()


                self.state = 549
                self.match(SqlBaseParser.COMPUTE)
                self.state = 550
                self.match(SqlBaseParser.STATISTICS)
                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.identifier()

                elif la_ == 2:
                    self.state = 552
                    self.match(SqlBaseParser.FOR)
                    self.state = 553
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 554
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 555
                    self.match(SqlBaseParser.FOR)
                    self.state = 556
                    self.match(SqlBaseParser.ALL)
                    self.state = 557
                    self.match(SqlBaseParser.COLUMNS)


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AnalyzeTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 560
                self.match(SqlBaseParser.ANALYZE)
                self.state = 561
                self.match(SqlBaseParser.TABLES)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121 or _la==139:
                    self.state = 562
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 563
                    self.identifierReference()


                self.state = 566
                self.match(SqlBaseParser.COMPUTE)
                self.state = 567
                self.match(SqlBaseParser.STATISTICS)
                self.state = 569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 568
                    self.identifier()


                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 571
                self.match(SqlBaseParser.ALTER)
                self.state = 572
                self.match(SqlBaseParser.TABLE)
                self.state = 573
                self.identifierReference()
                self.state = 574
                self.match(SqlBaseParser.ADD)
                self.state = 575
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 576
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 578
                self.match(SqlBaseParser.ALTER)
                self.state = 579
                self.match(SqlBaseParser.TABLE)
                self.state = 580
                self.identifierReference()
                self.state = 581
                self.match(SqlBaseParser.ADD)
                self.state = 582
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 583
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 584
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 585
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 587
                self.match(SqlBaseParser.ALTER)
                self.state = 588
                self.match(SqlBaseParser.TABLE)
                self.state = 589
                localctx.table = self.identifierReference()
                self.state = 590
                self.match(SqlBaseParser.RENAME)
                self.state = 591
                self.match(SqlBaseParser.COLUMN)
                self.state = 592
                localctx.from_ = self.multipartIdentifier()
                self.state = 593
                self.match(SqlBaseParser.TO)
                self.state = 594
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 596
                self.match(SqlBaseParser.ALTER)
                self.state = 597
                self.match(SqlBaseParser.TABLE)
                self.state = 598
                self.identifierReference()
                self.state = 599
                self.match(SqlBaseParser.DROP)
                self.state = 600
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 601
                    self.match(SqlBaseParser.IF)
                    self.state = 602
                    self.match(SqlBaseParser.EXISTS)


                self.state = 605
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 606
                localctx.columns = self.multipartIdentifierList()
                self.state = 607
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 609
                self.match(SqlBaseParser.ALTER)
                self.state = 610
                self.match(SqlBaseParser.TABLE)
                self.state = 611
                self.identifierReference()
                self.state = 612
                self.match(SqlBaseParser.DROP)
                self.state = 613
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.match(SqlBaseParser.IF)
                    self.state = 615
                    self.match(SqlBaseParser.EXISTS)


                self.state = 618
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 620
                self.match(SqlBaseParser.ALTER)
                self.state = 621
                _la = self._input.LA(1)
                if not(_la==285 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 622
                localctx.from_ = self.identifierReference()
                self.state = 623
                self.match(SqlBaseParser.RENAME)
                self.state = 624
                self.match(SqlBaseParser.TO)
                self.state = 625
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 627
                self.match(SqlBaseParser.ALTER)
                self.state = 628
                _la = self._input.LA(1)
                if not(_la==285 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 629
                self.identifierReference()
                self.state = 630
                self.match(SqlBaseParser.SET)
                self.state = 631
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 632
                self.propertyList()
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 634
                self.match(SqlBaseParser.ALTER)
                self.state = 635
                _la = self._input.LA(1)
                if not(_la==285 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 636
                self.identifierReference()
                self.state = 637
                self.match(SqlBaseParser.UNSET)
                self.state = 638
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 639
                    self.match(SqlBaseParser.IF)
                    self.state = 640
                    self.match(SqlBaseParser.EXISTS)


                self.state = 643
                self.propertyList()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 645
                self.match(SqlBaseParser.ALTER)
                self.state = 646
                self.match(SqlBaseParser.TABLE)
                self.state = 647
                localctx.table = self.identifierReference()
                self.state = 648
                _la = self._input.LA(1)
                if not(_la==11 or _la==39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 649
                    self.match(SqlBaseParser.COLUMN)


                self.state = 652
                localctx.column = self.multipartIdentifier()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==51 or _la==95 or _la==114 or _la==262 or _la==312:
                    self.state = 653
                    self.alterColumnAction()


                pass

            elif la_ == 26:
                localctx = SqlBaseParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 656
                self.match(SqlBaseParser.ALTER)
                self.state = 657
                self.match(SqlBaseParser.TABLE)
                self.state = 658
                localctx.table = self.identifierReference()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 659
                    self.partitionSpec()


                self.state = 662
                self.match(SqlBaseParser.CHANGE)
                self.state = 664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 663
                    self.match(SqlBaseParser.COLUMN)


                self.state = 666
                localctx.colName = self.multipartIdentifier()
                self.state = 667
                self.colType()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==114:
                    self.state = 668
                    self.colPosition()


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 671
                self.match(SqlBaseParser.ALTER)
                self.state = 672
                self.match(SqlBaseParser.TABLE)
                self.state = 673
                localctx.table = self.identifierReference()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 674
                    self.partitionSpec()


                self.state = 677
                self.match(SqlBaseParser.REPLACE)
                self.state = 678
                self.match(SqlBaseParser.COLUMNS)
                self.state = 679
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 680
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 681
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 683
                self.match(SqlBaseParser.ALTER)
                self.state = 684
                self.match(SqlBaseParser.TABLE)
                self.state = 685
                self.identifierReference()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 686
                    self.partitionSpec()


                self.state = 689
                self.match(SqlBaseParser.SET)
                self.state = 690
                self.match(SqlBaseParser.SERDE)
                self.state = 691
                self.stringLit()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==340:
                    self.state = 692
                    self.match(SqlBaseParser.WITH)
                    self.state = 693
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 694
                    self.propertyList()


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 697
                self.match(SqlBaseParser.ALTER)
                self.state = 698
                self.match(SqlBaseParser.TABLE)
                self.state = 699
                self.identifierReference()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 700
                    self.partitionSpec()


                self.state = 703
                self.match(SqlBaseParser.SET)
                self.state = 704
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 705
                self.propertyList()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 707
                self.match(SqlBaseParser.ALTER)
                self.state = 708
                _la = self._input.LA(1)
                if not(_la==285 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 709
                self.identifierReference()
                self.state = 710
                self.match(SqlBaseParser.ADD)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 711
                    self.match(SqlBaseParser.IF)
                    self.state = 712
                    self.match(SqlBaseParser.NOT)
                    self.state = 713
                    self.match(SqlBaseParser.EXISTS)


                self.state = 717 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 716
                    self.partitionSpecLocation()
                    self.state = 719 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==212):
                        break

                pass

            elif la_ == 31:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 721
                self.match(SqlBaseParser.ALTER)
                self.state = 722
                self.match(SqlBaseParser.TABLE)
                self.state = 723
                self.identifierReference()
                self.state = 724
                localctx.from_ = self.partitionSpec()
                self.state = 725
                self.match(SqlBaseParser.RENAME)
                self.state = 726
                self.match(SqlBaseParser.TO)
                self.state = 727
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 729
                self.match(SqlBaseParser.ALTER)
                self.state = 730
                _la = self._input.LA(1)
                if not(_la==285 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 731
                self.identifierReference()
                self.state = 732
                self.match(SqlBaseParser.DROP)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 733
                    self.match(SqlBaseParser.IF)
                    self.state = 734
                    self.match(SqlBaseParser.EXISTS)


                self.state = 737
                self.partitionSpec()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 738
                    self.match(SqlBaseParser.COMMA)
                    self.state = 739
                    self.partitionSpec()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 745
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 748
                self.match(SqlBaseParser.ALTER)
                self.state = 749
                self.match(SqlBaseParser.TABLE)
                self.state = 750
                self.identifierReference()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 751
                    self.partitionSpec()


                self.state = 754
                self.match(SqlBaseParser.SET)
                self.state = 755
                self.locationSpec()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 757
                self.match(SqlBaseParser.ALTER)
                self.state = 758
                self.match(SqlBaseParser.TABLE)
                self.state = 759
                self.identifierReference()
                self.state = 760
                self.match(SqlBaseParser.RECOVER)
                self.state = 761
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 763
                self.match(SqlBaseParser.DROP)
                self.state = 764
                self.match(SqlBaseParser.TABLE)
                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 765
                    self.match(SqlBaseParser.IF)
                    self.state = 766
                    self.match(SqlBaseParser.EXISTS)


                self.state = 769
                self.identifierReference()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 770
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 773
                self.match(SqlBaseParser.DROP)
                self.state = 774
                self.match(SqlBaseParser.VIEW)
                self.state = 777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 775
                    self.match(SqlBaseParser.IF)
                    self.state = 776
                    self.match(SqlBaseParser.EXISTS)


                self.state = 779
                self.identifierReference()
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 780
                self.match(SqlBaseParser.CREATE)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 781
                    self.match(SqlBaseParser.OR)
                    self.state = 782
                    self.match(SqlBaseParser.REPLACE)


                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126 or _la==290:
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==126:
                        self.state = 785
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 788
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 791
                self.match(SqlBaseParser.VIEW)
                self.state = 795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 792
                    self.match(SqlBaseParser.IF)
                    self.state = 793
                    self.match(SqlBaseParser.NOT)
                    self.state = 794
                    self.match(SqlBaseParser.EXISTS)


                self.state = 797
                self.identifierReference()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 798
                    self.identifierCommentList()


                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51 or _la==213 or _la==289:
                    self.state = 807
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51]:
                        self.state = 801
                        self.commentSpec()
                        pass
                    elif token in [213]:
                        self.state = 802
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 803
                        self.match(SqlBaseParser.ON)
                        self.state = 804
                        self.identifierList()
                        pass
                    elif token in [289]:
                        self.state = 805
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 806
                        self.propertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 812
                self.match(SqlBaseParser.AS)
                self.state = 813
                self.query()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 815
                self.match(SqlBaseParser.CREATE)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 816
                    self.match(SqlBaseParser.OR)
                    self.state = 817
                    self.match(SqlBaseParser.REPLACE)


                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 820
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 823
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 824
                self.match(SqlBaseParser.VIEW)
                self.state = 825
                self.tableIdentifier()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 826
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 827
                    self.colTypeList()
                    self.state = 828
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 832
                self.tableProvider()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 833
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 834
                    self.propertyList()


                pass

            elif la_ == 39:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 837
                self.match(SqlBaseParser.ALTER)
                self.state = 838
                self.match(SqlBaseParser.VIEW)
                self.state = 839
                self.identifierReference()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 840
                    self.match(SqlBaseParser.AS)


                self.state = 843
                self.query()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 845
                self.match(SqlBaseParser.CREATE)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 846
                    self.match(SqlBaseParser.OR)
                    self.state = 847
                    self.match(SqlBaseParser.REPLACE)


                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 850
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 853
                self.match(SqlBaseParser.FUNCTION)
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.match(SqlBaseParser.IF)
                    self.state = 855
                    self.match(SqlBaseParser.NOT)
                    self.state = 856
                    self.match(SqlBaseParser.EXISTS)


                self.state = 859
                self.identifierReference()
                self.state = 860
                self.match(SqlBaseParser.AS)
                self.state = 861
                localctx.className = self.stringLit()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 862
                    self.match(SqlBaseParser.USING)
                    self.state = 863
                    self.resource()
                    self.state = 868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 864
                        self.match(SqlBaseParser.COMMA)
                        self.state = 865
                        self.resource()
                        self.state = 870
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 873
                self.match(SqlBaseParser.DROP)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 874
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 877
                self.match(SqlBaseParser.FUNCTION)
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 878
                    self.match(SqlBaseParser.IF)
                    self.state = 879
                    self.match(SqlBaseParser.EXISTS)


                self.state = 882
                self.identifierReference()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.CreateVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 883
                self.match(SqlBaseParser.DECLARE)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 884
                    self.match(SqlBaseParser.OR)
                    self.state = 885
                    self.match(SqlBaseParser.REPLACE)


                self.state = 889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 888
                    self.match(SqlBaseParser.VARIABLE)


                self.state = 891
                self.identifierReference()
                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 892
                    self.dataType()


                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82 or _la==345:
                    self.state = 895
                    self.variableDefaultExpression()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.DropVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 898
                self.match(SqlBaseParser.DROP)
                self.state = 899
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 900
                self.match(SqlBaseParser.VARIABLE)
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(SqlBaseParser.IF)
                    self.state = 902
                    self.match(SqlBaseParser.EXISTS)


                self.state = 905
                self.identifierReference()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 906
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 1152921504606851073) != 0) or _la==120 or _la==171:
                    self.state = 907
                    _la = self._input.LA(1)
                    if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 1152921504606851073) != 0) or _la==120 or _la==171):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 910
                self.statement()
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 911
                self.match(SqlBaseParser.SHOW)
                self.state = 912
                self.match(SqlBaseParser.TABLES)
                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 913
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 914
                    self.identifierReference()


                self.state = 921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        self.state = 917
                        self.match(SqlBaseParser.LIKE)


                    self.state = 920
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowTableExtendedContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 923
                self.match(SqlBaseParser.SHOW)
                self.state = 924
                self.match(SqlBaseParser.TABLE)
                self.state = 925
                self.match(SqlBaseParser.EXTENDED)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121 or _la==139:
                    self.state = 926
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 927
                    localctx.ns = self.identifierReference()


                self.state = 930
                self.match(SqlBaseParser.LIKE)
                self.state = 931
                localctx.pattern = self.stringLit()
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 932
                    self.partitionSpec()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 935
                self.match(SqlBaseParser.SHOW)
                self.state = 936
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 937
                localctx.table = self.identifierReference()
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 938
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 939
                    localctx.key = self.propertyKey()
                    self.state = 940
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 944
                self.match(SqlBaseParser.SHOW)
                self.state = 945
                self.match(SqlBaseParser.COLUMNS)
                self.state = 946
                _la = self._input.LA(1)
                if not(_la==121 or _la==139):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 947
                localctx.table = self.identifierReference()
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121 or _la==139:
                    self.state = 948
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 949
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 952
                self.match(SqlBaseParser.SHOW)
                self.state = 953
                self.match(SqlBaseParser.VIEWS)
                self.state = 956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 954
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 955
                    self.identifierReference()


                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 959
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 958
                        self.match(SqlBaseParser.LIKE)


                    self.state = 961
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 964
                self.match(SqlBaseParser.SHOW)
                self.state = 965
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 966
                self.identifierReference()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 967
                    self.partitionSpec()


                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 970
                self.match(SqlBaseParser.SHOW)
                self.state = 972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.identifier()


                self.state = 974
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 975
                    _la = self._input.LA(1)
                    if not(_la==121 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 976
                    localctx.ns = self.identifierReference()


                self.state = 986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 980
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 979
                        self.match(SqlBaseParser.LIKE)


                    self.state = 984
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 982
                        localctx.legacy = self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 983
                        localctx.pattern = self.stringLit()
                        pass




                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 988
                self.match(SqlBaseParser.SHOW)
                self.state = 989
                self.match(SqlBaseParser.CREATE)
                self.state = 990
                self.match(SqlBaseParser.TABLE)
                self.state = 991
                self.identifierReference()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 992
                    self.match(SqlBaseParser.AS)
                    self.state = 993
                    self.match(SqlBaseParser.SERDE)


                pass

            elif la_ == 53:
                localctx = SqlBaseParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 996
                self.match(SqlBaseParser.SHOW)
                self.state = 997
                self.match(SqlBaseParser.CURRENT)
                self.state = 998
                self.namespace()
                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 999
                self.match(SqlBaseParser.SHOW)
                self.state = 1000
                self.match(SqlBaseParser.CATALOGS)
                self.state = 1005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1002
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 1001
                        self.match(SqlBaseParser.LIKE)


                    self.state = 1004
                    localctx.pattern = self.stringLit()


                pass

            elif la_ == 55:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1007
                _la = self._input.LA(1)
                if not(_la==86 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1008
                self.match(SqlBaseParser.FUNCTION)
                self.state = 1010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1009
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 1012
                self.describeFuncName()
                pass

            elif la_ == 56:
                localctx = SqlBaseParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1013
                _la = self._input.LA(1)
                if not(_la==86 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1014
                self.namespace()
                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 1018
                self.identifierReference()
                pass

            elif la_ == 57:
                localctx = SqlBaseParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1020
                _la = self._input.LA(1)
                if not(_la==86 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1021
                    self.match(SqlBaseParser.TABLE)


                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1024
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==120):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1027
                self.identifierReference()
                self.state = 1029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1028
                    self.partitionSpec()


                self.state = 1032
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1031
                    self.describeColName()


                pass

            elif la_ == 58:
                localctx = SqlBaseParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1034
                _la = self._input.LA(1)
                if not(_la==86 or _la==87):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227:
                    self.state = 1035
                    self.match(SqlBaseParser.QUERY)


                self.state = 1038
                self.query()
                pass

            elif la_ == 59:
                localctx = SqlBaseParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1039
                self.match(SqlBaseParser.COMMENT)
                self.state = 1040
                self.match(SqlBaseParser.ON)
                self.state = 1041
                self.namespace()
                self.state = 1042
                self.identifierReference()
                self.state = 1043
                self.match(SqlBaseParser.IS)
                self.state = 1044
                self.comment()
                pass

            elif la_ == 60:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1046
                self.match(SqlBaseParser.COMMENT)
                self.state = 1047
                self.match(SqlBaseParser.ON)
                self.state = 1048
                self.match(SqlBaseParser.TABLE)
                self.state = 1049
                self.identifierReference()
                self.state = 1050
                self.match(SqlBaseParser.IS)
                self.state = 1051
                self.comment()
                pass

            elif la_ == 61:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1053
                self.match(SqlBaseParser.REFRESH)
                self.state = 1054
                self.match(SqlBaseParser.TABLE)
                self.state = 1055
                self.identifierReference()
                pass

            elif la_ == 62:
                localctx = SqlBaseParser.RefreshFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1056
                self.match(SqlBaseParser.REFRESH)
                self.state = 1057
                self.match(SqlBaseParser.FUNCTION)
                self.state = 1058
                self.identifierReference()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1059
                self.match(SqlBaseParser.REFRESH)
                self.state = 1067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1060
                    self.stringLit()
                    pass

                elif la_ == 2:
                    self.state = 1064
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1061
                            self.matchWildcard() 
                        self.state = 1066
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1069
                self.match(SqlBaseParser.CACHE)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158:
                    self.state = 1070
                    self.match(SqlBaseParser.LAZY)


                self.state = 1073
                self.match(SqlBaseParser.TABLE)
                self.state = 1074
                self.identifierReference()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1075
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1076
                    localctx.options = self.propertyList()


                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==20 or _la==121 or _la==174 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 4503599635759105) != 0) or _la==326 or _la==340:
                    self.state = 1080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 1079
                        self.match(SqlBaseParser.AS)


                    self.state = 1082
                    self.query()


                pass

            elif la_ == 65:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1085
                self.match(SqlBaseParser.UNCACHE)
                self.state = 1086
                self.match(SqlBaseParser.TABLE)
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1087
                    self.match(SqlBaseParser.IF)
                    self.state = 1088
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1091
                self.identifierReference()
                pass

            elif la_ == 66:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1092
                self.match(SqlBaseParser.CLEAR)
                self.state = 1093
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 67:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1094
                self.match(SqlBaseParser.LOAD)
                self.state = 1095
                self.match(SqlBaseParser.DATA)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167:
                    self.state = 1096
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1099
                self.match(SqlBaseParser.INPATH)
                self.state = 1100
                localctx.path = self.stringLit()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1101
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 1104
                self.match(SqlBaseParser.INTO)
                self.state = 1105
                self.match(SqlBaseParser.TABLE)
                self.state = 1106
                self.identifierReference()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1107
                    self.partitionSpec()


                pass

            elif la_ == 68:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1110
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1111
                self.match(SqlBaseParser.TABLE)
                self.state = 1112
                self.identifierReference()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1113
                    self.partitionSpec()


                pass

            elif la_ == 69:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 1116
                    self.match(SqlBaseParser.MSCK)


                self.state = 1119
                self.match(SqlBaseParser.REPAIR)
                self.state = 1120
                self.match(SqlBaseParser.TABLE)
                self.state = 1121
                self.identifierReference()
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==95 or _la==282:
                    self.state = 1122
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==8 or _la==95 or _la==282):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1123
                    self.match(SqlBaseParser.PARTITIONS)


                pass

            elif la_ == 70:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1126
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==8 or _la==165):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self.identifier()
                self.state = 1131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1128
                        self.matchWildcard() 
                    self.state = 1133
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                pass

            elif la_ == 71:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1134
                self.match(SqlBaseParser.SET)
                self.state = 1135
                self.match(SqlBaseParser.ROLE)
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1136
                        self.matchWildcard() 
                    self.state = 1141
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass

            elif la_ == 72:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1142
                self.match(SqlBaseParser.SET)
                self.state = 1143
                self.match(SqlBaseParser.TIME)
                self.state = 1144
                self.match(SqlBaseParser.ZONE)
                self.state = 1145
                self.interval()
                pass

            elif la_ == 73:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1146
                self.match(SqlBaseParser.SET)
                self.state = 1147
                self.match(SqlBaseParser.TIME)
                self.state = 1148
                self.match(SqlBaseParser.ZONE)
                self.state = 1149
                self.timezone()
                pass

            elif la_ == 74:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1150
                self.match(SqlBaseParser.SET)
                self.state = 1151
                self.match(SqlBaseParser.TIME)
                self.state = 1152
                self.match(SqlBaseParser.ZONE)
                self.state = 1156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1153
                        self.matchWildcard() 
                    self.state = 1158
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass

            elif la_ == 75:
                localctx = SqlBaseParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1159
                self.match(SqlBaseParser.SET)
                self.state = 1160
                _la = self._input.LA(1)
                if not(_la==328 or _la==329):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1161
                self.assignmentList()
                pass

            elif la_ == 76:
                localctx = SqlBaseParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1162
                self.match(SqlBaseParser.SET)
                self.state = 1163
                _la = self._input.LA(1)
                if not(_la==328 or _la==329):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1164
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1165
                self.multipartIdentifierList()
                self.state = 1166
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 1167
                self.match(SqlBaseParser.EQ)
                self.state = 1168
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1169
                self.query()
                self.state = 1170
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 77:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1172
                self.match(SqlBaseParser.SET)
                self.state = 1173
                self.configKey()
                self.state = 1174
                self.match(SqlBaseParser.EQ)
                self.state = 1175
                self.configValue()
                pass

            elif la_ == 78:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1177
                self.match(SqlBaseParser.SET)
                self.state = 1178
                self.configKey()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==345:
                    self.state = 1179
                    self.match(SqlBaseParser.EQ)
                    self.state = 1183
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1180
                            self.matchWildcard() 
                        self.state = 1185
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,114,self._ctx)



                pass

            elif la_ == 79:
                localctx = SqlBaseParser.SetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 1188
                self.match(SqlBaseParser.SET)
                self.state = 1192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1189
                        self.matchWildcard() 
                    self.state = 1194
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                self.state = 1195
                self.match(SqlBaseParser.EQ)
                self.state = 1196
                self.configValue()
                pass

            elif la_ == 80:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 80)
                self.state = 1197
                self.match(SqlBaseParser.SET)
                self.state = 1201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1198
                        self.matchWildcard() 
                    self.state = 1203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass

            elif la_ == 81:
                localctx = SqlBaseParser.ResetQuotedConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 81)
                self.state = 1204
                self.match(SqlBaseParser.RESET)
                self.state = 1205
                self.configKey()
                pass

            elif la_ == 82:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 82)
                self.state = 1206
                self.match(SqlBaseParser.RESET)
                self.state = 1210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1207
                        self.matchWildcard() 
                    self.state = 1212
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass

            elif la_ == 83:
                localctx = SqlBaseParser.CreateIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 83)
                self.state = 1213
                self.match(SqlBaseParser.CREATE)
                self.state = 1214
                self.match(SqlBaseParser.INDEX)
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1215
                    self.match(SqlBaseParser.IF)
                    self.state = 1216
                    self.match(SqlBaseParser.NOT)
                    self.state = 1217
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1220
                self.identifier()
                self.state = 1221
                self.match(SqlBaseParser.ON)
                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1222
                    self.match(SqlBaseParser.TABLE)


                self.state = 1225
                self.identifierReference()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 1226
                    self.match(SqlBaseParser.USING)
                    self.state = 1227
                    localctx.indexType = self.identifier()


                self.state = 1230
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1231
                localctx.columns = self.multipartIdentifierPropertyList()
                self.state = 1232
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1233
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1234
                    localctx.options = self.propertyList()


                pass

            elif la_ == 84:
                localctx = SqlBaseParser.DropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 84)
                self.state = 1237
                self.match(SqlBaseParser.DROP)
                self.state = 1238
                self.match(SqlBaseParser.INDEX)
                self.state = 1241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.match(SqlBaseParser.IF)
                    self.state = 1240
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1243
                self.identifier()
                self.state = 1244
                self.match(SqlBaseParser.ON)
                self.state = 1246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    self.match(SqlBaseParser.TABLE)


                self.state = 1248
                self.identifierReference()
                pass

            elif la_ == 85:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 85)
                self.state = 1250
                self.unsupportedHiveNativeCommands()
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1251
                        self.matchWildcard() 
                    self.state = 1256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queryParam = None # ExecuteImmediateQueryParamContext
            self.targetVariable = None # MultipartIdentifierListContext

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def executeImmediateQueryParam(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateQueryParamContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def executeImmediateUsing(self):
            return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateUsingContext,0)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediate" ):
                listener.enterExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediate" ):
                listener.exitExecuteImmediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediate" ):
                return visitor.visitExecuteImmediate(self)
            else:
                return visitor.visitChildren(self)




    def executeImmediate(self):

        localctx = SqlBaseParser.ExecuteImmediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_executeImmediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(SqlBaseParser.EXECUTE)
            self.state = 1260
            self.match(SqlBaseParser.IMMEDIATE)
            self.state = 1261
            localctx.queryParam = self.executeImmediateQueryParam()
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1262
                self.match(SqlBaseParser.INTO)
                self.state = 1263
                localctx.targetVariable = self.multipartIdentifierList()


            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==325:
                self.state = 1266
                self.executeImmediateUsing()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # NamedExpressionSeqContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateUsing" ):
                listener.enterExecuteImmediateUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateUsing" ):
                listener.exitExecuteImmediateUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediateUsing" ):
                return visitor.visitExecuteImmediateUsing(self)
            else:
                return visitor.visitChildren(self)




    def executeImmediateUsing(self):

        localctx = SqlBaseParser.ExecuteImmediateUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_executeImmediateUsing)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.match(SqlBaseParser.USING)
                self.state = 1270
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1271
                localctx.params = self.namedExpressionSeq()
                self.state = 1272
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1274
                self.match(SqlBaseParser.USING)
                self.state = 1275
                localctx.params = self.namedExpressionSeq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateQueryParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateQueryParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateQueryParam" ):
                listener.enterExecuteImmediateQueryParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateQueryParam" ):
                listener.exitExecuteImmediateQueryParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediateQueryParam" ):
                return visitor.visitExecuteImmediateQueryParam(self)
            else:
                return visitor.visitChildren(self)




    def executeImmediateQueryParam(self):

        localctx = SqlBaseParser.ExecuteImmediateQueryParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_executeImmediateQueryParam)
        try:
            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1278
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1279
                self.multipartIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateArgument" ):
                listener.enterExecuteImmediateArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateArgument" ):
                listener.exitExecuteImmediateArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediateArgument" ):
                return visitor.visitExecuteImmediateArgument(self)
            else:
                return visitor.visitChildren(self)




    def executeImmediateArgument(self):

        localctx = SqlBaseParser.ExecuteImmediateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_executeImmediateArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1282
                self.constant()
                pass

            elif la_ == 2:
                self.state = 1283
                self.multipartIdentifier()
                pass


            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1286
                self.match(SqlBaseParser.AS)
                self.state = 1287
                localctx.name = self.errorCapturingIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteImmediateArgumentSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def executeImmediateArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExecuteImmediateArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExecuteImmediateArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_executeImmediateArgumentSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediateArgumentSeq" ):
                listener.enterExecuteImmediateArgumentSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediateArgumentSeq" ):
                listener.exitExecuteImmediateArgumentSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediateArgumentSeq" ):
                return visitor.visitExecuteImmediateArgumentSeq(self)
            else:
                return visitor.visitChildren(self)




    def executeImmediateArgumentSeq(self):

        localctx = SqlBaseParser.ExecuteImmediateArgumentSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_executeImmediateArgumentSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.executeImmediateArgument()
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1291
                self.match(SqlBaseParser.COMMA)
                self.state = 1292
                self.executeImmediateArgument()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimezone" ):
                listener.enterTimezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimezone" ):
                listener.exitTimezone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimezone" ):
                return visitor.visitTimezone(self)
            else:
                return visitor.visitChildren(self)




    def timezone(self):

        localctx = SqlBaseParser.TimezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_timezone)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(SqlBaseParser.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigKey" ):
                listener.enterConfigKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigKey" ):
                listener.exitConfigKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigKey" ):
                return visitor.visitConfigKey(self)
            else:
                return visitor.visitChildren(self)




    def configKey(self):

        localctx = SqlBaseParser.ConfigKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_configKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.quotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backQuotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.BackQuotedIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_configValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigValue" ):
                listener.enterConfigValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigValue" ):
                listener.exitConfigValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigValue" ):
                return visitor.visitConfigValue(self)
            else:
                return visitor.visitChildren(self)




    def configValue(self):

        localctx = SqlBaseParser.ConfigValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_configValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.backQuotedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1307
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1309
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1310
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 1312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1311
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1314
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 1316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1315
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1318
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1319
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1320
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1321
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 1323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1322
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1325
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1326
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1327
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1328
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1329
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1330
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 1331
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1332
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 1333
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1334
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 1335
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1336
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1337
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1338
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1339
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 1340
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1341
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1342
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1343
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1344
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1345
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1346
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1347
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1348
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1349
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1350
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1351
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1352
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1353
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1354
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1355
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1356
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1357
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1358
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1359
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1360
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1361
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1362
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1363
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1364
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1365
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1366
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1367
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1368
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1369
                self.tableIdentifier()
                self.state = 1370
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1371
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1373
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1374
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1375
                self.tableIdentifier()
                self.state = 1376
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 1377
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1379
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1380
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1381
                self.tableIdentifier()
                self.state = 1382
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1383
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1385
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1386
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1387
                self.tableIdentifier()
                self.state = 1388
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 1389
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1391
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1392
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1393
                self.tableIdentifier()
                self.state = 1394
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1395
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1397
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1398
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1399
                self.tableIdentifier()
                self.state = 1400
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1401
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 1402
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 1403
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1405
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1406
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1407
                self.tableIdentifier()
                self.state = 1408
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1409
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 1410
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1412
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1413
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1414
                self.tableIdentifier()
                self.state = 1415
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 1416
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1418
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1419
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1420
                self.tableIdentifier()
                self.state = 1421
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 1422
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1424
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1425
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1426
                self.tableIdentifier()
                self.state = 1427
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 1428
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1430
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1431
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1432
                self.tableIdentifier()
                self.state = 1433
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1435
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1436
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1437
                self.tableIdentifier()
                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1438
                    self.partitionSpec()


                self.state = 1441
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1443
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1444
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1445
                self.tableIdentifier()
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1446
                    self.partitionSpec()


                self.state = 1449
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1451
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1452
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1453
                self.tableIdentifier()
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1454
                    self.partitionSpec()


                self.state = 1457
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1458
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1460
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1461
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1462
                self.tableIdentifier()
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1463
                    self.partitionSpec()


                self.state = 1466
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 1467
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1469
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 1470
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1471
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1472
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1473
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.match(SqlBaseParser.CREATE)
            self.state = 1478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 1477
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 1480
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 1483
            self.match(SqlBaseParser.TABLE)
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1484
                self.match(SqlBaseParser.IF)
                self.state = 1485
                self.match(SqlBaseParser.NOT)
                self.state = 1486
                self.match(SqlBaseParser.EXISTS)


            self.state = 1489
            self.identifierReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = SqlBaseParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1491
                self.match(SqlBaseParser.CREATE)
                self.state = 1492
                self.match(SqlBaseParser.OR)


            self.state = 1495
            self.match(SqlBaseParser.REPLACE)
            self.state = 1496
            self.match(SqlBaseParser.TABLE)
            self.state = 1497
            self.identifierReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterBySpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_clusterBySpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterBySpec" ):
                listener.enterClusterBySpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterBySpec" ):
                listener.exitClusterBySpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClusterBySpec" ):
                return visitor.visitClusterBySpec(self)
            else:
                return visitor.visitChildren(self)




    def clusterBySpec(self):

        localctx = SqlBaseParser.ClusterBySpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_clusterBySpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.match(SqlBaseParser.CLUSTER)
            self.state = 1500
            self.match(SqlBaseParser.BY)
            self.state = 1501
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1502
            self.multipartIdentifierList()
            self.state = 1503
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1506
            self.match(SqlBaseParser.BY)
            self.state = 1507
            self.identifierList()
            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272:
                self.state = 1508
                self.match(SqlBaseParser.SORTED)
                self.state = 1509
                self.match(SqlBaseParser.BY)
                self.state = 1510
                self.orderedIdentifierList()


            self.state = 1513
            self.match(SqlBaseParser.INTO)
            self.state = 1514
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1515
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(SqlBaseParser.SKEWED)
            self.state = 1518
            self.match(SqlBaseParser.BY)
            self.state = 1519
            self.identifierList()
            self.state = 1520
            self.match(SqlBaseParser.ON)
            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1521
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1522
                self.nestedConstantList()
                pass


            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1525
                self.match(SqlBaseParser.STORED)
                self.state = 1526
                self.match(SqlBaseParser.AS)
                self.state = 1527
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(SqlBaseParser.LOCATION)
            self.state = 1531
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = SqlBaseParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(SqlBaseParser.COMMENT)
            self.state = 1534
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 1536
                self.ctes()


            self.state = 1539
            self.queryTerm(0)
            self.state = 1540
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertIntoReplaceWhereContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoReplaceWhere" ):
                listener.enterInsertIntoReplaceWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoReplaceWhere" ):
                listener.exitInsertIntoReplaceWhere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoReplaceWhere" ):
                return visitor.visitInsertIntoReplaceWhere(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # StringLitContext
            self.options = None # PropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.match(SqlBaseParser.INSERT)
                self.state = 1543
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1544
                    self.match(SqlBaseParser.TABLE)


                self.state = 1547
                self.identifierReference()
                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1548
                    self.partitionSpec()
                    self.state = 1552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1549
                        self.match(SqlBaseParser.IF)
                        self.state = 1550
                        self.match(SqlBaseParser.NOT)
                        self.state = 1551
                        self.match(SqlBaseParser.EXISTS)




                self.state = 1559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1556
                    self.match(SqlBaseParser.BY)
                    self.state = 1557
                    self.match(SqlBaseParser.NAME)

                elif la_ == 2:
                    self.state = 1558
                    self.identifierList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.match(SqlBaseParser.INSERT)
                self.state = 1562
                self.match(SqlBaseParser.INTO)
                self.state = 1564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1563
                    self.match(SqlBaseParser.TABLE)


                self.state = 1566
                self.identifierReference()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1567
                    self.partitionSpec()


                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1570
                    self.match(SqlBaseParser.IF)
                    self.state = 1571
                    self.match(SqlBaseParser.NOT)
                    self.state = 1572
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1575
                    self.match(SqlBaseParser.BY)
                    self.state = 1576
                    self.match(SqlBaseParser.NAME)

                elif la_ == 2:
                    self.state = 1577
                    self.identifierList()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertIntoReplaceWhereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1580
                self.match(SqlBaseParser.INSERT)
                self.state = 1581
                self.match(SqlBaseParser.INTO)
                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1582
                    self.match(SqlBaseParser.TABLE)


                self.state = 1585
                self.identifierReference()
                self.state = 1586
                self.match(SqlBaseParser.REPLACE)
                self.state = 1587
                self.whereClause()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1589
                self.match(SqlBaseParser.INSERT)
                self.state = 1590
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167:
                    self.state = 1591
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1594
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1595
                localctx.path = self.stringLit()
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==250:
                    self.state = 1596
                    self.rowFormat()


                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 1599
                    self.createFileFormat()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1602
                self.match(SqlBaseParser.INSERT)
                self.state = 1603
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167:
                    self.state = 1604
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1607
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1608
                    localctx.path = self.stringLit()


                self.state = 1611
                self.tableProvider()
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1612
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1613
                    localctx.options = self.propertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.partitionSpec()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 1619
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.match(SqlBaseParser.PARTITION)
            self.state = 1623
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1624
            self.partitionVal()
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1625
                self.match(SqlBaseParser.COMMA)
                self.state = 1626
                self.partitionVal()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1632
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.state = 1643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1634
                self.identifier()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==345:
                    self.state = 1635
                    self.match(SqlBaseParser.EQ)
                    self.state = 1636
                    self.constant()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.identifier()
                self.state = 1640
                self.match(SqlBaseParser.EQ)
                self.state = 1641
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = SqlBaseParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            _la = self._input.LA(1)
            if not(_la==72 or _la==187 or _la==254):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaces" ):
                return visitor.visitNamespaces(self)
            else:
                return visitor.visitChildren(self)




    def namespaces(self):

        localctx = SqlBaseParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_namespaces)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            _la = self._input.LA(1)
            if not(_la==73 or _la==188 or _la==255):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_describeFuncName)
        try:
            self.state = 1654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.identifierReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1650
                self.stringLit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1651
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1652
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1653
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1657
                self.match(SqlBaseParser.DOT)
                self.state = 1658
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(SqlBaseParser.WITH)
            self.state = 1665
            self.namedQuery()
            self.state = 1670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1666
                self.match(SqlBaseParser.COMMA)
                self.state = 1667
                self.namedQuery()
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1674
                localctx.columnAliases = self.identifierList()


            self.state = 1678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1677
                self.match(SqlBaseParser.AS)


            self.state = 1680
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1681
            self.query()
            self.state = 1682
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(SqlBaseParser.USING)
            self.state = 1685
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # ExpressionPropertyListContext
            self.partitioning = None # PartitionFieldListContext
            self.tableProps = None # PropertyListContext

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,i)


        def clusterBySpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ClusterBySpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ClusterBySpecContext,i)


        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def expressionPropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionPropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionPropertyListContext,i)


        def partitionFieldList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldListContext,i)


        def propertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = SqlBaseParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2304576371818496) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 35201551958017) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & 549823184897) != 0):
                self.state = 1701
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 1687
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1688
                    localctx.options = self.expressionPropertyList()
                    pass
                elif token in [213]:
                    self.state = 1689
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 1690
                    self.match(SqlBaseParser.BY)
                    self.state = 1691
                    localctx.partitioning = self.partitionFieldList()
                    pass
                elif token in [268]:
                    self.state = 1692
                    self.skewSpec()
                    pass
                elif token in [44]:
                    self.state = 1693
                    self.clusterBySpec()
                    pass
                elif token in [45]:
                    self.state = 1694
                    self.bucketSpec()
                    pass
                elif token in [250]:
                    self.state = 1695
                    self.rowFormat()
                    pass
                elif token in [276]:
                    self.state = 1696
                    self.createFileFormat()
                    pass
                elif token in [168]:
                    self.state = 1697
                    self.locationSpec()
                    pass
                elif token in [51]:
                    self.state = 1698
                    self.commentSpec()
                    pass
                elif token in [289]:
                    self.state = 1699
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 1700
                    localctx.tableProps = self.propertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyList" ):
                return visitor.visitPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def propertyList(self):

        localctx = SqlBaseParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1707
            self.property_()
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1708
                self.match(SqlBaseParser.COMMA)
                self.state = 1709
                self.property_()
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1715
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # PropertyKeyContext
            self.value = None # PropertyValueContext

        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def propertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            localctx.key = self.propertyKey()
            self.state = 1722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.match(SqlBaseParser.EQ)


                self.state = 1721
                localctx.value = self.propertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKey" ):
                listener.enterPropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKey" ):
                listener.exitPropertyKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyKey" ):
                return visitor.visitPropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def propertyKey(self):

        localctx = SqlBaseParser.PropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_propertyKey)
        try:
            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1724
                self.identifier()
                self.state = 1729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1725
                        self.match(SqlBaseParser.DOT)
                        self.state = 1726
                        self.identifier() 
                    self.state = 1731
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyValue" ):
                listener.enterPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyValue" ):
                listener.exitPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyValue" ):
                return visitor.visitPropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def propertyValue(self):

        localctx = SqlBaseParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_propertyValue)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.booleanValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1738
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expressionProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionPropertyContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionPropertyList" ):
                listener.enterExpressionPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionPropertyList" ):
                listener.exitExpressionPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionPropertyList" ):
                return visitor.visitExpressionPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def expressionPropertyList(self):

        localctx = SqlBaseParser.ExpressionPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_expressionPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1742
            self.expressionProperty()
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1743
                self.match(SqlBaseParser.COMMA)
                self.state = 1744
                self.expressionProperty()
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1750
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # PropertyKeyContext
            self.value = None # ExpressionContext

        def propertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyKeyContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionProperty" ):
                listener.enterExpressionProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionProperty" ):
                listener.exitExpressionProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionProperty" ):
                return visitor.visitExpressionProperty(self)
            else:
                return visitor.visitChildren(self)




    def expressionProperty(self):

        localctx = SqlBaseParser.ExpressionPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expressionProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            localctx.key = self.propertyKey()
            self.state = 1757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1753
                    self.match(SqlBaseParser.EQ)


                self.state = 1756
                localctx.value = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1760
            self.constant()
            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1761
                self.match(SqlBaseParser.COMMA)
                self.state = 1762
                self.constant()
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1768
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 1771
            self.constantList()
            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1772
                self.match(SqlBaseParser.COMMA)
                self.state = 1773
                self.constantList()
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1779
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_createFileFormat)
        try:
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1781
                self.match(SqlBaseParser.STORED)
                self.state = 1782
                self.match(SqlBaseParser.AS)
                self.state = 1783
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.match(SqlBaseParser.STORED)
                self.state = 1785
                self.match(SqlBaseParser.BY)
                self.state = 1786
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # StringLitContext
            self.outFmt = None # StringLitContext
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fileFormat)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1789
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1790
                localctx.inFmt = self.stringLit()
                self.state = 1791
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1792
                localctx.outFmt = self.stringLit()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1794
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.stringLit()
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1798
                self.match(SqlBaseParser.WITH)
                self.state = 1799
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1800
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.identifier()
            self.state = 1804
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # IdentifierReferenceContext
            self.targetAlias = None # TableAliasContext
            self.source = None # IdentifierReferenceContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierReferenceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedClauseContext,i)

        def notMatchedBySourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedBySourceClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = SqlBaseParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146]:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.insertInto()
                self.state = 1807
                self.query()
                pass
            elif token in [121]:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.fromClause()
                self.state = 1811 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1810
                    self.multiInsertQueryBody()
                    self.state = 1813 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==146):
                        break

                pass
            elif token in [84]:
                localctx = SqlBaseParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1815
                self.match(SqlBaseParser.DELETE)
                self.state = 1816
                self.match(SqlBaseParser.FROM)
                self.state = 1817
                self.identifierReference()
                self.state = 1818
                self.tableAlias()
                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==338:
                    self.state = 1819
                    self.whereClause()


                pass
            elif token in [322]:
                localctx = SqlBaseParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1822
                self.match(SqlBaseParser.UPDATE)
                self.state = 1823
                self.identifierReference()
                self.state = 1824
                self.tableAlias()
                self.state = 1825
                self.setClause()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==338:
                    self.state = 1826
                    self.whereClause()


                pass
            elif token in [176]:
                localctx = SqlBaseParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1829
                self.match(SqlBaseParser.MERGE)
                self.state = 1830
                self.match(SqlBaseParser.INTO)
                self.state = 1831
                localctx.target = self.identifierReference()
                self.state = 1832
                localctx.targetAlias = self.tableAlias()
                self.state = 1833
                self.match(SqlBaseParser.USING)
                self.state = 1839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1834
                    localctx.source = self.identifierReference()
                    pass

                elif la_ == 2:
                    self.state = 1835
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 1836
                    localctx.sourceQuery = self.query()
                    self.state = 1837
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                self.state = 1841
                localctx.sourceAlias = self.tableAlias()
                self.state = 1842
                self.match(SqlBaseParser.ON)
                self.state = 1843
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 1847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1844
                        self.matchedClause() 
                    self.state = 1849
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1850
                        self.notMatchedClause() 
                    self.state = 1855
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==337:
                    self.state = 1856
                    self.notMatchedBySourceClause()
                    self.state = 1861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierReference" ):
                listener.enterIdentifierReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierReference" ):
                listener.exitIdentifierReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierReference" ):
                return visitor.visitIdentifierReference(self)
            else:
                return visitor.visitChildren(self)




    def identifierReference(self):

        localctx = SqlBaseParser.IdentifierReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identifierReference)
        try:
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1864
                self.match(SqlBaseParser.IDENTIFIER_KW)
                self.state = 1865
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1866
                self.expression()
                self.state = 1867
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1869
                self.multipartIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1872
                self.match(SqlBaseParser.ORDER)
                self.state = 1873
                self.match(SqlBaseParser.BY)
                self.state = 1874
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1875
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1876
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 1881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)



            self.state = 1894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1884
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1885
                self.match(SqlBaseParser.BY)
                self.state = 1886
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1887
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1888
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 1893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)



            self.state = 1906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1897
                self.match(SqlBaseParser.BY)
                self.state = 1898
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1899
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1900
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 1905
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)



            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1908
                self.match(SqlBaseParser.SORT)
                self.state = 1909
                self.match(SqlBaseParser.BY)
                self.state = 1910
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1911
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1912
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 1917
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)



            self.state = 1921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1920
                self.windowClause()


            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1923
                self.match(SqlBaseParser.LIMIT)
                self.state = 1926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1924
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1925
                    localctx.limit = self.expression()
                    pass




            self.state = 1932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1930
                self.match(SqlBaseParser.OFFSET)
                self.state = 1931
                localctx.offset = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.insertInto()
            self.state = 1935
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1938
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1961
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1940
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1941
                        if not self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "legacy_setops_precedence_enabled")
                        self.state = 1942
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==100 or _la==147 or _la==263 or _la==316):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==91:
                            self.state = 1943
                            self.setQuantifier()


                        self.state = 1946
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1947
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1948
                        if not self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1949
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==91:
                            self.state = 1950
                            self.setQuantifier()


                        self.state = 1953
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1954
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1955
                        if not self.legacy_setops_precedence_enabled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enabled")
                        self.state = 1956
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==100 or _la==263 or _la==316):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==10 or _la==91:
                            self.state = 1957
                            self.setQuantifier()


                        self.state = 1960
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_queryPrimary)
        try:
            self.state = 1975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [174, 233, 256]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1966
                self.querySpecification()
                pass
            elif token in [121]:
                localctx = SqlBaseParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1967
                self.fromStatement()
                pass
            elif token in [285]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1968
                self.match(SqlBaseParser.TABLE)
                self.state = 1969
                self.identifierReference()
                pass
            elif token in [326]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1970
                self.inlineTable()
                pass
            elif token in [2]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1971
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 1972
                self.query()
                self.state = 1973
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self.expression()
            self.state = 1979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1978
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==21 or _la==86):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1981
                self.match(SqlBaseParser.NULLS)
                self.state = 1982
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==156):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = SqlBaseParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.fromClause()
            self.state = 1987 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1986
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 1989 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = SqlBaseParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fromStatementBody)
        try:
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1991
                self.transformClause()
                self.state = 1993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1992
                    self.whereClause()


                self.state = 1995
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1997
                self.selectClause()
                self.state = 2001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1998
                        self.lateralView() 
                    self.state = 2003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

                self.state = 2005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 2004
                    self.whereClause()


                self.state = 2008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 2007
                    self.aggregationClause()


                self.state = 2011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 2010
                    self.havingClause()


                self.state = 2014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2013
                    self.windowClause()


                self.state = 2016
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_querySpecification)
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self.transformClause()
                self.state = 2022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 2021
                    self.fromClause()


                self.state = 2027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2024
                        self.lateralView() 
                    self.state = 2029
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                self.state = 2031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 2030
                    self.whereClause()


                self.state = 2034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2033
                    self.aggregationClause()


                self.state = 2037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2036
                    self.havingClause()


                self.state = 2040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 2039
                    self.windowClause()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2042
                self.selectClause()
                self.state = 2044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2043
                    self.fromClause()


                self.state = 2049
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2046
                        self.lateralView() 
                    self.state = 2051
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                self.state = 2053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 2052
                    self.whereClause()


                self.state = 2056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 2055
                    self.aggregationClause()


                self.state = 2059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2058
                    self.havingClause()


                self.state = 2062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 2061
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # StringLitContext
            self.script = None # StringLitContext
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # StringLitContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def expressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionSeqContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = SqlBaseParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [256]:
                self.state = 2066
                self.match(SqlBaseParser.SELECT)
                self.state = 2067
                localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                self.state = 2068
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2069
                    self.setQuantifier()


                self.state = 2072
                self.expressionSeq()
                self.state = 2073
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [174]:
                self.state = 2075
                localctx.kind = self.match(SqlBaseParser.MAP)
                self.state = 2077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2076
                    self.setQuantifier()


                self.state = 2079
                self.expressionSeq()
                pass
            elif token in [233]:
                self.state = 2080
                localctx.kind = self.match(SqlBaseParser.REDUCE)
                self.state = 2082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2081
                    self.setQuantifier()


                self.state = 2084
                self.expressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==250:
                self.state = 2087
                localctx.inRowFormat = self.rowFormat()


            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==231:
                self.state = 2090
                self.match(SqlBaseParser.RECORDWRITER)
                self.state = 2091
                localctx.recordWriter = self.stringLit()


            self.state = 2094
            self.match(SqlBaseParser.USING)
            self.state = 2095
            localctx.script = self.stringLit()
            self.state = 2108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2096
                self.match(SqlBaseParser.AS)
                self.state = 2106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2097
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2098
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2099
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2100
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2101
                        self.colTypeList()
                        pass


                    self.state = 2104
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass




            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 2110
                localctx.outRowFormat = self.rowFormat()


            self.state = 2115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2113
                self.match(SqlBaseParser.RECORDREADER)
                self.state = 2114
                localctx.recordReader = self.stringLit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = SqlBaseParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(SqlBaseParser.SELECT)
            self.state = 2121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2118
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 2123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 2124
                self.setQuantifier()


            self.state = 2127
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = SqlBaseParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(SqlBaseParser.SET)
            self.state = 2130
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = SqlBaseParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(SqlBaseParser.WHEN)
            self.state = 2133
            self.match(SqlBaseParser.MATCHED)
            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 2134
                self.match(SqlBaseParser.AND)
                self.state = 2135
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2138
            self.match(SqlBaseParser.THEN)
            self.state = 2139
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedActionContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = SqlBaseParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.match(SqlBaseParser.WHEN)
            self.state = 2142
            self.match(SqlBaseParser.NOT)
            self.state = 2143
            self.match(SqlBaseParser.MATCHED)
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 2144
                self.match(SqlBaseParser.BY)
                self.state = 2145
                self.match(SqlBaseParser.TARGET)


            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 2148
                self.match(SqlBaseParser.AND)
                self.state = 2149
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2152
            self.match(SqlBaseParser.THEN)
            self.state = 2153
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedBySourceCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedBySourceAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedBySourceActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceClause" ):
                listener.enterNotMatchedBySourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceClause" ):
                listener.exitNotMatchedBySourceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedBySourceClause" ):
                return visitor.visitNotMatchedBySourceClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedBySourceClause(self):

        localctx = SqlBaseParser.NotMatchedBySourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_notMatchedBySourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(SqlBaseParser.WHEN)
            self.state = 2156
            self.match(SqlBaseParser.NOT)
            self.state = 2157
            self.match(SqlBaseParser.MATCHED)
            self.state = 2158
            self.match(SqlBaseParser.BY)
            self.state = 2159
            self.match(SqlBaseParser.SOURCE)
            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 2160
                self.match(SqlBaseParser.AND)
                self.state = 2161
                localctx.notMatchedBySourceCond = self.booleanExpression(0)


            self.state = 2164
            self.match(SqlBaseParser.THEN)
            self.state = 2165
            self.notMatchedBySourceAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = SqlBaseParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_matchedAction)
        try:
            self.state = 2174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2167
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self.match(SqlBaseParser.UPDATE)
                self.state = 2169
                self.match(SqlBaseParser.SET)
                self.state = 2170
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2171
                self.match(SqlBaseParser.UPDATE)
                self.state = 2172
                self.match(SqlBaseParser.SET)
                self.state = 2173
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = SqlBaseParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2176
                self.match(SqlBaseParser.INSERT)
                self.state = 2177
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2178
                self.match(SqlBaseParser.INSERT)
                self.state = 2179
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2180
                localctx.columns = self.multipartIdentifierList()
                self.state = 2181
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2182
                self.match(SqlBaseParser.VALUES)
                self.state = 2183
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2184
                self.expression()
                self.state = 2189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2185
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2186
                    self.expression()
                    self.state = 2191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2192
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedBySourceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedBySourceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedBySourceAction" ):
                listener.enterNotMatchedBySourceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedBySourceAction" ):
                listener.exitNotMatchedBySourceAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedBySourceAction" ):
                return visitor.visitNotMatchedBySourceAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedBySourceAction(self):

        localctx = SqlBaseParser.NotMatchedBySourceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_notMatchedBySourceAction)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2196
                self.match(SqlBaseParser.DELETE)
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2197
                self.match(SqlBaseParser.UPDATE)
                self.state = 2198
                self.match(SqlBaseParser.SET)
                self.state = 2199
                self.assignmentList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exceptCols = None # MultipartIdentifierListContext

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_exceptClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptClause" ):
                listener.enterExceptClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptClause" ):
                listener.exitExceptClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptClause" ):
                return visitor.visitExceptClause(self)
            else:
                return visitor.visitChildren(self)




    def exceptClause(self):

        localctx = SqlBaseParser.ExceptClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_exceptClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.match(SqlBaseParser.EXCEPT)
            self.state = 2203
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2204
            localctx.exceptCols = self.multipartIdentifierList()
            self.state = 2205
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = SqlBaseParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.assignment()
            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2208
                self.match(SqlBaseParser.COMMA)
                self.state = 2209
                self.assignment()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            localctx.key = self.multipartIdentifier()
            self.state = 2216
            self.match(SqlBaseParser.EQ)
            self.state = 2217
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = SqlBaseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self.match(SqlBaseParser.WHERE)
            self.state = 2220
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = SqlBaseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.match(SqlBaseParser.HAVING)
            self.state = 2223
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def HENT_START(self):
            return self.getToken(SqlBaseParser.HENT_START, 0)

        def HENT_END(self):
            return self.getToken(SqlBaseParser.HENT_END, 0)

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.match(SqlBaseParser.HENT_START)
            self.state = 2226
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 2227
                        self.match(SqlBaseParser.COMMA)


                    self.state = 2230
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

            self.state = 2236
            self.match(SqlBaseParser.HENT_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2238
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                localctx.hintName = self.identifier()
                self.state = 2240
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2241
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2242
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2243
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2249
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.match(SqlBaseParser.FROM)
            self.state = 2254
            self.relation()
            self.state = 2259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2255
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2256
                    self.relation() 
                self.state = 2261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

            self.state = 2265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2262
                    self.lateralView() 
                self.state = 2267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 2269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2268
                self.pivotClause()


            self.state = 2272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2271
                self.unpivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timestamp = None # ValueExpressionContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def version(self):
            return self.getTypedRuleContext(SqlBaseParser.VersionContext,0)


        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_temporalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalClause" ):
                listener.enterTemporalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalClause" ):
                listener.exitTemporalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemporalClause" ):
                return visitor.visitTemporalClause(self)
            else:
                return visitor.visitChildren(self)




    def temporalClause(self):

        localctx = SqlBaseParser.TemporalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_temporalClause)
        self._la = 0 # Token type
        try:
            self.state = 2288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 2274
                    self.match(SqlBaseParser.FOR)


                self.state = 2277
                _la = self._input.LA(1)
                if not(_la==284 or _la==331):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2278
                self.match(SqlBaseParser.AS)
                self.state = 2279
                self.match(SqlBaseParser.OF)
                self.state = 2280
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 2281
                    self.match(SqlBaseParser.FOR)


                self.state = 2284
                _la = self._input.LA(1)
                if not(_la==283 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2285
                self.match(SqlBaseParser.AS)
                self.state = 2286
                self.match(SqlBaseParser.OF)
                self.state = 2287
                localctx.timestamp = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._groupByClause = None # GroupByClauseContext
            self.groupingExpressionsWithGroupingAnalytics = list() # of GroupByClauseContexts
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupByClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupByClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = SqlBaseParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.match(SqlBaseParser.GROUP)
                self.state = 2291
                self.match(SqlBaseParser.BY)
                self.state = 2292
                localctx._groupByClause = self.groupByClause()
                localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause)
                self.state = 2297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2293
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2294
                        localctx._groupByClause = self.groupByClause()
                        localctx.groupingExpressionsWithGroupingAnalytics.append(localctx._groupByClause) 
                    self.state = 2299
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2300
                self.match(SqlBaseParser.GROUP)
                self.state = 2301
                self.match(SqlBaseParser.BY)
                self.state = 2302
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2303
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2304
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                self.state = 2327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 2310
                    self.match(SqlBaseParser.WITH)
                    self.state = 2311
                    localctx.kind = self.match(SqlBaseParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2312
                    self.match(SqlBaseParser.WITH)
                    self.state = 2313
                    localctx.kind = self.match(SqlBaseParser.CUBE)

                elif la_ == 3:
                    self.state = 2314
                    localctx.kind = self.match(SqlBaseParser.GROUPING)
                    self.state = 2315
                    self.match(SqlBaseParser.SETS)
                    self.state = 2316
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2317
                    self.groupingSet()
                    self.state = 2322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2318
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2319
                        self.groupingSet()
                        self.state = 2324
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2325
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = SqlBaseParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_groupByClause)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2331
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2332
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingAnalyticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingAnalytics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingAnalytics" ):
                listener.enterGroupingAnalytics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingAnalytics" ):
                listener.exitGroupingAnalytics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingAnalytics" ):
                return visitor.visitGroupingAnalytics(self)
            else:
                return visitor.visitChildren(self)




    def groupingAnalytics(self):

        localctx = SqlBaseParser.GroupingAnalyticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_groupingAnalytics)
        self._la = 0 # Token type
        try:
            self.state = 2360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                _la = self._input.LA(1)
                if not(_la==61 or _la==249):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2336
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2337
                self.groupingSet()
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2338
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2339
                    self.groupingSet()
                    self.state = 2344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2345
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.match(SqlBaseParser.GROUPING)
                self.state = 2348
                self.match(SqlBaseParser.SETS)
                self.state = 2349
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2350
                self.groupingElement()
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2351
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2352
                    self.groupingElement()
                    self.state = 2357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2358
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingAnalytics(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingAnalyticsContext,0)


        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingElement" ):
                listener.enterGroupingElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingElement" ):
                listener.exitGroupingElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingElement" ):
                return visitor.visitGroupingElement(self)
            else:
                return visitor.visitChildren(self)




    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_groupingElement)
        try:
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2362
                self.groupingAnalytics()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2363
                self.groupingSet()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2366
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2367
                    self.expression()
                    self.state = 2372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2368
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2369
                        self.expression()
                        self.state = 2374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2377
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2378
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PivotValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = SqlBaseParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.match(SqlBaseParser.PIVOT)
            self.state = 2382
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2383
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2384
            self.match(SqlBaseParser.FOR)
            self.state = 2385
            self.pivotColumn()
            self.state = 2386
            self.match(SqlBaseParser.IN)
            self.state = 2387
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2388
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2389
                self.match(SqlBaseParser.COMMA)
                self.state = 2390
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2396
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2397
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = SqlBaseParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2399
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2400
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2401
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2402
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2403
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2409
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = SqlBaseParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self.expression()
            self.state = 2418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2414
                    self.match(SqlBaseParser.AS)


                self.state = 2417
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullOperator = None # UnpivotNullClauseContext
            self.operator = None # UnpivotOperatorContext

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotOperatorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def unpivotNullClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNullClauseContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotClause" ):
                listener.enterUnpivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotClause" ):
                listener.exitUnpivotClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotClause" ):
                return visitor.visitUnpivotClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotClause(self):

        localctx = SqlBaseParser.UnpivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unpivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.match(SqlBaseParser.UNPIVOT)
            self.state = 2422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102 or _la==140:
                self.state = 2421
                localctx.nullOperator = self.unpivotNullClause()


            self.state = 2424
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2425
            localctx.operator = self.unpivotOperator()
            self.state = 2426
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2427
                    self.match(SqlBaseParser.AS)


                self.state = 2430
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNullClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNullClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNullClause" ):
                listener.enterUnpivotNullClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNullClause" ):
                listener.exitUnpivotNullClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotNullClause" ):
                return visitor.visitUnpivotNullClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotNullClause(self):

        localctx = SqlBaseParser.UnpivotNullClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_unpivotNullClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            _la = self._input.LA(1)
            if not(_la==102 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2434
            self.match(SqlBaseParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotSingleValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotSingleValueColumnClauseContext,0)


        def unpivotMultiValueColumnClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotMultiValueColumnClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotOperator" ):
                listener.enterUnpivotOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotOperator" ):
                listener.exitUnpivotOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotOperator" ):
                return visitor.visitUnpivotOperator(self)
            else:
                return visitor.visitChildren(self)




    def unpivotOperator(self):

        localctx = SqlBaseParser.UnpivotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_unpivotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2436
                self.unpivotSingleValueColumnClause()
                pass

            elif la_ == 2:
                self.state = 2437
                self.unpivotMultiValueColumnClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotSingleValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumnAndAlias = None # UnpivotColumnAndAliasContext
            self.unpivotColumns = list() # of UnpivotColumnAndAliasContexts

        def unpivotValueColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,0)


        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumnAndAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnAndAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnAndAliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotSingleValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotSingleValueColumnClause" ):
                listener.enterUnpivotSingleValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotSingleValueColumnClause" ):
                listener.exitUnpivotSingleValueColumnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotSingleValueColumnClause" ):
                return visitor.visitUnpivotSingleValueColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotSingleValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotSingleValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unpivotSingleValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.unpivotValueColumn()
            self.state = 2441
            self.match(SqlBaseParser.FOR)
            self.state = 2442
            self.unpivotNameColumn()
            self.state = 2443
            self.match(SqlBaseParser.IN)
            self.state = 2444
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2445
            localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
            localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
            self.state = 2450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2446
                self.match(SqlBaseParser.COMMA)
                self.state = 2447
                localctx._unpivotColumnAndAlias = self.unpivotColumnAndAlias()
                localctx.unpivotColumns.append(localctx._unpivotColumnAndAlias)
                self.state = 2452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2453
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotMultiValueColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotValueColumn = None # UnpivotValueColumnContext
            self.unpivotValueColumns = list() # of UnpivotValueColumnContexts
            self._unpivotColumnSet = None # UnpivotColumnSetContext
            self.unpivotColumnSets = list() # of UnpivotColumnSetContexts

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def unpivotNameColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotNameColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def unpivotValueColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotValueColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotValueColumnContext,i)


        def unpivotColumnSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotMultiValueColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotMultiValueColumnClause" ):
                listener.enterUnpivotMultiValueColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotMultiValueColumnClause" ):
                listener.exitUnpivotMultiValueColumnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotMultiValueColumnClause" ):
                return visitor.visitUnpivotMultiValueColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def unpivotMultiValueColumnClause(self):

        localctx = SqlBaseParser.UnpivotMultiValueColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_unpivotMultiValueColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2455
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2456
            localctx._unpivotValueColumn = self.unpivotValueColumn()
            localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
            self.state = 2461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2457
                self.match(SqlBaseParser.COMMA)
                self.state = 2458
                localctx._unpivotValueColumn = self.unpivotValueColumn()
                localctx.unpivotValueColumns.append(localctx._unpivotValueColumn)
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2464
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2465
            self.match(SqlBaseParser.FOR)
            self.state = 2466
            self.unpivotNameColumn()
            self.state = 2467
            self.match(SqlBaseParser.IN)
            self.state = 2468
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2469
            localctx._unpivotColumnSet = self.unpivotColumnSet()
            localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2470
                self.match(SqlBaseParser.COMMA)
                self.state = 2471
                localctx._unpivotColumnSet = self.unpivotColumnSet()
                localctx.unpivotColumnSets.append(localctx._unpivotColumnSet)
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2477
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unpivotColumn = None # UnpivotColumnContext
            self.unpivotColumns = list() # of UnpivotColumnContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def unpivotColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnpivotColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnSet" ):
                listener.enterUnpivotColumnSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnSet" ):
                listener.exitUnpivotColumnSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumnSet" ):
                return visitor.visitUnpivotColumnSet(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumnSet(self):

        localctx = SqlBaseParser.UnpivotColumnSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_unpivotColumnSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2480
            localctx._unpivotColumn = self.unpivotColumn()
            localctx.unpivotColumns.append(localctx._unpivotColumn)
            self.state = 2485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2481
                self.match(SqlBaseParser.COMMA)
                self.state = 2482
                localctx._unpivotColumn = self.unpivotColumn()
                localctx.unpivotColumns.append(localctx._unpivotColumn)
                self.state = 2487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2488
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2489
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotValueColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotValueColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotValueColumn" ):
                listener.enterUnpivotValueColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotValueColumn" ):
                listener.exitUnpivotValueColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotValueColumn" ):
                return visitor.visitUnpivotValueColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotValueColumn(self):

        localctx = SqlBaseParser.UnpivotValueColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_unpivotValueColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotNameColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotNameColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotNameColumn" ):
                listener.enterUnpivotNameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotNameColumn" ):
                listener.exitUnpivotNameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotNameColumn" ):
                return visitor.visitUnpivotNameColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotNameColumn(self):

        localctx = SqlBaseParser.UnpivotNameColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_unpivotNameColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnAndAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotColumnContext,0)


        def unpivotAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumnAndAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumnAndAlias" ):
                listener.enterUnpivotColumnAndAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumnAndAlias" ):
                listener.exitUnpivotColumnAndAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumnAndAlias" ):
                return visitor.visitUnpivotColumnAndAlias(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumnAndAlias(self):

        localctx = SqlBaseParser.UnpivotColumnAndAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_unpivotColumnAndAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2496
            self.unpivotColumn()
            self.state = 2498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2497
                self.unpivotAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotColumn" ):
                listener.enterUnpivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotColumn" ):
                listener.exitUnpivotColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotColumn" ):
                return visitor.visitUnpivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def unpivotColumn(self):

        localctx = SqlBaseParser.UnpivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_unpivotColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unpivotAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivotAlias" ):
                listener.enterUnpivotAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivotAlias" ):
                listener.exitUnpivotAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivotAlias" ):
                return visitor.visitUnpivotAlias(self)
            else:
                return visitor.visitChildren(self)




    def unpivotAlias(self):

        localctx = SqlBaseParser.UnpivotAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_unpivotAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2502
                self.match(SqlBaseParser.AS)


            self.state = 2505
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.match(SqlBaseParser.LATERAL)
            self.state = 2508
            self.match(SqlBaseParser.VIEW)
            self.state = 2510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2509
                self.match(SqlBaseParser.OUTER)


            self.state = 2512
            self.qualifiedName()
            self.state = 2513
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2514
                self.expression()
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2515
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2516
                    self.expression()
                    self.state = 2521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2524
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2525
            localctx.tblName = self.identifier()
            self.state = 2537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 2526
                    self.match(SqlBaseParser.AS)


                self.state = 2529
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2530
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2531
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2536
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,308,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            _la = self._input.LA(1)
            if not(_la==10 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def relationExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationExtensionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationExtensionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2541
                self.match(SqlBaseParser.LATERAL)


            self.state = 2544
            self.relationPrimary()
            self.state = 2548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2545
                    self.relationExtension() 
                self.state = 2550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,0)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def unpivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.UnpivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationExtension" ):
                listener.enterRelationExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationExtension" ):
                listener.exitRelationExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationExtension" ):
                return visitor.visitRelationExtension(self)
            else:
                return visitor.visitChildren(self)




    def relationExtension(self):

        localctx = SqlBaseParser.RelationExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_relationExtension)
        try:
            self.state = 2554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 60, 122, 143, 154, 160, 191, 244, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2551
                self.joinRelation()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2552
                self.pivotClause()
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2553
                self.unpivotClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_joinRelation)
        try:
            self.state = 2573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 60, 122, 143, 154, 160, 244, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2556
                self.joinType()
                self.state = 2557
                self.match(SqlBaseParser.JOIN)
                self.state = 2559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2558
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2561
                localctx.right = self.relationPrimary()
                self.state = 2563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2562
                    self.joinCriteria()


                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2565
                self.match(SqlBaseParser.NATURAL)
                self.state = 2566
                self.joinType()
                self.state = 2567
                self.match(SqlBaseParser.JOIN)
                self.state = 2569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2568
                    self.match(SqlBaseParser.LATERAL)


                self.state = 2571
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2575
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2578
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2579
                self.match(SqlBaseParser.LEFT)
                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2580
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 2583
                    self.match(SqlBaseParser.LEFT)


                self.state = 2586
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2587
                self.match(SqlBaseParser.RIGHT)
                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2588
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2591
                self.match(SqlBaseParser.FULL)
                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2592
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 2595
                    self.match(SqlBaseParser.LEFT)


                self.state = 2598
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_joinCriteria)
        try:
            self.state = 2605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2601
                self.match(SqlBaseParser.ON)
                self.state = 2602
                self.booleanExpression(0)
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2603
                self.match(SqlBaseParser.USING)
                self.state = 2604
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seed = None # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext,0)


        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 2608
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2609
                self.sampleMethod()


            self.state = 2612
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2613
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2614
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2615
                localctx.seed = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2616
                self.match(SqlBaseParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)
        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)
        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 2619
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)


                self.state = 2622
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==375 or _la==377):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2623
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                self.expression()
                self.state = 2625
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2627
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 2628
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2629
                self.match(SqlBaseParser.OUT)
                self.state = 2630
                self.match(SqlBaseParser.OF)
                self.state = 2631
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 2632
                    self.match(SqlBaseParser.ON)
                    self.state = 2638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                    if la_ == 1:
                        self.state = 2633
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2634
                        self.qualifiedName()
                        self.state = 2635
                        self.match(SqlBaseParser.LEFT_PAREN)
                        self.state = 2636
                        self.match(SqlBaseParser.RIGHT_PAREN)
                        pass




                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2642
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2646
            self.identifierSeq()
            self.state = 2647
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2650
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2651
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2658
            self.orderedIdentifier()
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2659
                self.match(SqlBaseParser.COMMA)
                self.state = 2660
                self.orderedIdentifier()
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2666
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==86:
                self.state = 2669
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==21 or _la==86):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2673
            self.identifierComment()
            self.state = 2678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2674
                self.match(SqlBaseParser.COMMA)
                self.state = 2675
                self.identifierComment()
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2681
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2683
            self.identifier()
            self.state = 2685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2684
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def temporalClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TemporalClauseContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_relationPrimary)
        try:
            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2687
                self.identifierReference()
                self.state = 2689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2688
                    self.temporalClause()


                self.state = 2692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 2691
                    self.sample()


                self.state = 2694
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2696
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2697
                self.query()
                self.state = 2698
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2699
                    self.sample()


                self.state = 2702
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2704
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2705
                self.relation()
                self.state = 2706
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2707
                    self.sample()


                self.state = 2710
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2712
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2713
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.match(SqlBaseParser.VALUES)
            self.state = 2717
            self.expression()
            self.state = 2722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2718
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2719
                    self.expression() 
                self.state = 2724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

            self.state = 2725
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableSubqueryArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierReferenceContext,0)


        def tableArgumentPartitioning(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentPartitioningContext,0)


        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableSubqueryArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableSubqueryArgument" ):
                listener.enterFunctionTableSubqueryArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableSubqueryArgument" ):
                listener.exitFunctionTableSubqueryArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTableSubqueryArgument" ):
                return visitor.visitFunctionTableSubqueryArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionTableSubqueryArgument(self):

        localctx = SqlBaseParser.FunctionTableSubqueryArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_functionTableSubqueryArgument)
        self._la = 0 # Token type
        try:
            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2727
                self.match(SqlBaseParser.TABLE)
                self.state = 2728
                self.identifierReference()
                self.state = 2730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==212 or _la==340:
                    self.state = 2729
                    self.tableArgumentPartitioning()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2732
                self.match(SqlBaseParser.TABLE)
                self.state = 2733
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2734
                self.identifierReference()
                self.state = 2735
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==212 or _la==340:
                    self.state = 2736
                    self.tableArgumentPartitioning()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2739
                self.match(SqlBaseParser.TABLE)
                self.state = 2740
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2741
                self.query()
                self.state = 2742
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==212 or _la==340:
                    self.state = 2743
                    self.tableArgumentPartitioning()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentPartitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgumentPartitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentPartitioning" ):
                listener.enterTableArgumentPartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentPartitioning" ):
                listener.exitTableArgumentPartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgumentPartitioning" ):
                return visitor.visitTableArgumentPartitioning(self)
            else:
                return visitor.visitChildren(self)




    def tableArgumentPartitioning(self):

        localctx = SqlBaseParser.TableArgumentPartitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tableArgumentPartitioning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [340]:
                self.state = 2748
                self.match(SqlBaseParser.WITH)
                self.state = 2749
                self.match(SqlBaseParser.SINGLE)
                self.state = 2750
                self.match(SqlBaseParser.PARTITION)
                pass
            elif token in [92, 212]:
                self.state = 2751
                _la = self._input.LA(1)
                if not(_la==92 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2752
                self.match(SqlBaseParser.BY)
                self.state = 2765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                if la_ == 1:
                    self.state = 2753
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2754
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2755
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2756
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2762
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 2764
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    pass


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204 or _la==271:
                self.state = 2769
                _la = self._input.LA(1)
                if not(_la==204 or _la==271):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2770
                self.match(SqlBaseParser.BY)

                self.state = 2783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 2771
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 2772
                    self.sortItem()
                    self.state = 2777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2773
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2774
                        self.sortItem()
                        self.state = 2779
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2780
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 2782
                    self.sortItem()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableNamedArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentifierContext
            self.table = None # FunctionTableSubqueryArgumentContext

        def FAT_ARROW(self):
            return self.getToken(SqlBaseParser.FAT_ARROW, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def functionTableSubqueryArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableSubqueryArgumentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableNamedArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableNamedArgumentExpression" ):
                listener.enterFunctionTableNamedArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableNamedArgumentExpression" ):
                listener.exitFunctionTableNamedArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTableNamedArgumentExpression" ):
                return visitor.visitFunctionTableNamedArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionTableNamedArgumentExpression(self):

        localctx = SqlBaseParser.FunctionTableNamedArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_functionTableNamedArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2787
            localctx.key = self.identifier()
            self.state = 2788
            self.match(SqlBaseParser.FAT_ARROW)
            self.state = 2789
            localctx.table = self.functionTableSubqueryArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableReferenceArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTableSubqueryArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableSubqueryArgumentContext,0)


        def functionTableNamedArgumentExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableNamedArgumentExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableReferenceArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableReferenceArgument" ):
                listener.enterFunctionTableReferenceArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableReferenceArgument" ):
                listener.exitFunctionTableReferenceArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTableReferenceArgument" ):
                return visitor.visitFunctionTableReferenceArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionTableReferenceArgument(self):

        localctx = SqlBaseParser.FunctionTableReferenceArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_functionTableReferenceArgument)
        try:
            self.state = 2793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2791
                self.functionTableSubqueryArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2792
                self.functionTableNamedArgumentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTableReferenceArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableReferenceArgumentContext,0)


        def functionArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTableArgument" ):
                listener.enterFunctionTableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTableArgument" ):
                listener.exitFunctionTableArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTableArgument" ):
                return visitor.visitFunctionTableArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionTableArgument(self):

        localctx = SqlBaseParser.FunctionTableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_functionTableArgument)
        try:
            self.state = 2797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2795
                self.functionTableReferenceArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2796
                self.functionArgument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # FunctionNameContext

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)


        def functionTableArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionTableArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionTableArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2799
            localctx.funcName = self.functionName()
            self.state = 2800
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2801
                self.functionTableArgument()
                self.state = 2806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2802
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2803
                    self.functionTableArgument()
                    self.state = 2808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2811
            self.match(SqlBaseParser.RIGHT_PAREN)
            self.state = 2812
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2814
                    self.match(SqlBaseParser.AS)


                self.state = 2817
                self.strictIdentifier()
                self.state = 2819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2818
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # StringLitContext
            self.props = None # PropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # StringLitContext
            self.escapedBy = None # StringLitContext
            self.collectionItemsTerminatedBy = None # StringLitContext
            self.keysTerminatedBy = None # StringLitContext
            self.linesSeparatedBy = None # StringLitContext
            self.nullDefinedAs = None # StringLitContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_rowFormat)
        try:
            self.state = 2872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2823
                self.match(SqlBaseParser.ROW)
                self.state = 2824
                self.match(SqlBaseParser.FORMAT)
                self.state = 2825
                self.match(SqlBaseParser.SERDE)
                self.state = 2826
                localctx.name = self.stringLit()
                self.state = 2830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2827
                    self.match(SqlBaseParser.WITH)
                    self.state = 2828
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 2829
                    localctx.props = self.propertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2832
                self.match(SqlBaseParser.ROW)
                self.state = 2833
                self.match(SqlBaseParser.FORMAT)
                self.state = 2834
                self.match(SqlBaseParser.DELIMITED)
                self.state = 2844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2835
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 2836
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2837
                    self.match(SqlBaseParser.BY)
                    self.state = 2838
                    localctx.fieldsTerminatedBy = self.stringLit()
                    self.state = 2842
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        self.state = 2839
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 2840
                        self.match(SqlBaseParser.BY)
                        self.state = 2841
                        localctx.escapedBy = self.stringLit()




                self.state = 2851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2846
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 2847
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 2848
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2849
                    self.match(SqlBaseParser.BY)
                    self.state = 2850
                    localctx.collectionItemsTerminatedBy = self.stringLit()


                self.state = 2858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2853
                    self.match(SqlBaseParser.MAP)
                    self.state = 2854
                    self.match(SqlBaseParser.KEYS)
                    self.state = 2855
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2856
                    self.match(SqlBaseParser.BY)
                    self.state = 2857
                    localctx.keysTerminatedBy = self.stringLit()


                self.state = 2864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2860
                    self.match(SqlBaseParser.LINES)
                    self.state = 2861
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2862
                    self.match(SqlBaseParser.BY)
                    self.state = 2863
                    localctx.linesSeparatedBy = self.stringLit()


                self.state = 2870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2866
                    self.match(SqlBaseParser.NULL)
                    self.state = 2867
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 2868
                    self.match(SqlBaseParser.AS)
                    self.state = 2869
                    localctx.nullDefinedAs = self.stringLit()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = SqlBaseParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2874
            self.multipartIdentifier()
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2875
                self.match(SqlBaseParser.COMMA)
                self.state = 2876
                self.multipartIdentifier()
                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = SqlBaseParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2883
                    self.match(SqlBaseParser.DOT)
                    self.state = 2884
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifierProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierPropertyList" ):
                listener.enterMultipartIdentifierPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierPropertyList" ):
                listener.exitMultipartIdentifierPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierPropertyList" ):
                return visitor.visitMultipartIdentifierPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierPropertyList(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_multipartIdentifierPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2890
            self.multipartIdentifierProperty()
            self.state = 2895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2891
                self.match(SqlBaseParser.COMMA)
                self.state = 2892
                self.multipartIdentifierProperty()
                self.state = 2897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # PropertyListContext

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def propertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierProperty" ):
                listener.enterMultipartIdentifierProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierProperty" ):
                listener.exitMultipartIdentifierProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierProperty" ):
                return visitor.visitMultipartIdentifierProperty(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierProperty(self):

        localctx = SqlBaseParser.MultipartIdentifierPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_multipartIdentifierProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2898
            self.multipartIdentifier()
            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==202:
                self.state = 2899
                self.match(SqlBaseParser.OPTIONS)
                self.state = 2900
                localctx.options = self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2903
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2904
                self.match(SqlBaseParser.DOT)


            self.state = 2908
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2910
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2911
                self.match(SqlBaseParser.DOT)


            self.state = 2915
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2917
            self.expression()
            self.state = 2925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 2919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2918
                    self.match(SqlBaseParser.AS)


                self.state = 2923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2921
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2922
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2927
            self.namedExpression()
            self.state = 2932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2928
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2929
                    self.namedExpression() 
                self.state = 2934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._partitionField = None # PartitionFieldContext
            self.fields = list() # of PartitionFieldContexts

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def partitionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFieldList" ):
                listener.enterPartitionFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFieldList" ):
                listener.exitPartitionFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFieldList" ):
                return visitor.visitPartitionFieldList(self)
            else:
                return visitor.visitChildren(self)




    def partitionFieldList(self):

        localctx = SqlBaseParser.PartitionFieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_partitionFieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2935
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 2936
            localctx._partitionField = self.partitionField()
            localctx.fields.append(localctx._partitionField)
            self.state = 2941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2937
                self.match(SqlBaseParser.COMMA)
                self.state = 2938
                localctx._partitionField = self.partitionField()
                localctx.fields.append(localctx._partitionField)
                self.state = 2943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2944
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionField

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionColumnContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionColumn" ):
                listener.enterPartitionColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionColumn" ):
                listener.exitPartitionColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionColumn" ):
                return visitor.visitPartitionColumn(self)
            else:
                return visitor.visitChildren(self)


    class PartitionTransformContext(PartitionFieldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PartitionFieldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transform(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionTransform" ):
                listener.enterPartitionTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionTransform" ):
                listener.exitPartitionTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionTransform" ):
                return visitor.visitPartitionTransform(self)
            else:
                return visitor.visitChildren(self)



    def partitionField(self):

        localctx = SqlBaseParser.PartitionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_partitionField)
        try:
            self.state = 2948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PartitionTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2946
                self.transform()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PartitionColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2947
                self.colType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = SqlBaseParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2950
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2951
                localctx.transformName = self.identifier()
                self.state = 2952
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2953
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2954
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2955
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2961
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = SqlBaseParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_transformArgument)
        try:
            self.state = 2967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2965
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2966
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2969
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentifierContext
            self.value = None # ExpressionContext

        def FAT_ARROW(self):
            return self.getToken(SqlBaseParser.FAT_ARROW, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedArgumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentExpression" ):
                listener.enterNamedArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentExpression" ):
                listener.exitNamedArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgumentExpression" ):
                return visitor.visitNamedArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedArgumentExpression(self):

        localctx = SqlBaseParser.NamedArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_namedArgumentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            localctx.key = self.identifier()
            self.state = 2972
            self.match(SqlBaseParser.FAT_ARROW)
            self.state = 2973
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def namedArgumentExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedArgumentExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgument" ):
                return visitor.visitFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionArgument(self):

        localctx = SqlBaseParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_functionArgument)
        try:
            self.state = 2977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2975
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2976
                self.namedArgumentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSeq" ):
                listener.enterExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSeq" ):
                listener.exitExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSeq" ):
                return visitor.visitExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def expressionSeq(self):

        localctx = SqlBaseParser.ExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_expressionSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self.expression()
            self.state = 2984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2980
                self.match(SqlBaseParser.COMMA)
                self.state = 2981
                self.expression()
                self.state = 2986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2988
                self.match(SqlBaseParser.NOT)
                self.state = 2989
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2990
                self.match(SqlBaseParser.EXISTS)
                self.state = 2991
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 2992
                self.query()
                self.state = 2993
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2995
                self.valueExpression(0)
                self.state = 2997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                if la_ == 1:
                    self.state = 2996
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3009
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3007
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3001
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3002
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 3003
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3004
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3005
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 3006
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # StringLitContext
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3012
                    self.match(SqlBaseParser.NOT)


                self.state = 3015
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 3016
                localctx.lower = self.valueExpression(0)
                self.state = 3017
                self.match(SqlBaseParser.AND)
                self.state = 3018
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3020
                    self.match(SqlBaseParser.NOT)


                self.state = 3023
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 3024
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3025
                self.expression()
                self.state = 3030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 3026
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3027
                    self.expression()
                    self.state = 3032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3033
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3035
                    self.match(SqlBaseParser.NOT)


                self.state = 3038
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 3039
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3040
                self.query()
                self.state = 3041
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3043
                    self.match(SqlBaseParser.NOT)


                self.state = 3046
                localctx.kind = self.match(SqlBaseParser.RLIKE)
                self.state = 3047
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3048
                    self.match(SqlBaseParser.NOT)


                self.state = 3051
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==161 or _la==162):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3052
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==10 or _la==16 or _la==270):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3066
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 3053
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3054
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 3055
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3056
                    self.expression()
                    self.state = 3061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3057
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3058
                        self.expression()
                        self.state = 3063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3064
                    self.match(SqlBaseParser.RIGHT_PAREN)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3068
                    self.match(SqlBaseParser.NOT)


                self.state = 3071
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==161 or _la==162):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3072
                localctx.pattern = self.valueExpression(0)
                self.state = 3075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 3073
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 3074
                    localctx.escapeChar = self.stringLit()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3077
                self.match(SqlBaseParser.IS)
                self.state = 3079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3078
                    self.match(SqlBaseParser.NOT)


                self.state = 3081
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3082
                self.match(SqlBaseParser.IS)
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3083
                    self.match(SqlBaseParser.NOT)


                self.state = 3086
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==109 or _la==309 or _la==318):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3087
                self.match(SqlBaseParser.IS)
                self.state = 3089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 3088
                    self.match(SqlBaseParser.NOT)


                self.state = 3091
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 3092
                self.match(SqlBaseParser.FROM)
                self.state = 3093
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 278
        self.enterRecursionRule(localctx, 278, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3097
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3098
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 353)) & ~0x3f) == 0 and ((1 << (_la - 353)) & 35) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3099
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3121
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3102
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3103
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==93 or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3104
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3105
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3106
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 353)) & ~0x3f) == 0 and ((1 << (_la - 353)) & 259) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3107
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3108
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3109
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 3110
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3111
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3112
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 3113
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3114
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3115
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 3116
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3117
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3118
                        self.comparisonOperator()
                        self.state = 3119
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DatetimeUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_datetimeUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeUnit" ):
                listener.enterDatetimeUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeUnit" ):
                listener.exitDatetimeUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatetimeUnit" ):
                return visitor.visitDatetimeUnit(self)
            else:
                return visitor.visitChildren(self)




    def datetimeUnit(self):

        localctx = SqlBaseParser.DatetimeUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_datetimeUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3126
            _la = self._input.LA(1)
            if not(_la==67 or _la==69 or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 2990671627550721) != 0) or _la==226 or _la==252 or _la==335 or _la==342):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class CastByColonContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def DOUBLE_COLON(self):
            return self.getToken(SqlBaseParser.DOUBLE_COLON, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastByColon" ):
                listener.enterCastByColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastByColon" ):
                listener.exitCastByColon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastByColon" ):
                return visitor.visitCastByColon(self)
            else:
                return visitor.visitChildren(self)


    class TimestampaddContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.invalidUnit = None # StringLitContext
            self.unitsAmount = None # ValueExpressionContext
            self.timestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)
        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)
        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampadd" ):
                listener.enterTimestampadd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampadd" ):
                listener.exitTimestampadd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampadd" ):
                return visitor.visitTimestampadd(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.str_ = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.len_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def ARROW(self):
            return self.getToken(SqlBaseParser.ARROW, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class Any_valueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_value" ):
                listener.enterAny_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_value" ):
                listener.exitAny_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_value" ):
                return visitor.visitAny_value(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class CurrentLikeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentLike" ):
                listener.enterCurrentLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentLike" ):
                listener.exitCurrentLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentLike" ):
                return visitor.visitCurrentLike(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def exceptClause(self):
            return self.getTypedRuleContext(SqlBaseParser.ExceptClauseContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.input_ = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_BRACKET(self):
            return self.getToken(SqlBaseParser.LEFT_BRACKET, 0)
        def RIGHT_BRACKET(self):
            return self.getToken(SqlBaseParser.RIGHT_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class TimestampdiffContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.unit = None # DatetimeUnitContext
            self.invalidUnit = None # StringLitContext
            self.startTimestamp = None # ValueExpressionContext
            self.endTimestamp = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)
        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)
        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)
        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)
        def datetimeUnit(self):
            return self.getTypedRuleContext(SqlBaseParser.DatetimeUnitContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampdiff" ):
                listener.enterTimestampdiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampdiff" ):
                listener.exitTimestampdiff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampdiff" ):
                return visitor.visitTimestampdiff(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._functionArgument = None # FunctionArgumentContext
            self.argument = list() # of FunctionArgumentContexts
            self.where = None # BooleanExpressionContext
            self.nullsOption = None # Token
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.LEFT_PAREN)
            else:
                return self.getToken(SqlBaseParser.LEFT_PAREN, i)
        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.RIGHT_PAREN)
            else:
                return self.getToken(SqlBaseParser.RIGHT_PAREN, i)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)
        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.str_ = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 282
        self.enterRecursionRule(localctx, 282, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CurrentLikeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3129
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 13) != 0) or _la==261 or _la==324):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimestampaddContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3130
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==74 or _la==75 or _la==298):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3131
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 3132
                    localctx.unit = self.datetimeUnit()
                    pass

                elif la_ == 2:
                    self.state = 3133
                    localctx.invalidUnit = self.stringLit()
                    pass


                self.state = 3136
                self.match(SqlBaseParser.COMMA)
                self.state = 3137
                localctx.unitsAmount = self.valueExpression(0)
                self.state = 3138
                self.match(SqlBaseParser.COMMA)
                self.state = 3139
                localctx.timestamp = self.valueExpression(0)
                self.state = 3140
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TimestampdiffContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3142
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==76 or _la==77 or _la==294 or _la==299):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3143
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3144
                    localctx.unit = self.datetimeUnit()
                    pass

                elif la_ == 2:
                    self.state = 3145
                    localctx.invalidUnit = self.stringLit()
                    pass


                self.state = 3148
                self.match(SqlBaseParser.COMMA)
                self.state = 3149
                localctx.startTimestamp = self.valueExpression(0)
                self.state = 3150
                self.match(SqlBaseParser.COMMA)
                self.state = 3151
                localctx.endTimestamp = self.valueExpression(0)
                self.state = 3152
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3154
                self.match(SqlBaseParser.CASE)
                self.state = 3156 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3155
                    self.whenClause()
                    self.state = 3158 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==337):
                        break

                self.state = 3162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3160
                    self.match(SqlBaseParser.ELSE)
                    self.state = 3161
                    localctx.elseExpression = self.expression()


                self.state = 3164
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3166
                self.match(SqlBaseParser.CASE)
                self.state = 3167
                localctx.value = self.expression()
                self.state = 3169 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3168
                    self.whenClause()
                    self.state = 3171 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==337):
                        break

                self.state = 3175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3173
                    self.match(SqlBaseParser.ELSE)
                    self.state = 3174
                    localctx.elseExpression = self.expression()


                self.state = 3177
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3179
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==36 or _la==311):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3180
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3181
                self.expression()
                self.state = 3182
                self.match(SqlBaseParser.AS)
                self.state = 3183
                self.dataType()
                self.state = 3184
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3186
                self.match(SqlBaseParser.STRUCT)
                self.state = 3187
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 3188
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3189
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3190
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3195
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3198
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3199
                self.match(SqlBaseParser.FIRST)
                self.state = 3200
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3201
                self.expression()
                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3202
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3203
                    self.match(SqlBaseParser.NULLS)


                self.state = 3206
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.Any_valueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3208
                self.match(SqlBaseParser.ANY_VALUE)
                self.state = 3209
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3210
                self.expression()
                self.state = 3213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3211
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3212
                    self.match(SqlBaseParser.NULLS)


                self.state = 3215
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3217
                self.match(SqlBaseParser.LAST)
                self.state = 3218
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3219
                self.expression()
                self.state = 3222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 3220
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 3221
                    self.match(SqlBaseParser.NULLS)


                self.state = 3224
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3226
                self.match(SqlBaseParser.POSITION)
                self.state = 3227
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3228
                localctx.substr = self.valueExpression(0)
                self.state = 3229
                self.match(SqlBaseParser.IN)
                self.state = 3230
                localctx.str_ = self.valueExpression(0)
                self.state = 3231
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3233
                self.constant()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3234
                self.match(SqlBaseParser.ASTERISK)
                self.state = 3236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 3235
                    self.exceptClause()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3238
                self.qualifiedName()
                self.state = 3239
                self.match(SqlBaseParser.DOT)
                self.state = 3240
                self.match(SqlBaseParser.ASTERISK)
                self.state = 3242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 3241
                    self.exceptClause()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3244
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3245
                self.namedExpression()
                self.state = 3248 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3246
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3247
                    self.namedExpression()
                    self.state = 3250 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 3252
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3254
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3255
                self.query()
                self.state = 3256
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3258
                self.functionName()
                self.state = 3259
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3261
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                    if la_ == 1:
                        self.state = 3260
                        self.setQuantifier()


                    self.state = 3263
                    localctx._functionArgument = self.functionArgument()
                    localctx.argument.append(localctx._functionArgument)
                    self.state = 3268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3264
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3265
                        localctx._functionArgument = self.functionArgument()
                        localctx.argument.append(localctx._functionArgument)
                        self.state = 3270
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3273
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                if la_ == 1:
                    self.state = 3274
                    self.match(SqlBaseParser.WITHIN)
                    self.state = 3275
                    self.match(SqlBaseParser.GROUP)
                    self.state = 3276
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3277
                    self.match(SqlBaseParser.ORDER)
                    self.state = 3278
                    self.match(SqlBaseParser.BY)
                    self.state = 3279
                    self.sortItem()
                    self.state = 3284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3280
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3281
                        self.sortItem()
                        self.state = 3286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3287
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3291
                    self.match(SqlBaseParser.FILTER)
                    self.state = 3292
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3293
                    self.match(SqlBaseParser.WHERE)
                    self.state = 3294
                    localctx.where = self.booleanExpression(0)
                    self.state = 3295
                    self.match(SqlBaseParser.RIGHT_PAREN)


                self.state = 3301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                if la_ == 1:
                    self.state = 3299
                    localctx.nullsOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==136 or _la==241):
                        localctx.nullsOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3300
                    self.match(SqlBaseParser.NULLS)


                self.state = 3305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3303
                    self.match(SqlBaseParser.OVER)
                    self.state = 3304
                    self.windowSpec()


                pass

            elif la_ == 18:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3307
                self.identifier()
                self.state = 3308
                self.match(SqlBaseParser.ARROW)
                self.state = 3309
                self.expression()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3311
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3312
                self.identifier()
                self.state = 3315 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3313
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3314
                    self.identifier()
                    self.state = 3317 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 3319
                self.match(SqlBaseParser.RIGHT_PAREN)
                self.state = 3320
                self.match(SqlBaseParser.ARROW)
                self.state = 3321
                self.expression()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3323
                self.identifier()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3324
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3325
                self.expression()
                self.state = 3326
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3328
                self.match(SqlBaseParser.EXTRACT)
                self.state = 3329
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3330
                localctx.field = self.identifier()
                self.state = 3331
                self.match(SqlBaseParser.FROM)
                self.state = 3332
                localctx.source = self.valueExpression(0)
                self.state = 3333
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3335
                _la = self._input.LA(1)
                if not(_la==280 or _la==281):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3336
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3337
                localctx.str_ = self.valueExpression(0)
                self.state = 3338
                _la = self._input.LA(1)
                if not(_la==4 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3339
                localctx.pos = self.valueExpression(0)
                self.state = 3342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==117:
                    self.state = 3340
                    _la = self._input.LA(1)
                    if not(_la==4 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3341
                    localctx.len_ = self.valueExpression(0)


                self.state = 3344
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3346
                self.match(SqlBaseParser.TRIM)
                self.state = 3347
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 3348
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==28 or _la==159 or _la==304):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
                if la_ == 1:
                    self.state = 3351
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3354
                self.match(SqlBaseParser.FROM)
                self.state = 3355
                localctx.srcStr = self.valueExpression(0)
                self.state = 3356
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3358
                self.match(SqlBaseParser.OVERLAY)
                self.state = 3359
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3360
                localctx.input_ = self.valueExpression(0)
                self.state = 3361
                self.match(SqlBaseParser.PLACING)
                self.state = 3362
                localctx.replace = self.valueExpression(0)
                self.state = 3363
                self.match(SqlBaseParser.FROM)
                self.state = 3364
                localctx.position = self.valueExpression(0)
                self.state = 3367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 3365
                    self.match(SqlBaseParser.FOR)
                    self.state = 3366
                    localctx.length = self.valueExpression(0)


                self.state = 3369
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3384
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.CastByColonContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3373
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 3374
                        self.match(SqlBaseParser.DOUBLE_COLON)
                        self.state = 3375
                        self.dataType()
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3376
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3377
                        self.match(SqlBaseParser.LEFT_BRACKET)
                        self.state = 3378
                        localctx.index = self.valueExpression(0)
                        self.state = 3379
                        self.match(SqlBaseParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3381
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3382
                        self.match(SqlBaseParser.DOT)
                        self.state = 3383
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unsupportedType = None # IdentifierContext

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_literalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralType" ):
                listener.enterLiteralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralType" ):
                listener.exitLiteralType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralType" ):
                return visitor.visitLiteralType(self)
            else:
                return visitor.visitChildren(self)




    def literalType(self):

        localctx = SqlBaseParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_literalType)
        try:
            self.state = 3396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3389
                self.match(SqlBaseParser.DATE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3390
                self.match(SqlBaseParser.TIMESTAMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3391
                self.match(SqlBaseParser.TIMESTAMP_LTZ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3392
                self.match(SqlBaseParser.TIMESTAMP_NTZ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3393
                self.match(SqlBaseParser.INTERVAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3394
                self.match(SqlBaseParser.BINARY_HEX)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3395
                localctx.unsupportedType = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringLitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringLitContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalType(self):
            return self.getTypedRuleContext(SqlBaseParser.LiteralTypeContext,0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class PosParameterLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self):
            return self.getToken(SqlBaseParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosParameterLiteral" ):
                listener.enterPosParameterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosParameterLiteral" ):
                listener.exitPosParameterLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosParameterLiteral" ):
                return visitor.visitPosParameterLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NamedParameterLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedParameterLiteral" ):
                listener.enterNamedParameterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedParameterLiteral" ):
                listener.exitNamedParameterLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedParameterLiteral" ):
                return visitor.visitNamedParameterLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_constant)
        try:
            self.state = 3413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3398
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PosParameterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3399
                self.match(SqlBaseParser.QUESTION)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.NamedParameterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3400
                self.match(SqlBaseParser.COLON)
                self.state = 3401
                self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3402
                self.interval()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3403
                self.literalType()
                self.state = 3404
                self.stringLit()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3406
                self.number()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3407
                self.booleanValue()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3409 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3408
                        self.stringLit()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3411 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,436,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3415
            _la = self._input.LA(1)
            if not(((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3417
            _la = self._input.LA(1)
            if not(_la==93 or ((((_la - 353)) & ~0x3f) == 0 and ((1 << (_la - 353)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3419
            _la = self._input.LA(1)
            if not(_la==14 or _la==139 or _la==193 or _la==203):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3421
            _la = self._input.LA(1)
            if not(_la==109 or _la==309):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            self.match(SqlBaseParser.INTERVAL)
            self.state = 3426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 3424
                self.errorCapturingMultiUnitsInterval()
                pass

            elif la_ == 2:
                self.state = 3425
                self.errorCapturingUnitToUnitInterval()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # MultiUnitsIntervalContext

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3428
            localctx.body = self.multiUnitsInterval()
            self.state = 3430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 3429
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unitInMultiUnits = None # UnitInMultiUnitsContext
            self.unit = list() # of UnitInMultiUnitsContexts

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,i)


        def unitInMultiUnits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInMultiUnitsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInMultiUnitsContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = SqlBaseParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3435 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3432
                    self.intervalValue()
                    self.state = 3433
                    localctx._unitInMultiUnits = self.unitInMultiUnits()
                    localctx.unit.append(localctx._unitInMultiUnits)

                else:
                    raise NoViableAltException(self)
                self.state = 3437 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,440,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            localctx.body = self.unitToUnitInterval()
            self.state = 3442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3440
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3441
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.from_ = None # UnitInUnitToUnitContext
            self.to = None # UnitInUnitToUnitContext

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def unitInUnitToUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitInUnitToUnitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitInUnitToUnitContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = SqlBaseParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            localctx.value = self.intervalValue()
            self.state = 3445
            localctx.from_ = self.unitInUnitToUnit()
            self.state = 3446
            self.match(SqlBaseParser.TO)
            self.state = 3447
            localctx.to = self.unitInUnitToUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3449
                _la = self._input.LA(1)
                if not(_la==353 or _la==354):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3452
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.state = 3453
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                self.state = 3454
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInMultiUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInMultiUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInMultiUnits" ):
                listener.enterUnitInMultiUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInMultiUnits" ):
                listener.exitUnitInMultiUnits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitInMultiUnits" ):
                return visitor.visitUnitInMultiUnits(self)
            else:
                return visitor.visitChildren(self)




    def unitInMultiUnits(self):

        localctx = SqlBaseParser.UnitInMultiUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_unitInMultiUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3457
            _la = self._input.LA(1)
            if not(_la==67 or _la==68 or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 441317579110219779) != 0) or _la==252 or _la==253 or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitInUnitToUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitInUnitToUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitInUnitToUnit" ):
                listener.enterUnitInUnitToUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitInUnitToUnit" ):
                listener.exitUnitInUnitToUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitInUnitToUnit" ):
                return visitor.visitUnitInUnitToUnit(self)
            else:
                return visitor.visitChildren(self)




    def unitInUnitToUnit(self):

        localctx = SqlBaseParser.UnitInUnitToUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_unitInUnitToUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3459
            _la = self._input.LA(1)
            if not(_la==67 or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 2814749767106561) != 0) or _la==252 or _la==342):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_colPosition)
        try:
            self.state = 3464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3461
                localctx.position = self.match(SqlBaseParser.FIRST)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3462
                localctx.position = self.match(SqlBaseParser.AFTER)
                self.state = 3463
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unsupportedType = None # IdentifierContext

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = SqlBaseParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_type)
        try:
            self.state = 3497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3466
                self.match(SqlBaseParser.BOOLEAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3467
                self.match(SqlBaseParser.TINYINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3468
                self.match(SqlBaseParser.BYTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3469
                self.match(SqlBaseParser.SMALLINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3470
                self.match(SqlBaseParser.SHORT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3471
                self.match(SqlBaseParser.INT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3472
                self.match(SqlBaseParser.INTEGER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3473
                self.match(SqlBaseParser.BIGINT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3474
                self.match(SqlBaseParser.LONG)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3475
                self.match(SqlBaseParser.FLOAT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3476
                self.match(SqlBaseParser.REAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3477
                self.match(SqlBaseParser.DOUBLE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3478
                self.match(SqlBaseParser.DATE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3479
                self.match(SqlBaseParser.TIMESTAMP)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3480
                self.match(SqlBaseParser.TIMESTAMP_NTZ)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3481
                self.match(SqlBaseParser.TIMESTAMP_LTZ)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3482
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3483
                self.match(SqlBaseParser.CHARACTER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3484
                self.match(SqlBaseParser.CHAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3485
                self.match(SqlBaseParser.VARCHAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3486
                self.match(SqlBaseParser.BINARY)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3487
                self.match(SqlBaseParser.DECIMAL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3488
                self.match(SqlBaseParser.DEC)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3489
                self.match(SqlBaseParser.NUMERIC)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3490
                self.match(SqlBaseParser.VOID)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3491
                self.match(SqlBaseParser.INTERVAL)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3492
                self.match(SqlBaseParser.VARIANT)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3493
                self.match(SqlBaseParser.ARRAY)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 3494
                self.match(SqlBaseParser.STRUCT)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 3495
                self.match(SqlBaseParser.MAP)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 3496
                localctx.unsupportedType = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class YearMonthIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)
        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MONTH)
            else:
                return self.getToken(SqlBaseParser.MONTH, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearMonthIntervalDataType" ):
                listener.enterYearMonthIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearMonthIntervalDataType" ):
                listener.exitYearMonthIntervalDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYearMonthIntervalDataType" ):
                return visitor.visitYearMonthIntervalDataType(self)
            else:
                return visitor.visitChildren(self)


    class DayTimeIntervalDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.from_ = None # Token
            self.to = None # Token
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)
        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.HOUR)
            else:
                return self.getToken(SqlBaseParser.HOUR, i)
        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUTE)
            else:
                return self.getToken(SqlBaseParser.MINUTE, i)
        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SECOND)
            else:
                return self.getToken(SqlBaseParser.SECOND, i)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayTimeIntervalDataType" ):
                listener.enterDayTimeIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayTimeIntervalDataType" ):
                listener.exitDayTimeIntervalDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDayTimeIntervalDataType" ):
                return visitor.visitDayTimeIntervalDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3499
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 3500
                self.match(SqlBaseParser.LT)
                self.state = 3501
                self.dataType()
                self.state = 3502
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3504
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 3505
                self.match(SqlBaseParser.LT)
                self.state = 3506
                self.dataType()
                self.state = 3507
                self.match(SqlBaseParser.COMMA)
                self.state = 3508
                self.dataType()
                self.state = 3509
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3511
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 3518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [349]:
                    self.state = 3512
                    self.match(SqlBaseParser.LT)
                    self.state = 3514
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
                    if la_ == 1:
                        self.state = 3513
                        self.complexColTypeList()


                    self.state = 3516
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [347]:
                    self.state = 3517
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.YearMonthIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3520
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3521
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==183 or _la==342):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                if la_ == 1:
                    self.state = 3522
                    self.match(SqlBaseParser.TO)
                    self.state = 3523
                    localctx.to = self.match(SqlBaseParser.MONTH)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DayTimeIntervalDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3526
                self.match(SqlBaseParser.INTERVAL)
                self.state = 3527
                localctx.from_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==132 or _la==181 or _la==252):
                    localctx.from_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                if la_ == 1:
                    self.state = 3528
                    self.match(SqlBaseParser.TO)
                    self.state = 3529
                    localctx.to = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==132 or _la==181 or _la==252):
                        localctx.to = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3532
                self.type_()
                self.state = 3543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                if la_ == 1:
                    self.state = 3533
                    self.match(SqlBaseParser.LEFT_PAREN)
                    self.state = 3534
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 3539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3535
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3536
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 3541
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3542
                    self.match(SqlBaseParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3547
            self.qualifiedColTypeWithPosition()
            self.state = 3552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3548
                self.match(SqlBaseParser.COMMA)
                self.state = 3549
                self.qualifiedColTypeWithPosition()
                self.state = 3554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def colDefinitionDescriptorWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColDefinitionDescriptorWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColDefinitionDescriptorWithPositionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            localctx.name = self.multipartIdentifier()
            self.state = 3556
            self.dataType()
            self.state = 3560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==51 or _la==82 or _la==114 or _la==193:
                self.state = 3557
                self.colDefinitionDescriptorWithPosition()
                self.state = 3562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColDefinitionDescriptorWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colDefinitionDescriptorWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColDefinitionDescriptorWithPosition" ):
                listener.enterColDefinitionDescriptorWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColDefinitionDescriptorWithPosition" ):
                listener.exitColDefinitionDescriptorWithPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColDefinitionDescriptorWithPosition" ):
                return visitor.visitColDefinitionDescriptorWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def colDefinitionDescriptorWithPosition(self):

        localctx = SqlBaseParser.ColDefinitionDescriptorWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_colDefinitionDescriptorWithPosition)
        try:
            self.state = 3568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3563
                self.match(SqlBaseParser.NOT)
                self.state = 3564
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3565
                self.defaultExpression()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3566
                self.commentSpec()
                pass
            elif token in [9, 114]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3567
                self.colPosition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_defaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultExpression" ):
                listener.enterDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultExpression" ):
                listener.exitDefaultExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultExpression" ):
                return visitor.visitDefaultExpression(self)
            else:
                return visitor.visitChildren(self)




    def defaultExpression(self):

        localctx = SqlBaseParser.DefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_defaultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.match(SqlBaseParser.DEFAULT)
            self.state = 3571
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefaultExpression" ):
                listener.enterVariableDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefaultExpression" ):
                listener.exitVariableDefaultExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefaultExpression" ):
                return visitor.visitVariableDefaultExpression(self)
            else:
                return visitor.visitChildren(self)




    def variableDefaultExpression(self):

        localctx = SqlBaseParser.VariableDefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_variableDefaultExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3573
            _la = self._input.LA(1)
            if not(_la==82 or _la==345):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3574
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576
            self.colType()
            self.state = 3581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,456,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3577
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3578
                    self.colType() 
                self.state = 3583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,456,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3585
            self.dataType()
            self.state = 3588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3586
                self.match(SqlBaseParser.NOT)
                self.state = 3587
                self.match(SqlBaseParser.NULL)


            self.state = 3591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.state = 3590
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createOrReplaceTableColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateOrReplaceTableColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateOrReplaceTableColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColTypeList" ):
                listener.enterCreateOrReplaceTableColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColTypeList" ):
                listener.exitCreateOrReplaceTableColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateOrReplaceTableColTypeList" ):
                return visitor.visitCreateOrReplaceTableColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def createOrReplaceTableColTypeList(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_createOrReplaceTableColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3593
            self.createOrReplaceTableColType()
            self.state = 3598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3594
                self.match(SqlBaseParser.COMMA)
                self.state = 3595
                self.createOrReplaceTableColType()
                self.state = 3600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateOrReplaceTableColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def colDefinitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColDefinitionOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColDefinitionOptionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createOrReplaceTableColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateOrReplaceTableColType" ):
                listener.enterCreateOrReplaceTableColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateOrReplaceTableColType" ):
                listener.exitCreateOrReplaceTableColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateOrReplaceTableColType" ):
                return visitor.visitCreateOrReplaceTableColType(self)
            else:
                return visitor.visitChildren(self)




    def createOrReplaceTableColType(self):

        localctx = SqlBaseParser.CreateOrReplaceTableColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_createOrReplaceTableColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3602
            self.dataType()
            self.state = 3606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51 or _la==82 or _la==125 or _la==193:
                self.state = 3603
                self.colDefinitionOption()
                self.state = 3608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColDefinitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def generationExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.GenerationExpressionContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colDefinitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColDefinitionOption" ):
                listener.enterColDefinitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColDefinitionOption" ):
                listener.exitColDefinitionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColDefinitionOption" ):
                return visitor.visitColDefinitionOption(self)
            else:
                return visitor.visitChildren(self)




    def colDefinitionOption(self):

        localctx = SqlBaseParser.ColDefinitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_colDefinitionOption)
        try:
            self.state = 3614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3609
                self.match(SqlBaseParser.NOT)
                self.state = 3610
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3611
                self.defaultExpression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3612
                self.generationExpression()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3613
                self.commentSpec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenerationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_generationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerationExpression" ):
                listener.enterGenerationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerationExpression" ):
                listener.exitGenerationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerationExpression" ):
                return visitor.visitGenerationExpression(self)
            else:
                return visitor.visitChildren(self)




    def generationExpression(self):

        localctx = SqlBaseParser.GenerationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_generationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3616
            self.match(SqlBaseParser.GENERATED)
            self.state = 3617
            self.match(SqlBaseParser.ALWAYS)
            self.state = 3618
            self.match(SqlBaseParser.AS)
            self.state = 3619
            self.match(SqlBaseParser.LEFT_PAREN)
            self.state = 3620
            self.expression()
            self.state = 3621
            self.match(SqlBaseParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3623
            self.complexColType()
            self.state = 3628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3624
                self.match(SqlBaseParser.COMMA)
                self.state = 3625
                self.complexColType()
                self.state = 3630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3631
            self.identifier()
            self.state = 3633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3632
                self.match(SqlBaseParser.COLON)


            self.state = 3635
            self.dataType()
            self.state = 3638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==193:
                self.state = 3636
                self.match(SqlBaseParser.NOT)
                self.state = 3637
                self.match(SqlBaseParser.NULL)


            self.state = 3641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 3640
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.match(SqlBaseParser.WHEN)
            self.state = 3644
            localctx.condition = self.expression()
            self.state = 3645
            self.match(SqlBaseParser.THEN)
            self.state = 3646
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = SqlBaseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3648
            self.match(SqlBaseParser.WINDOW)
            self.state = 3649
            self.namedWindow()
            self.state = 3654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3650
                    self.match(SqlBaseParser.COMMA)
                    self.state = 3651
                    self.namedWindow() 
                self.state = 3656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3657
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3658
            self.match(SqlBaseParser.AS)
            self.state = 3659
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3661
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3662
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3663
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3664
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3666
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3701
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 3667
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 3668
                    self.match(SqlBaseParser.BY)
                    self.state = 3669
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 3670
                        self.match(SqlBaseParser.COMMA)
                        self.state = 3671
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [3, 92, 204, 212, 228, 251, 271]:
                    self.state = 3687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92 or _la==212:
                        self.state = 3677
                        _la = self._input.LA(1)
                        if not(_la==92 or _la==212):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3678
                        self.match(SqlBaseParser.BY)
                        self.state = 3679
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3680
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3681
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3686
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==204 or _la==271:
                        self.state = 3689
                        _la = self._input.LA(1)
                        if not(_la==204 or _la==271):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3690
                        self.match(SqlBaseParser.BY)
                        self.state = 3691
                        self.sortItem()
                        self.state = 3696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 3692
                            self.match(SqlBaseParser.COMMA)
                            self.state = 3693
                            self.sortItem()
                            self.state = 3698
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==228 or _la==251:
                    self.state = 3703
                    self.windowFrame()


                self.state = 3706
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_windowFrame)
        try:
            self.state = 3725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3709
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3710
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3711
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3712
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3713
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 3714
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3715
                localctx.start = self.frameBound()
                self.state = 3716
                self.match(SqlBaseParser.AND)
                self.state = 3717
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3719
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 3720
                self.match(SqlBaseParser.BETWEEN)
                self.state = 3721
                localctx.start = self.frameBound()
                self.state = 3722
                self.match(SqlBaseParser.AND)
                self.state = 3723
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3727
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 3728
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==116 or _la==221):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3729
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 3730
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3731
                self.expression()
                self.state = 3732
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==116 or _la==221):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = SqlBaseParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3736
            self.qualifiedName()
            self.state = 3741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3737
                self.match(SqlBaseParser.COMMA)
                self.state = 3738
                self.qualifiedName()
                self.state = 3743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.identFunc = None # Token

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def LEFT_PAREN(self):
            return self.getToken(SqlBaseParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(SqlBaseParser.RIGHT_PAREN, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = SqlBaseParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_functionName)
        try:
            self.state = 3754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3744
                self.match(SqlBaseParser.IDENTIFIER_KW)
                self.state = 3745
                self.match(SqlBaseParser.LEFT_PAREN)
                self.state = 3746
                self.expression()
                self.state = 3747
                self.match(SqlBaseParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3749
                localctx.identFunc = self.match(SqlBaseParser.IDENTIFIER_KW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3750
                self.qualifiedName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3751
                self.match(SqlBaseParser.FILTER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3752
                self.match(SqlBaseParser.LEFT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3753
                self.match(SqlBaseParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            self.identifier()
            self.state = 3761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,479,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3757
                    self.match(SqlBaseParser.DOT)
                    self.state = 3758
                    self.identifier() 
                self.state = 3763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3764
            self.identifier()
            self.state = 3765
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUS)
            else:
                return self.getToken(SqlBaseParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealIdent" ):
                return visitor.visitRealIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3769 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3767
                        self.match(SqlBaseParser.MINUS)
                        self.state = 3768
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3771 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,480,self._ctx)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_identifier)
        try:
            self.state = 3779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3776
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3777
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3778
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_strictIdentifier)
        try:
            self.state = 3787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3781
                self.match(SqlBaseParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3782
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3783
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "SQL_standard_keyword_behavior")
                self.state = 3784
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3785
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!SQL_standard_keyword_behavior")
                self.state = 3786
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_quotedIdentifier)
        try:
            self.state = 3792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3789
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3790
                if not double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "double_quoted_identifiers")
                self.state = 3791
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackQuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_backQuotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def backQuotedIdentifier(self):

        localctx = SqlBaseParser.BackQuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_backQuotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3794
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FloatLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT_LITERAL(self):
            return self.getToken(SqlBaseParser.FLOAT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3796
                if not self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3797
                    self.match(SqlBaseParser.MINUS)


                self.state = 3800
                self.match(SqlBaseParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3801
                if not legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!legacy_exponent_literal_as_decimal_enabled")
                self.state = 3803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3802
                    self.match(SqlBaseParser.MINUS)


                self.state = 3805
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3806
                if not legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "legacy_exponent_literal_as_decimal_enabled")
                self.state = 3808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3807
                    self.match(SqlBaseParser.MINUS)


                self.state = 3810
                _la = self._input.LA(1)
                if not(_la==376 or _la==377):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3811
                    self.match(SqlBaseParser.MINUS)


                self.state = 3814
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3815
                    self.match(SqlBaseParser.MINUS)


                self.state = 3818
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3819
                    self.match(SqlBaseParser.MINUS)


                self.state = 3822
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3823
                    self.match(SqlBaseParser.MINUS)


                self.state = 3826
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3827
                    self.match(SqlBaseParser.MINUS)


                self.state = 3830
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.FloatLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3831
                    self.match(SqlBaseParser.MINUS)


                self.state = 3834
                self.match(SqlBaseParser.FLOAT_LITERAL)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 3836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 3835
                    self.match(SqlBaseParser.MINUS)


                self.state = 3838
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token
            self.dropDefault = None # Token

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def defaultExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.DefaultExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = SqlBaseParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3841
                self.match(SqlBaseParser.TYPE)
                self.state = 3842
                self.dataType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3843
                self.commentSpec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3844
                self.colPosition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3845
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==95 or _la==262):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3846
                self.match(SqlBaseParser.NOT)
                self.state = 3847
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3848
                self.match(SqlBaseParser.SET)
                self.state = 3849
                self.defaultExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3850
                localctx.dropDefault = self.match(SqlBaseParser.DROP)
                self.state = 3851
                self.match(SqlBaseParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SqlBaseParser.STRING_LITERAL, 0)

        def DOUBLEQUOTED_STRING(self):
            return self.getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLit" ):
                listener.enterStringLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLit" ):
                listener.exitStringLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLit" ):
                return visitor.visitStringLit(self)
            else:
                return visitor.visitChildren(self)




    def stringLit(self):

        localctx = SqlBaseParser.StringLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_stringLit)
        try:
            self.state = 3857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3854
                self.match(SqlBaseParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3855
                if not self.double_quoted_identifiers:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!double_quoted_identifiers")
                self.state = 3856
                self.match(SqlBaseParser.DOUBLEQUOTED_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = SqlBaseParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_comment)
        try:
            self.state = 3861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3859
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3860
                self.match(SqlBaseParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def stringLit(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLitContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SqlBaseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_version)
        try:
            self.state = 3865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3863
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3864
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = SqlBaseParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3867
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7349166403023190784) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 5707138236908830719) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 3458764512936521471) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -2306406509060311865) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & -1008854720879527941) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & 3751929) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = SqlBaseParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            _la = self._input.LA(1)
            if not(_la==15 or _la==60 or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 1315200624777756673) != 0) or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & 9007199254741249) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 576460752303423553) != 0) or _la==325):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ANY_VALUE(self):
            return self.getToken(SqlBaseParser.ANY_VALUE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(SqlBaseParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BINARY_HEX(self):
            return self.getToken(SqlBaseParser.BINARY_HEX, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHAR(self):
            return self.getToken(SqlBaseParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(SqlBaseParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DATEADD(self):
            return self.getToken(SqlBaseParser.DATEADD, 0)

        def DATE_ADD(self):
            return self.getToken(SqlBaseParser.DATE_ADD, 0)

        def DATEDIFF(self):
            return self.getToken(SqlBaseParser.DATEDIFF, 0)

        def DATE_DIFF(self):
            return self.getToken(SqlBaseParser.DATE_DIFF, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DAYS(self):
            return self.getToken(SqlBaseParser.DAYS, 0)

        def DAYOFYEAR(self):
            return self.getToken(SqlBaseParser.DAYOFYEAR, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEC(self):
            return self.getToken(SqlBaseParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(SqlBaseParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXCLUDE(self):
            return self.getToken(SqlBaseParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def HOURS(self):
            return self.getToken(SqlBaseParser.HOURS, 0)

        def IDENTIFIER_KW(self):
            return self.getToken(SqlBaseParser.IDENTIFIER_KW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INCLUDE(self):
            return self.getToken(SqlBaseParser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MICROSECOND(self):
            return self.getToken(SqlBaseParser.MICROSECOND, 0)

        def MICROSECONDS(self):
            return self.getToken(SqlBaseParser.MICROSECONDS, 0)

        def MILLISECOND(self):
            return self.getToken(SqlBaseParser.MILLISECOND, 0)

        def MILLISECONDS(self):
            return self.getToken(SqlBaseParser.MILLISECONDS, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MINUTES(self):
            return self.getToken(SqlBaseParser.MINUTES, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MONTHS(self):
            return self.getToken(SqlBaseParser.MONTHS, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAME(self):
            return self.getToken(SqlBaseParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NANOSECOND(self):
            return self.getToken(SqlBaseParser.NANOSECOND, 0)

        def NANOSECONDS(self):
            return self.getToken(SqlBaseParser.NANOSECONDS, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def NUMERIC(self):
            return self.getToken(SqlBaseParser.NUMERIC, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(SqlBaseParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(SqlBaseParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(SqlBaseParser.PERCENTILE_DISC, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(SqlBaseParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUARTER(self):
            return self.getToken(SqlBaseParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def REAL(self):
            return self.getToken(SqlBaseParser.REAL, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(SqlBaseParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECONDS(self):
            return self.getToken(SqlBaseParser.SECONDS, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SINGLE(self):
            return self.getToken(SqlBaseParser.SINGLE, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SOURCE(self):
            return self.getToken(SqlBaseParser.SOURCE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(SqlBaseParser.SYNC, 0)

        def SYSTEM_TIME(self):
            return self.getToken(SqlBaseParser.SYSTEM_TIME, 0)

        def SYSTEM_VERSION(self):
            return self.getToken(SqlBaseParser.SYSTEM_VERSION, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TARGET(self):
            return self.getToken(SqlBaseParser.TARGET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(SqlBaseParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SqlBaseParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SqlBaseParser.TIMESTAMPDIFF, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNPIVOT(self):
            return self.getToken(SqlBaseParser.UNPIVOT, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(SqlBaseParser.VARCHAR, 0)

        def VAR(self):
            return self.getToken(SqlBaseParser.VAR, 0)

        def VARIABLE(self):
            return self.getToken(SqlBaseParser.VARIABLE, 0)

        def VARIANT(self):
            return self.getToken(SqlBaseParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def VOID(self):
            return self.getToken(SqlBaseParser.VOID, 0)

        def WEEK(self):
            return self.getToken(SqlBaseParser.WEEK, 0)

        def WEEKS(self):
            return self.getToken(SqlBaseParser.WEEKS, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def YEARS(self):
            return self.getToken(SqlBaseParser.YEARS, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606880000) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -288230444871188481) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9223372031955271679) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -4503599627370625) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -1152921504606847107) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 33554399) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[53] = self.queryTerm_sempred
        self._predicates[137] = self.booleanExpression_sempred
        self._predicates[139] = self.valueExpression_sempred
        self._predicates[141] = self.primaryExpression_sempred
        self._predicates[183] = self.identifier_sempred
        self._predicates[184] = self.strictIdentifier_sempred
        self._predicates[185] = self.quotedIdentifier_sempred
        self._predicates[187] = self.number_sempred
        self._predicates[189] = self.stringLit_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.legacy_setops_precedence_enabled
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return not self.legacy_setops_precedence_enabled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 5:
                return not self.legacy_setops_precedence_enabled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 17:
                return not self.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 18:
                return self.SQL_standard_keyword_behavior
         

            if predIndex == 19:
                return not self.SQL_standard_keyword_behavior
         

    def quotedIdentifier_sempred(self, localctx:QuotedIdentifierContext, predIndex:int):
            if predIndex == 20:
                return self.double_quoted_identifiers
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 21:
                return  not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 22:
                return not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 23:
                return self.legacy_exponent_literal_as_decimal_enabled
         

    def stringLit_sempred(self, localctx:StringLitContext, predIndex:int):
            if predIndex == 24:
                return  not self.double_quoted_identifiers
         




